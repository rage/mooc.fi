{"version":3,"file":"UserCourseServiceProgress.js","sourceRoot":"","sources":["../../graphql/UserCourseServiceProgress.ts"],"names":[],"mappings":"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","sourcesContent":["import { schema } from \"nexus\"\n\nimport { isAdmin } from \"../accessControl\"\n\nschema.objectType({\n  name: \"UserCourseServiceProgress\",\n  definition(t) {\n    t.model.id()\n    t.model.created_at()\n    t.model.updated_at()\n    // t.model.progress()\n    t.model.service_id()\n    t.model.service()\n    t.model.timestamp()\n    t.model.user_id()\n    t.model.user()\n    t.model.user_course_progress_id()\n    t.model.user_course_progress()\n    t.model.course_id()\n    t.model.course()\n\n    t.list.field(\"progress\", {\n      type: \"Json\",\n      resolve: async (parent, _args, ctx) => {\n        const res = await ctx.db.userCourseServiceProgress.findOne({\n          where: { id: parent.id },\n          select: { progress: true },\n        })\n\n        return (res?.progress as any) ?? [] // errors without any typing - JSON value thing\n      },\n    })\n  },\n})\n\n/*********************** QUERIES **********************/\n\nschema.extendType({\n  type: \"Query\",\n  definition(t) {\n    t.field(\"userCourseServiceProgress\", {\n      type: \"UserCourseServiceProgress\",\n      args: {\n        user_id: schema.idArg(),\n        course_id: schema.idArg(),\n        service_id: schema.idArg(),\n      },\n      authorize: isAdmin,\n      resolve: async (_, args, ctx) => {\n        const { user_id, course_id, service_id } = args\n        const result = await ctx.db.userCourseServiceProgress.findMany({\n          where: {\n            user_id: user_id,\n            course_id: course_id,\n            service_id: service_id,\n          },\n        })\n        return result[0]\n      },\n    })\n\n    t.crud.userCourseServiceProgresses({\n      filtering: {\n        user_id: true,\n        course_id: true,\n        service_id: true,\n      },\n      pagination: true,\n      authorize: isAdmin,\n    })\n    /*t.list.field(\"UserCourseServiceProgresses\", {\n      type: \"user_course_service_progress\",\n      args: {\n        user_id: schema.idArg(),\n        course_id: schema.idArg(),\n        service_id: schema.idArg(),\n        first: schema.intArg(),\n        after: schema.idArg(),\n        last: schema.intArg(),\n        before: schema.idArg(),\n      },\n      resolve: (_, args, ctx) => {\n        checkAccess(ctx)\n        const {\n          user_id,\n          course_id,\n          service_id,\n          first,\n          last,\n          before,\n          after,\n        } = args\n        return ctx.db.user_course_service_progress.findMany({\n          where: {\n            user: user_id,\n            course: course_id,\n            service: service_id,\n          },\n          first,\n          last,\n          before: { id: before },\n          after: { id: after },\n        })\n      },\n    })*/\n  },\n})\n\n/********************** MUTATIONS *********************/\n\nschema.extendType({\n  type: \"Mutation\",\n  definition(t) {\n    t.field(\"addUserCourseServiceProgress\", {\n      type: \"UserCourseServiceProgress\",\n      args: {\n        progress: schema.arg({ type: \"PointsByGroup\", required: true }),\n        service_id: schema.idArg({ required: true }),\n        user_course_progress_id: schema.idArg({ required: true }),\n      },\n      authorize: isAdmin,\n      resolve: async (_, args, ctx) => {\n        const { service_id, progress, user_course_progress_id } = args\n\n        const course = await ctx.db.userCourseProgress\n          .findOne({ where: { id: user_course_progress_id } })\n          .course()\n        const user = await ctx.db.userCourseProgress\n          .findOne({ where: { id: user_course_progress_id } })\n          .user()\n\n        if (!course || !user) {\n          throw new Error(\"course or user not found\")\n        }\n\n        return ctx.db.userCourseServiceProgress.create({\n          data: {\n            course: {\n              connect: { id: course.id },\n            },\n            progress: progress,\n            service: {\n              connect: { id: service_id },\n            },\n            user: {\n              connect: { id: user.id },\n            },\n            user_course_progress: {\n              connect: { id: user_course_progress_id },\n            },\n          },\n        })\n      },\n    })\n  },\n})\n"]}