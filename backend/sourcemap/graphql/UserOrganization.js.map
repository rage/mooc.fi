{"version":3,"file":"UserOrganization.js","sourceRoot":"","sources":["../../graphql/UserOrganization.ts"],"names":[],"mappings":"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","sourcesContent":["import { schema } from \"nexus\"\n\nimport { ForbiddenError } from \"apollo-server-core\"\nimport { NexusContext } from \"../context\"\nimport { Role, or, isVisitor, isAdmin } from \"../accessControl\"\nimport { OrganizationRole } from \"@prisma/client\"\n\nschema.objectType({\n  name: \"UserOrganization\",\n  definition(t) {\n    t.model.id()\n    t.model.created_at()\n    t.model.updated_at()\n    t.model.organization_id()\n    t.model.organization()\n    t.model.role()\n    t.model.user_id()\n    t.model.user()\n  },\n})\n\nschema.extendType({\n  type: \"Query\",\n  definition(t) {\n    t.list.field(\"userOrganizations\", {\n      type: \"UserOrganization\",\n      args: {\n        user_id: schema.idArg(),\n        organization_id: schema.idArg(),\n      },\n      resolve: async (_, args, ctx) => {\n        const { user_id, organization_id } = args\n\n        if (!user_id && !organization_id) {\n          throw new Error(\"must provide at least one of user/organization id\")\n        }\n\n        return ctx.db.userOrganization.findMany({\n          where: {\n            user_id,\n            organization_id,\n          },\n        })\n      },\n    })\n  },\n})\n\nconst checkUser = async (ctx: NexusContext, id: any) => {\n  const { user, role } = ctx\n\n  let existingUser\n\n  try {\n    existingUser = await ctx.db.userOrganization\n      .findOne({ where: { id } })\n      .user()\n  } catch {\n    throw new Error(\"no such user/organization relation\")\n  }\n\n  if (!existingUser) {\n    throw new Error(\"relation has no user - wonder how that happened\")\n  }\n\n  if (!user || (user && user.id !== existingUser.id && role !== Role.ADMIN)) {\n    throw new ForbiddenError(\"invalid credentials to do that\")\n  }\n}\n\nschema.extendType({\n  type: \"Mutation\",\n  definition(t) {\n    t.field(\"addUserOrganization\", {\n      type: \"UserOrganization\",\n      args: {\n        user_id: schema.idArg({ required: true }),\n        organization_id: schema.idArg({ required: true }),\n      },\n      authorize: or(isVisitor, isAdmin),\n      resolve: async (_, args, ctx) => {\n        const { user_id, organization_id } = args\n\n        const exists =\n          (\n            await ctx.db.userOrganization.findMany({\n              where: {\n                user_id,\n                organization_id,\n              },\n            })\n          ).length > 0\n\n        if (exists) {\n          throw new Error(\"this user/organization relation already exists\")\n        }\n\n        return ctx.db.userOrganization.create({\n          data: {\n            user: { connect: { id: user_id } },\n            organization: {\n              connect: { id: organization_id },\n            },\n            role: OrganizationRole.Student,\n          },\n        })\n      },\n    })\n\n    t.field(\"updateUserOrganization\", {\n      type: \"UserOrganization\",\n      args: {\n        id: schema.idArg({ required: true }),\n        /*       userId: schema.idArg(),\n        organizationId: schema.idArg(), */\n        role: schema.arg({ type: \"OrganizationRole\" }),\n      },\n      authorize: or(isVisitor, isAdmin),\n      resolve: (_, args, ctx: NexusContext) => {\n        const { id, role } = args\n\n        checkUser(ctx, id)\n\n        return ctx.db.userOrganization.update({\n          data: {\n            role: role ? role : OrganizationRole.Student,\n          },\n          where: {\n            id,\n          },\n        })\n      },\n    })\n\n    t.field(\"deleteUserOrganization\", {\n      type: \"UserOrganization\",\n      args: {\n        id: schema.idArg({ required: true }),\n      },\n      authorize: or(isVisitor, isAdmin),\n      resolve: async (_, args, ctx: NexusContext) => {\n        const { id } = args\n        checkUser(ctx, id)\n\n        return ctx.db.userOrganization.delete({\n          where: { id },\n        })\n      },\n    })\n  },\n})\n"]}