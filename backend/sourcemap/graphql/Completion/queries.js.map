{"version":3,"file":"queries.js","sourceRoot":"","sources":["../../../graphql/Completion/queries.ts"],"names":[],"mappings":"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","sourcesContent":["import { schema } from \"nexus\"\nimport { UserInputError, ForbiddenError } from \"apollo-server-core\"\nimport Knex from \"../../services/knex\"\nimport { convertPagination } from \"../../util/db-functions\"\nimport { or, isOrganization, isAdmin } from \"../../accessControl\"\n\nschema.extendType({\n  type: \"Query\",\n  definition(t) {\n    t.list.field(\"completions\", {\n      type: \"Completion\",\n      args: {\n        course: schema.stringArg({ required: true }),\n        completion_language: schema.stringArg(),\n        first: schema.intArg(),\n        after: schema.idArg(),\n        last: schema.intArg(),\n        before: schema.idArg(),\n      },\n      authorize: or(isOrganization, isAdmin),\n      resolve: async (_, args, ctx) => {\n        const { first, last, completion_language } = args\n        let { course } = args\n        if ((!first && !last) || (first ?? 0) > 50 || (last ?? 0) > 50) {\n          ctx.disableRelations = true\n        }\n\n        const courseWithSlug = await ctx.db.course.findOne({\n          where: {\n            slug: course,\n          },\n        })\n\n        if (!courseWithSlug) {\n          const courseFromAvoinCourse = await ctx.db.courseAlias\n            .findOne({\n              where: {\n                course_code: course,\n              },\n            })\n            .course()\n\n          if (!courseFromAvoinCourse) {\n            throw new UserInputError(\"Invalid course identifier\")\n          }\n          course = courseFromAvoinCourse.slug\n        }\n        const courseObject = await ctx.db.course.findOne({\n          where: {\n            slug: course,\n          },\n        })\n\n        if (completion_language) {\n          return await Knex.select(\"*\").from(\"completion\").where({\n            course_id: courseObject?.id,\n            completion_language: completion_language,\n          })\n        } else {\n          return await Knex.select(\"*\")\n            .from(\"completion\")\n            .where({ course_id: courseObject?.id })\n        }\n      },\n    })\n\n    t.connection(\"completionsPaginated\", {\n      type: \"Completion\",\n      additionalArgs: {\n        course: schema.stringArg({ required: true }),\n        completion_language: schema.stringArg(),\n        skip: schema.intArg({ default: 0 }),\n      },\n      authorize: or(isOrganization, isAdmin),\n      cursorFromNode: (node, _args, _ctx, _info, _) => `cursor:${node?.id}`,\n      nodes: async (_, args, ctx, __) => {\n        const { completion_language, first, last, before, after, skip } = args\n        let { course } = args\n\n        if ((!first && !last) || (first ?? 0) > 50 || (last ?? 0) > 50) {\n          throw new ForbiddenError(\"Cannot query more than 50 objects\")\n        }\n\n        const courseWithSlug = await ctx.db.course.findOne({\n          where: { slug: course },\n        })\n\n        if (!courseWithSlug) {\n          const courseFromAvoinCourse = await ctx.db.courseAlias\n            .findOne({ where: { course_code: course } })\n            .course()\n          if (!courseFromAvoinCourse) {\n            throw new UserInputError(\"Invalid course identifier\")\n          }\n          course = courseFromAvoinCourse.slug\n        }\n\n        return ctx.db.completion.findMany({\n          ...convertPagination({ first, last, before, after, skip }),\n          where: {\n            course: { slug: course },\n            completion_language,\n          },\n        })\n      },\n    })\n  },\n})\n"]}