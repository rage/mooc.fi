{"version":3,"file":"mutations.js","sourceRoot":"","sources":["../../../graphql/Completion/mutations.ts"],"names":[],"mappings":"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","sourcesContent":["import { schema } from \"nexus\"\n\nimport Knex from \"../../services/knex\"\nimport { isAdmin } from \"../../accessControl\"\nimport { v4 as uuidv4 } from \"uuid\"\nimport { groupBy } from \"lodash\"\n\nschema.extendType({\n  type: \"Mutation\",\n  definition(t) {\n    t.field(\"addCompletion\", {\n      type: \"Completion\",\n      args: {\n        user_upstream_id: schema.intArg(),\n        email: schema.stringArg(),\n        student_number: schema.stringArg(),\n        user: schema.idArg({ required: true }),\n        course: schema.idArg({ required: true }),\n        completion_language: schema.stringArg(),\n      },\n      authorize: isAdmin,\n      resolve: (_, args, ctx) => {\n        const {\n          user_upstream_id,\n          email,\n          student_number,\n          user,\n          course,\n          completion_language,\n        } = args\n\n        return ctx.db.completion.create({\n          data: {\n            course: { connect: { id: course } },\n            user: { connect: { id: user } },\n            email: email ?? \"\",\n            student_number,\n            completion_language,\n            user_upstream_id,\n          },\n        })\n      },\n    })\n\n    t.list.field(\"addManualCompletion\", {\n      type: \"Completion\",\n      args: {\n        completions: schema.arg({ type: \"ManualCompletionArg\", list: true }),\n        course_id: schema.stringArg({ required: true }),\n      },\n      authorize: isAdmin,\n      resolve: async (_, args, _ctx) => {\n        const { course_id } = args\n\n        const course = (\n          await Knex.select([\"id\", \"completion_email_id\"])\n            .from(\"course\")\n            .where(\"id\", course_id)\n            .limit(1)\n        )[0]\n        if (!course) {\n          throw new Error(\"Course not found\")\n        }\n        const completions: any[] = args.completions || []\n        const foundUsers = await Knex.select([\n          \"id\",\n          \"email\",\n          \"upstream_id\",\n          \"student_number\",\n          \"real_student_number\",\n        ])\n          .from(\"user\")\n          .whereIn(\n            \"upstream_id\",\n            completions.map((o) => o.user_id),\n          )\n        if (foundUsers.length !== completions.length) {\n          throw new Error(\"All users were not found\")\n        }\n\n        const databaseUsersByUpstreamId = groupBy(foundUsers, \"upstream_id\")\n\n        const newCompletions = completions.map((o) => {\n          const databaseUser = databaseUsersByUpstreamId[o.user_id][0]\n          return {\n            id: uuidv4(),\n            created_at: new Date(),\n            updated_at: new Date(),\n            user_upstream_id: o.user_id,\n            email: databaseUser.email,\n            student_number:\n              databaseUser.real_student_number || databaseUser.student_number,\n            completion_language: \"unknown\",\n            course_id: course_id,\n            user_id: databaseUser.id,\n            grade: o.grade,\n            completion_date: o.completion_date,\n          }\n        })\n\n        const newEmailDeliveries = completions.map((o) => {\n          const databaseUser = databaseUsersByUpstreamId[o.user_id][0]\n          return {\n            id: uuidv4(),\n            created_at: new Date(),\n            updated_at: new Date(),\n            user_id: databaseUser.id,\n            email_template_id: course.completion_email_id,\n            sent: false,\n            error: false,\n          }\n        })\n\n        const res = await Knex.transaction(async (trx) => {\n          const inserted = await trx\n            .batchInsert(\"completion\", newCompletions)\n            .returning(\"*\")\n\n          if (course.completion_email_id) {\n            await trx.batchInsert(\"email_delivery\", newEmailDeliveries)\n          }\n\n          return inserted\n        })\n\n        return res\n      },\n    })\n  },\n})\n"]}