{"version":3,"file":"model.js","sourceRoot":"","sources":["../../../graphql/Completion/model.ts"],"names":[],"mappings":"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","sourcesContent":["import { schema } from \"nexus\"\nimport { ForbiddenError } from \"apollo-server-core\"\n\nschema.objectType({\n  name: \"Completion\",\n  definition(t) {\n    t.model.id()\n    t.model.created_at()\n    t.model.updated_at()\n    t.model.completion_language()\n    t.model.email()\n    t.model.student_number()\n    t.model.user_upstream_id()\n    t.model.completions_registered()\n    t.model.course_id()\n    t.model.grade()\n    t.model.certificate_id()\n    t.model.eligible_for_ects()\n    t.model.course()\n    t.model.completion_date()\n    // we're not querying completion course languages for now, and this was buggy\n    /*     t.field(\"course\", {\n      type: \"Course\",\n      args: {\n        language: schema.stringArg({ required: false }),\n      },\n      resolve: async (parent, args, ctx) => {\n        const { language } = args\n        const { prisma } = ctx\n\n        const course = await prisma.course({ id: parent.course })\n\n        if (language) {\n          const course_translations = await prisma.courseTranslations({\n            where: { course, language },\n          })\n\n          if (!course_translations.length) {\n            return course\n          }\n\n          const { name = course.name, description } = course_translations[0]\n\n          return { ...course, name, description }\n        }\n\n        return course\n      },\n    })\n */\n    t.field(\"user\", {\n      type: \"User\",\n      resolve: async (parent, _, ctx) => {\n        if (ctx.disableRelations) {\n          throw new ForbiddenError(\n            \"Cannot query relations when asking for more than 50 objects\",\n          )\n        }\n        return ctx.db.completion.findOne({ where: { id: parent.id } }).user()\n      },\n    })\n\n    t.field(\"completion_link\", {\n      type: \"String\",\n      nullable: true,\n      resolve: async (parent, _, ctx) => {\n        const course = await ctx.db.completion\n          .findOne({ where: { id: parent.id } })\n          .course()\n\n        if (!course) {\n          throw new Error(\"course not found\")\n        }\n\n        let filter\n        if (\n          !parent.completion_language ||\n          parent.completion_language === \"unknown\"\n        ) {\n          filter = {\n            course_id: course.id,\n          }\n        } else {\n          filter = {\n            course_id: course.id,\n            language: parent.completion_language,\n          }\n        }\n        const avoinLinks = await ctx.db.openUniversityRegistrationLink.findMany(\n          {\n            where: filter,\n          },\n        )\n        if (avoinLinks.length < 1) {\n          return null\n        }\n        return avoinLinks[0].link\n      },\n    })\n\n    t.field(\"registered\", {\n      type: \"Boolean\",\n      resolve: async (parent, _, ctx) => {\n        const registered = await ctx.db.completionRegistered.findMany({\n          where: { completion_id: parent.id },\n        })\n\n        return registered.length > 0\n      },\n    })\n  },\n})\n"]}