{"version":3,"file":"VerifiedUser.js","sourceRoot":"","sources":["../../graphql/VerifiedUser.ts"],"names":[],"mappings":"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","sourcesContent":["import { schema } from \"nexus\"\n\nimport { ForbiddenError, AuthenticationError } from \"apollo-server-core\"\nimport { NexusContext } from \"../context\"\n\nschema.objectType({\n  name: \"VerifiedUser\",\n  definition(t) {\n    t.model.id()\n    t.model.created_at()\n    t.model.updated_at()\n    t.model.display_name()\n    t.model.organization_id()\n    t.model.organization()\n    t.model.personal_unique_code()\n    t.model.user_id()\n    t.model.user()\n  },\n})\n\nschema.inputObjectType({\n  name: \"VerifiedUserArg\",\n  definition(t) {\n    t.string(\"display_name\")\n    t.string(\"personal_unique_code\", { required: true })\n    t.id(\"organization_id\", { required: true })\n    t.string(\"organization_secret\", { required: true })\n  },\n})\n\nschema.extendType({\n  type: \"Mutation\",\n  definition(t) {\n    t.field(\"addVerifiedUser\", {\n      type: \"VerifiedUser\",\n      args: {\n        verified_user: schema.arg({\n          type: \"VerifiedUserArg\",\n          required: true,\n        }),\n      },\n      resolve: async (_, { verified_user }, ctx: NexusContext) => {\n        const {\n          organization_id,\n          display_name,\n          personal_unique_code,\n          organization_secret,\n        } = verified_user\n        const { user: currentUser } = ctx\n\n        if (!currentUser) {\n          throw new AuthenticationError(\"not logged in\")\n        }\n\n        const organization = await ctx.db.organization.findOne({\n          where: { id: organization_id },\n        })\n\n        if (!organization || !organization?.secret_key) {\n          throw new ForbiddenError(\"no organization or organization secret\")\n        }\n        if (organization.secret_key !== organization_secret) {\n          throw new ForbiddenError(\"wrong organization secret key\")\n        }\n\n        return ctx.db.verifiedUser.create({\n          data: {\n            organization: {\n              connect: { id: organization.id },\n            },\n            user: { connect: { id: currentUser.id } },\n            personal_unique_code,\n            display_name,\n          },\n        })\n      },\n    })\n  },\n})\n"]}