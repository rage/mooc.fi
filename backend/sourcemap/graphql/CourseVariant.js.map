{"version":3,"file":"CourseVariant.js","sourceRoot":"","sources":["../../graphql/CourseVariant.ts"],"names":[],"mappings":"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","sourcesContent":["import { schema } from \"nexus\"\n\nimport { isAdmin } from \"../accessControl\"\n\nschema.objectType({\n  name: \"CourseVariant\",\n  definition(t) {\n    t.model.id()\n    t.model.created_at()\n    t.model.updated_at()\n    t.model.course_id()\n    t.model.course()\n    t.model.description()\n    t.model.slug()\n  },\n})\n\nschema.inputObjectType({\n  name: \"CourseVariantCreateInput\",\n  definition(t) {\n    t.id(\"course\", { required: false })\n    t.string(\"slug\", { required: true })\n    t.string(\"description\", { required: false })\n  },\n})\n\nschema.inputObjectType({\n  name: \"CourseVariantUpsertInput\",\n  definition(t) {\n    t.id(\"id\", { required: false })\n    t.id(\"course\", { required: false })\n    t.string(\"slug\", { required: true })\n    t.string(\"description\", { required: false })\n  },\n})\n\nschema.extendType({\n  type: \"Query\",\n  definition(t) {\n    t.field(\"courseVariant\", {\n      type: \"CourseVariant\",\n      args: {\n        id: schema.idArg({ required: true }),\n      },\n      nullable: true,\n      resolve: (_, { id }, ctx) =>\n        ctx.db.courseVariant.findOne({ where: { id: id ?? undefined } }),\n    })\n\n    t.list.field(\"courseVariants\", {\n      type: \"CourseVariant\",\n      args: {\n        course_id: schema.idArg(),\n      },\n      resolve: (_, { course_id }, ctx) =>\n        ctx.db.course\n          .findOne({ where: { id: course_id ?? undefined } })\n          .course_variants(),\n    })\n  },\n})\n\nschema.extendType({\n  type: \"Mutation\",\n  definition(t) {\n    t.field(\"addCourseVariant\", {\n      type: \"CourseVariant\",\n      args: {\n        course_id: schema.idArg({ required: true }),\n        slug: schema.stringArg({ required: true }),\n        description: schema.stringArg(),\n      },\n      authorize: isAdmin,\n      resolve: async (_, args, ctx) => {\n        const { course_id, slug, description } = args\n\n        return ctx.db.courseVariant.create({\n          data: {\n            slug,\n            description,\n            course: { connect: { id: course_id } },\n          },\n        })\n      },\n    })\n\n    t.field(\"updateCourseVariant\", {\n      type: \"CourseVariant\",\n      args: {\n        id: schema.idArg({ required: true }),\n        slug: schema.stringArg(),\n        description: schema.stringArg(),\n      },\n      authorize: isAdmin,\n      resolve: async (_, args, ctx) => {\n        const { id, slug, description } = args\n\n        return ctx.db.courseVariant.update({\n          where: { id },\n          data: {\n            slug: slug ?? undefined,\n            description,\n          },\n        })\n      },\n    })\n\n    t.field(\"deleteCourseVariant\", {\n      type: \"CourseVariant\",\n      args: {\n        id: schema.idArg({ required: true }),\n      },\n      authorize: isAdmin,\n      resolve: async (_, { id }, ctx) => {\n        return ctx.db.courseVariant.delete({ where: { id } })\n      },\n    })\n  },\n})\n"]}