{"version":3,"file":"mutations.js","sourceRoot":"","sources":["../../../graphql/User/mutations.ts"],"names":[],"mappings":"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","sourcesContent":["import { AuthenticationError } from \"apollo-server-core\"\nimport { invalidate } from \"../../services/redis\"\nimport { schema } from \"nexus\"\nimport { NexusContext } from \"../../context\"\nimport hashUser from \"../../util/hashUser\"\n\nschema.extendType({\n  type: \"Mutation\",\n  definition(t) {\n    t.field(\"updateUserName\", {\n      type: \"User\",\n      args: {\n        first_name: schema.stringArg(),\n        last_name: schema.stringArg(),\n      },\n      resolve: (_, { first_name, last_name }, ctx: NexusContext) => {\n        const {\n          user: currentUser,\n          headers: { authorization },\n        } = ctx\n\n        if (!currentUser) {\n          throw new AuthenticationError(\"not logged in\")\n        }\n        const access_token = authorization?.split(\" \")[1]\n\n        invalidate(\"userdetails\", `Bearer ${access_token}`)\n        invalidate(\"user\", hashUser(currentUser))\n\n        return ctx.db.user.update({\n          where: { id: currentUser.id },\n          data: {\n            first_name,\n            last_name,\n          },\n        })\n      },\n    })\n\n    t.field(\"updateResearchConsent\", {\n      type: \"User\",\n      args: {\n        value: schema.booleanArg({ required: true }),\n      },\n      resolve: (_, { value }, ctx: NexusContext) => {\n        const {\n          user: currentUser,\n          headers: { authorization },\n        } = ctx\n\n        if (!currentUser) {\n          throw new AuthenticationError(\"not logged in\")\n        }\n\n        const access_token = authorization?.split(\" \")[1]\n\n        invalidate(\"userdetails\", `Bearer ${access_token}`)\n        invalidate(\"user\", hashUser(currentUser))\n\n        return ctx.db.user.update({\n          where: { id: currentUser.id },\n          data: {\n            research_consent: value,\n          },\n        })\n      },\n    })\n\n    t.field(\"addUser\", {\n      type: \"User\",\n      args: {\n        user: schema.arg({\n          type: \"UserArg\",\n          required: true,\n        }),\n      },\n      resolve: async (_, { user }, ctx) => {\n        const exists = await ctx.db.user.findMany({\n          where: { upstream_id: user.upstream_id },\n        })\n\n        if (exists.length > 0) {\n          throw new Error(\"user with that upstream id already exists\")\n        }\n\n        return ctx.db.user.create({\n          data: {\n            ...user,\n            administrator: false,\n          },\n        })\n      },\n    })\n  },\n})\n"]}