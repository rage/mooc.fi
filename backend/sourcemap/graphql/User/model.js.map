{"version":3,"file":"model.js","sourceRoot":"","sources":["../../../graphql/User/model.ts"],"names":[],"mappings":"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","sourcesContent":["import { schema } from \"nexus\"\n\nschema.objectType({\n  name: \"User\",\n  definition(t) {\n    t.model.id()\n    t.model.administrator()\n    t.model.created_at()\n    t.model.email()\n    t.model.first_name()\n    t.model.last_name()\n    t.model.real_student_number()\n    t.model.student_number()\n    t.model.updated_at()\n    t.model.upstream_id()\n    t.model.username()\n    // t.model.completions()\n    t.model.completions_registered()\n    t.model.email_deliveries()\n    t.model.exercise_completions()\n    t.model.organizations()\n    t.model.user_course_progresses()\n    t.model.user_course_service_progresses()\n    t.model.user_course_settings()\n    t.model.user_organizations()\n    t.model.verified_users()\n    t.model.research_consent()\n    // t.prismaFields({ filter: [\"completions\"] })\n\n    t.field(\"completions\", {\n      type: \"Completion\",\n      list: true,\n      nullable: false,\n      args: {\n        course_id: schema.stringArg({ required: false }),\n        course_slug: schema.stringArg({ required: false }),\n      },\n      resolve: async (parent, args, ctx) => {\n        let { course_id, course_slug } = args\n\n        if (course_id || course_slug) {\n          const handlerCourse = await ctx.db.course\n            .findOne({\n              where: {\n                id: args.course_id ?? undefined,\n                slug: args.course_slug ?? undefined,\n              },\n            })\n            .completions_handled_by()\n          if (handlerCourse) {\n            course_id = handlerCourse.id\n            course_slug = undefined\n          }\n        }\n        return ctx.db.completion.findMany({\n          where: {\n            user_id: parent.id,\n            course:\n              course_id || course_slug\n                ? { id: course_id ?? undefined, slug: course_slug ?? undefined }\n                : undefined,\n          },\n        })\n      },\n    })\n\n    t.field(\"progress\", {\n      type: \"Progress\",\n      nullable: false,\n      args: {\n        course_id: schema.idArg({ required: true }),\n      },\n      resolve: async (parent, args, ctx) => {\n        const course = await ctx.db.course.findOne({\n          where: { id: args.course_id },\n        })\n        return {\n          course,\n          user: parent,\n        }\n      },\n    })\n\n    t.field(\"progresses\", {\n      type: \"Progress\",\n      list: true,\n      nullable: false,\n      resolve: async (parent, _, ctx) => {\n        const user_course_progressess = await ctx.db.userCourseProgress.findMany(\n          {\n            where: { user_id: parent.id },\n          },\n        )\n        const progresses = user_course_progressess.map(async (p) => {\n          const course = await ctx.db.userCourseProgress\n            .findOne({ where: { id: p.id } })\n            .course()\n          return {\n            course,\n            user: parent,\n          }\n        })\n        return progresses\n      },\n    })\n\n    // TODO/FIXME: is this used anywhere? if is, find better name\n    t.field(\"user_course_progressess\", {\n      type: \"UserCourseProgress\",\n      nullable: true,\n      args: {\n        course_id: schema.idArg(),\n      },\n      resolve: async (parent, args, ctx) => {\n        const { course_id } = args\n\n        const progresses = await ctx.db.userCourseProgress.findMany({\n          where: {\n            user_id: parent.id,\n            course_id,\n          },\n        })\n\n        if (progresses.length > 0) {\n          return progresses[0]\n        } else {\n          return null\n        }\n      },\n    })\n\n    t.field(\"exercise_completions\", {\n      type: \"ExerciseCompletion\",\n      list: true,\n      resolve: async (parent, _, ctx) => {\n        return ctx.db.exerciseCompletion.findMany({\n          where: {\n            user_id: parent.id,\n          },\n        })\n      },\n    })\n  },\n})\n"]}