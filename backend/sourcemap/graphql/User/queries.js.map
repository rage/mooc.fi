{"version":3,"file":"queries.js","sourceRoot":"","sources":["../../../graphql/User/queries.ts"],"names":[],"mappings":"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","sourcesContent":["import { UserInputError, ForbiddenError } from \"apollo-server-core\"\nimport { buildSearch, convertPagination } from \"../../util/db-functions\"\nimport { schema } from \"nexus\"\nimport { isAdmin } from \"../../accessControl\"\n\nschema.extendType({\n  type: \"Query\",\n  definition(t) {\n    t.crud.users({\n      filtering: false,\n      authorize: isAdmin,\n    })\n    /*t.list.field(\"users\", {\n      type: \"user\",\n      resolve: (_, __, ctx) => {\n        checkAccess(ctx)\n        return ctx.db.user.findMany()\n      },\n    })*/\n\n    t.field(\"user\", {\n      type: \"User\",\n      args: {\n        id: schema.idArg(),\n        search: schema.stringArg(),\n        upstream_id: schema.intArg(),\n      },\n      authorize: isAdmin,\n      resolve: async (_, args, ctx) => {\n        const { id, search, upstream_id } = args\n\n        if (!id && !search && !upstream_id) {\n          throw new UserInputError(\n            \"must provide id, search string or upstream_id\",\n          )\n        }\n\n        const users = await ctx.db.user.findMany({\n          where: {\n            OR: buildSearch(\n              [\"first_name\", \"last_name\", \"username\", \"email\"],\n              search ?? \"\",\n            ),\n            id: id ?? undefined,\n            upstream_id: upstream_id ?? undefined,\n          },\n        })\n        if (!users.length) throw new UserInputError(\"User not found\")\n        return users[0]\n      },\n    })\n\n    t.connection(\"userDetailsContains\", {\n      type: \"User\",\n      additionalArgs: {\n        search: schema.stringArg(),\n        skip: schema.intArg({ default: 0 }),\n      },\n      authorize: isAdmin,\n      cursorFromNode: (node, _args, _ctx, _info, _) => `cursor:${node?.id}`,\n      nodes: async (_, args, ctx) => {\n        const { search, first, last, before, after, skip } = args\n\n        if ((!first && !last) || (first ?? 0) > 50 || (last ?? 0) > 50) {\n          throw new ForbiddenError(\"Cannot query more than 50 objects\")\n        }\n\n        return ctx.db.user.findMany({\n          ...convertPagination({ first, last, before, after, skip }),\n          where: {\n            OR: buildSearch(\n              [\"first_name\", \"last_name\", \"username\", \"email\"],\n              search ?? \"\",\n            ),\n          },\n        })\n      },\n      extendConnection(t) {\n        t.int(\"count\", {\n          args: {\n            search: schema.stringArg(),\n          },\n          resolve: (_, { search }, ctx) => {\n            return ctx.db.user.count({\n              where: {\n                OR: buildSearch(\n                  [\"first_name\", \"last_name\", \"username\", \"email\"],\n                  search ?? \"\",\n                ),\n              },\n            })\n          },\n        })\n      },\n    })\n\n    t.field(\"currentUser\", {\n      type: \"User\",\n      nullable: true,\n      args: { search: schema.stringArg() }, // was: email\n      resolve: (_, __, ctx) => {\n        // FIXME: why don't we search anything? where's this come from?\n        // const { search } = args\n        return ctx.user ?? null\n      },\n    })\n  },\n})\n"]}