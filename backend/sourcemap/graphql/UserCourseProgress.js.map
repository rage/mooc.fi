{"version":3,"file":"UserCourseProgress.js","sourceRoot":"","sources":["../../graphql/UserCourseProgress.ts"],"names":[],"mappings":"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","sourcesContent":["import { schema } from \"nexus\"\nimport { UserInputError } from \"apollo-server-core\"\n\nimport { isAdmin } from \"../accessControl\"\n\nschema.objectType({\n  name: \"UserCourseProgress\",\n  definition(t) {\n    t.model.id()\n    t.model.course_id()\n    t.model.course()\n    t.model.created_at()\n    t.model.max_points()\n    t.model.n_points()\n    // TODO/FIXME: this was borked on some previous version because of JSON, might work now\n    // t.model.progress()\n    t.model.updated_at()\n    t.model.user_id()\n    t.model.user()\n    t.model.user_course_service_progresses()\n\n    t.list.field(\"progress\", {\n      type: \"Json\",\n      resolve: async (parent, _args, ctx) => {\n        const res = await ctx.db.userCourseProgress.findOne({\n          where: { id: parent.id },\n          select: { progress: true },\n        })\n\n        return (res?.progress as any) ?? [] // type error without any\n      },\n    })\n\n    // t.prismaFields([\"*\"])\n\n    t.field(\"user_course_settings\", {\n      type: \"UserCourseSetting\",\n      nullable: true,\n      resolve: async (parent, _, ctx) => {\n        const { course_id, user_id } =\n          (await ctx.db.userCourseProgress.findOne({\n            where: { id: parent.id },\n            select: {\n              course_id: true,\n              user_id: true,\n            },\n          })) || {}\n        /*const course= await ctx.db\n          .user_course_progress.findOne({ where: { id: parent.id } })\n          .course_courseTouser_course_progress()\n        const user: User = await ctx.db\n          .user_course_progress.findOne({ where: { id: parent.id } })\n          .user_course_service_progress()*/\n\n        if (!course_id || !user_id) {\n          throw new Error(\"course or user not found\")\n        }\n\n        const userCourseSettings = await ctx.db.userCourseSetting.findMany({\n          where: {\n            course_id,\n            user_id,\n          },\n        })\n        // FIXME: what if there's not any?\n        return userCourseSettings?.[0] ?? null\n      },\n    })\n\n    t.field(\"exercise_progress\", {\n      type: \"ExerciseProgress\",\n      resolve: async (parent, _, ctx) => {\n        const { course_id, user_id } =\n          (await ctx.db.userCourseProgress.findOne({\n            where: { id: parent.id },\n            select: {\n              course_id: true,\n              user_id: true,\n            },\n          })) || {}\n        /*const course: Course = await ctx.db\n          .user_course_progress.findOne({ where: { id: parent.id } })\n          .course_courseTouser_course_progress()\n        const user: User = await ctx.db\n          .user_course_progress.findOne({ where: { id: parent.id } })\n          .user_course_service_progress()*/\n\n        if (!course_id || !user_id) {\n          throw new Error(\"no course or user found\")\n        }\n        const courseProgresses = await ctx.db.userCourseProgress.findMany({\n          where: { course_id, user_id },\n        })\n        // TODO/FIXME: proper typing\n        const courseProgress: any = courseProgresses?.[0].progress ?? []\n        const exercises = await ctx.db.course\n          .findOne({ where: { id: course_id } })\n          .exercises()\n        const completedExercises = await ctx.db.exerciseCompletion.findMany({\n          where: {\n            exercise: { course_id },\n            user_id,\n          },\n        })\n\n        const totalProgress =\n          (courseProgress?.reduce(\n            (acc: number, curr: any) => acc + curr.progress,\n            0,\n          ) ?? 0) / (courseProgress.length || 1)\n        const exerciseProgress =\n          completedExercises.length / (exercises.length || 1)\n\n        return {\n          total: totalProgress,\n          exercises: exerciseProgress,\n        }\n      },\n    })\n  },\n})\n\nschema.extendType({\n  type: \"Query\",\n  definition(t) {\n    t.field(\"userCourseProgress\", {\n      type: \"UserCourseProgress\",\n      args: {\n        user_id: schema.idArg({ required: true }),\n        course_id: schema.idArg({ required: true }),\n      },\n      authorize: isAdmin,\n      resolve: async (_, args, ctx) => {\n        const { user_id, course_id } = args\n        const result = await ctx.db.userCourseProgress.findMany({\n          where: {\n            user_id,\n            course_id,\n          },\n        })\n\n        if (!result.length) throw new UserInputError(\"Not found\")\n\n        return result[0]\n      },\n    })\n\n    // FIXME: (?) broken until the nexus json thing is fixed or smth\n\n    /*t.crud.userCourseProgresses({\n      filtering: {\n        user: true,\n        course_courseTouser_course_progress: true,\n      },\n      pagination: true,\n    })*/\n\n    t.list.field(\"userCourseProgresses\", {\n      type: \"UserCourseProgress\",\n      args: {\n        user_id: schema.idArg(),\n        course_slug: schema.stringArg(),\n        course_id: schema.idArg(),\n        skip: schema.intArg(),\n        take: schema.intArg(),\n        cursor: schema.arg({ type: \"UserCourseProgressWhereUniqueInput\" }),\n      },\n      authorize: isAdmin,\n      resolve: (_, args, ctx) => {\n        const { skip, take, cursor, user_id, course_id, course_slug } = args\n\n        return ctx.db.userCourseProgress.findMany({\n          skip: skip ?? undefined,\n          take: take ?? undefined,\n          cursor: cursor ? { id: cursor.id ?? undefined } : undefined,\n          /*first: first ?? undefined,\n          last: last ?? undefined,\n          before: before ? { id: before } : undefined,\n          after: after ? { id: after } : undefined,*/\n          where: {\n            user_id,\n            course: {\n              OR: [\n                {\n                  id: course_id ?? undefined,\n                },\n                {\n                  slug: course_slug ?? undefined,\n                },\n              ],\n            },\n          },\n        })\n      },\n    })\n  },\n})\n\nschema.extendType({\n  type: \"Mutation\",\n  definition(t) {\n    t.field(\"addUserCourseProgress\", {\n      type: \"UserCourseProgress\",\n      args: {\n        user_id: schema.idArg({ required: true }),\n        course_id: schema.idArg({ required: true }),\n        progress: schema.arg({\n          type: \"PointsByGroup\",\n          list: true,\n          required: true,\n        }),\n        max_points: schema.floatArg(),\n        n_points: schema.floatArg(),\n      },\n      authorize: isAdmin,\n      resolve: (_, args, ctx) => {\n        const { user_id, course_id, progress, max_points, n_points } = args\n\n        return ctx.db.userCourseProgress.create({\n          data: {\n            user: { connect: { id: user_id } },\n            course: { connect: { id: course_id } },\n            progress,\n            max_points,\n            n_points,\n          },\n        })\n      },\n    })\n  },\n})\n"]}