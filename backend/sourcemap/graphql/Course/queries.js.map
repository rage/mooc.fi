{"version":3,"file":"queries.js","sourceRoot":"","sources":["../../../graphql/Course/queries.ts"],"names":[],"mappings":"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","sourcesContent":["import { schema } from \"nexus\"\nimport { UserInputError } from \"apollo-server-core\"\nimport { isAdmin, isUser, or, Role } from \"../../accessControl\"\nimport { filterNull } from \"../../util/db-functions\"\nimport { Course } from \"nexus-plugin-prisma/client\"\n\nschema.extendType({\n  type: \"Query\",\n  definition(t) {\n    t.field(\"course\", {\n      type: \"Course\",\n      args: {\n        slug: schema.stringArg(),\n        id: schema.idArg(),\n        language: schema.stringArg(),\n      },\n      authorize: or(isAdmin, isUser),\n      nullable: true,\n      resolve: async (_, args, ctx) => {\n        const { slug, id, language } = args\n\n        if (!slug && !id) {\n          throw new UserInputError(\"must provide id or slug\")\n        }\n\n        const course = await ctx.db.course.findOne({\n          where: {\n            slug: slug ?? undefined,\n            id: id ?? undefined,\n          },\n          ...(ctx.role !== Role.ADMIN\n            ? {\n                select: {\n                  id: true,\n                  slug: true,\n                  name: true,\n                },\n              }\n            : {}),\n        })\n\n        if (!course) {\n          throw new Error(\"course not found\")\n        }\n\n        if (language) {\n          const course_translations = await ctx.db.courseTranslation.findMany({\n            where: {\n              course_id: course.id,\n              language,\n            },\n          })\n\n          if (!course_translations.length) {\n            return Promise.resolve(null)\n          }\n\n          // TODO/FIXME: provide language instead of getting the first one\n          const { name, description, link = \"\" } = course_translations[0]\n          return {\n            ...course,\n            name,\n            description,\n            link,\n          }\n        }\n\n        return {\n          ...course,\n          description: \"\",\n          link: \"\",\n        }\n      },\n    })\n\n    t.crud.courses({\n      ordering: true,\n    })\n\n    t.list.field(\"courses\", {\n      type: \"Course\",\n      args: {\n        orderBy: schema.arg({ type: \"CourseOrderByInput\" }),\n        language: schema.stringArg(),\n      },\n      resolve: async (_, args, ctx) => {\n        const { orderBy, language } = args\n\n        const courses = await ctx.db.course.findMany({\n          orderBy: filterNull(orderBy) ?? undefined,\n        })\n\n        const filtered = language\n          ? (\n              await Promise.all(\n                courses.map(async (course: Course) => {\n                  const course_translations = await ctx.db.courseTranslation.findMany(\n                    {\n                      where: {\n                        course_id: course.id,\n                        language,\n                      },\n                    },\n                  )\n\n                  if (!course_translations.length) {\n                    return Promise.resolve(null)\n                  }\n\n                  const {\n                    name,\n                    description,\n                    link = \"\",\n                  } = course_translations[0]\n\n                  return { ...course, name, description, link }\n                }),\n              )\n            ).filter((v) => !!v)\n          : await Promise.all(\n              courses.map((course: Course) => ({\n                ...course,\n                description: \"\",\n                link: \"\",\n              })),\n            )\n\n        // TODO: (?) provide proper typing\n        return filtered as (Course & { description: string; link: string })[]\n      },\n    })\n\n    t.field(\"course_exists\", {\n      type: \"Boolean\",\n      args: {\n        slug: schema.stringArg({ required: true }),\n      },\n      authorize: or(isAdmin, isUser),\n      resolve: async (_, args, ctx) => {\n        const { slug } = args\n\n        return (\n          (\n            await ctx.db.course.findMany({\n              where: { slug },\n              select: { id: true },\n            })\n          ).length > 0\n        )\n      },\n    })\n  },\n})\n"]}