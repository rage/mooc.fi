{"version":3,"file":"CourseOrganization.js","sourceRoot":"","sources":["../../graphql/CourseOrganization.ts"],"names":[],"mappings":"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","sourcesContent":["import { schema } from \"nexus\"\n\nimport { or, isVisitor, isAdmin } from \"../accessControl\"\n\nschema.objectType({\n  name: \"CourseOrganization\",\n  definition(t) {\n    t.model.id()\n    t.model.created_at()\n    t.model.updated_at()\n    t.model.course_id()\n    t.model.course()\n    t.model.creator()\n    t.model.organization_id()\n    t.model.organization()\n  },\n})\n\nschema.extendType({\n  type: \"Query\",\n  definition(t) {\n    t.list.field(\"courseOrganizations\", {\n      type: \"CourseOrganization\",\n      args: {\n        course_id: schema.idArg(),\n        organization_id: schema.idArg(),\n      },\n      resolve: async (_, args, ctx) => {\n        const { course_id, organization_id } = args\n\n        return ctx.db.courseOrganization.findMany({\n          where: {\n            course_id: course_id ?? undefined,\n            organization_id: organization_id ?? undefined,\n          },\n        })\n      },\n    })\n  },\n})\n\nschema.extendType({\n  type: \"Mutation\",\n  definition(t) {\n    t.field(\"addCourseOrganization\", {\n      type: \"CourseOrganization\",\n      args: {\n        course_id: schema.idArg({ required: true }),\n        organization_id: schema.idArg({ required: true }),\n        creator: schema.booleanArg(),\n      },\n      authorize: or(isVisitor, isAdmin),\n      resolve: async (_, args, ctx) => {\n        const { course_id, organization_id, creator } = args\n\n        const exists = await ctx.db.courseOrganization.findMany({\n          where: {\n            course_id: course_id,\n            organization_id: organization_id,\n          },\n        })\n\n        if (exists.length > 0) {\n          throw new Error(\"this course/organization relation already exists\")\n        }\n\n        return ctx.db.courseOrganization.create({\n          data: {\n            course: { connect: { id: course_id } },\n            organization: {\n              connect: { id: organization_id },\n            },\n            creator: creator ? creator : false,\n          },\n        })\n      },\n    })\n\n    t.field(\"deleteCourseOrganization\", {\n      type: \"CourseOrganization\",\n      args: {\n        id: schema.idArg({ required: true }),\n      },\n      authorize: isAdmin,\n      resolve: async (_, { id }, ctx) => {\n        return ctx.db.courseOrganization.delete({ where: { id } })\n      },\n    })\n  },\n})\n"]}