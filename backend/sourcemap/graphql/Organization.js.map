{"version":3,"file":"Organization.js","sourceRoot":"","sources":["../../graphql/Organization.ts"],"names":[],"mappings":"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","sourcesContent":["import { schema } from \"nexus\"\n\nimport { UserInputError } from \"apollo-server-core\"\nimport { Role, isAdmin } from \"../accessControl\"\nimport { NexusContext } from \"../context\"\nimport { randomBytes } from \"crypto\"\nimport { promisify } from \"util\"\nimport { filterNull } from \"../util/db-functions\"\n\nschema.objectType({\n  name: \"Organization\",\n  definition(t) {\n    t.model.id()\n    t.model.contact_information()\n    t.model.created_at()\n    t.model.disabled()\n    t.model.email()\n    t.model.hidden()\n    t.model.logo_content_type()\n    t.model.logo_file_name()\n    t.model.logo_file_size()\n    t.model.logo_updated_at()\n    t.model.phone()\n    t.model.pinned()\n    t.model.slug()\n    t.model.tmc_created_at()\n    t.model.tmc_updated_at()\n    t.model.updated_at()\n    t.model.verified()\n    t.model.verified_at()\n    t.model.website()\n    t.model.creator_id()\n    t.model.creator()\n    t.model.completions_registered()\n    t.model.courses()\n    t.model.course_organizations()\n    t.model.organization_translations()\n    t.model.user_organizations()\n    t.model.verified_users()\n  },\n})\n\nconst organizationPermission = (\n  _: any,\n  args: any,\n  ctx: NexusContext,\n  _info: any,\n) => {\n  if (args.hidden) return ctx.role === Role.ADMIN\n\n  return true\n}\n\nschema.extendType({\n  type: \"Query\",\n  definition(t) {\n    t.field(\"organization\", {\n      type: \"Organization\",\n      args: {\n        id: schema.idArg(),\n        hidden: schema.booleanArg(),\n      },\n      authorize: organizationPermission,\n      nullable: true,\n      resolve: async (_, args, ctx) => {\n        const { id, hidden } = args\n\n        if (!id) {\n          throw new UserInputError(\"must provide id\")\n        }\n\n        /*if (!hidden) {\n          return ctx.db.organization.findOne({ where: { id } })\n        }*/\n\n        const res = await ctx.db.organization.findMany({\n          where: { id, hidden },\n        })\n        return res.length ? res[0] : null\n      },\n    })\n\n    t.crud.organizations({\n      ordering: true,\n      pagination: true,\n      authorize: organizationPermission,\n    })\n\n    t.list.field(\"organizations\", {\n      type: \"Organization\",\n      args: {\n        take: schema.intArg(),\n        skip: schema.intArg(),\n        cursor: schema.arg({ type: \"OrganizationWhereUniqueInput\" }),\n        /*first: schema.intArg(),\n        after: schema.idArg(),\n        last: schema.intArg(),\n        before: schema.idArg(),*/\n        orderBy: schema.arg({ type: \"OrganizationOrderByInput\" }),\n        hidden: schema.booleanArg(),\n      },\n      authorize: organizationPermission,\n      resolve: async (_, args, ctx) => {\n        const {\n          /*first, last, after, before, */ take,\n          skip,\n          cursor,\n          orderBy,\n          hidden,\n        } = args\n\n        const orgs = await ctx.db.organization.findMany({\n          take: take ?? undefined,\n          skip: skip ?? undefined,\n          cursor: cursor\n            ? {\n                id: cursor.id ?? undefined,\n              }\n            : undefined,\n          /*first: first ?? undefined,\n          last: last ?? undefined,\n          after: after ? { id: after } : undefined,\n          before: before ? { id: before } : undefined,*/\n          orderBy: filterNull(orderBy) ?? undefined,\n          where: {\n            hidden,\n          },\n        })\n\n        return orgs\n      },\n    })\n  },\n})\n\nschema.extendType({\n  type: \"Mutation\",\n  definition(t) {\n    t.field(\"addOrganization\", {\n      type: \"Organization\",\n      args: {\n        name: schema.stringArg(),\n        slug: schema.stringArg({ required: true }),\n      },\n      authorize: isAdmin,\n      resolve: async (_, args, ctx) => {\n        const { name, slug } = args\n\n        let secret: string\n        let result\n\n        do {\n          secret = await generateSecret()\n          result = await ctx.db.organization.findMany({\n            where: { secret_key: secret },\n          })\n        } while (result.length)\n\n        // FIXME: empty name?\n\n        const org = await ctx.db.organization.create({\n          data: {\n            slug,\n            secret_key: secret,\n            organization_translations: {\n              create: {\n                name: name ?? \"\",\n                language: \"fi_FI\",\n              },\n            },\n          },\n        })\n        // FIXME: return value not used\n        /*await ctx.db.organization_translation.create({\n          data: {\n            name: name ?? \"\",\n            language: \"fi_FI\", //placeholder\n            organization_organizationToorganization_translation: {\n              connect: { id: org.id },\n            },\n          },\n        })\n\n        const newOrg = await ctx.db.organization.findOne({\n          where: { id: org.id },\n        })*/\n\n        return org\n      },\n    })\n  },\n})\n\nexport const generateSecret = async () => {\n  const randomBytesPromise = promisify(randomBytes)\n  return (await randomBytesPromise(128)).toString(\"hex\")\n}\n"]}