{"version":3,"file":"Image.js","sourceRoot":"","sources":["../../graphql/Image.ts"],"names":[],"mappings":"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","sourcesContent":["import { schema } from \"nexus\"\n\nimport {\n  uploadImage as uploadStorageImage,\n  deleteImage as deleteStorageImage,\n} from \"../services/google-cloud\"\nimport { NexusContext } from \"../context\"\nimport { isAdmin } from \"../accessControl\"\n\nconst sharp = require(\"sharp\")\n\nschema.objectType({\n  name: \"Image\",\n  definition(t) {\n    t.model.id()\n    t.model.created_at()\n    t.model.updated_at()\n    t.model.compressed()\n    t.model.compressed_mimetype()\n    t.model.default()\n    t.model.encoding()\n    t.model.name()\n    t.model.original()\n    t.model.original_mimetype()\n    t.model.uncompressed()\n    t.model.uncompressed_mimetype()\n    t.model.courses()\n  },\n})\n\nschema.extendType({\n  type: \"Mutation\",\n  definition(t) {\n    t.field(\"addImage\", {\n      type: \"Image\",\n      args: {\n        file: schema.arg({ type: \"Upload\", required: true }),\n        base64: schema.booleanArg(),\n      },\n      authorize: isAdmin,\n      resolve: async (_, args, ctx: NexusContext) => {\n        const { file, base64 } = args\n\n        return uploadImage({ ctx, file, base64: base64 ?? false })\n      },\n    })\n\n    t.field(\"deleteImage\", {\n      type: \"Boolean\",\n      args: {\n        id: schema.idArg({ required: true }),\n      },\n      authorize: isAdmin,\n      resolve: async (_, { id }, ctx: NexusContext) => {\n        return deleteImage({ ctx, id })\n      },\n    })\n  },\n})\n\n// FIXME: not used anywhere\n/* const getImageBuffer = (image: string) => {\n  const base64EncodedImageString = image.replace(/^data:image\\/\\w+;base64,/, \"\")\n\n  return new Buffer(base64EncodedImageString, \"base64\")\n} */\n\nconst readFS = (stream: NodeJS.ReadStream): Promise<Buffer> => {\n  let chunkList: any[] | Uint8Array[] = []\n\n  return new Promise((resolve, reject) =>\n    stream\n      .on(\"data\", (data) => chunkList.push(data))\n      .on(\"error\", (err) => reject(err))\n      .on(\"end\", () => resolve(Buffer.concat(chunkList))),\n  )\n}\n\nexport const uploadImage = async ({\n  ctx,\n  file,\n  base64 = false,\n}: {\n  ctx: NexusContext\n  file: any\n  base64: boolean\n}) => {\n  const {\n    createReadStream,\n    mimetype,\n    filename,\n  }: {\n    createReadStream: Function\n    mimetype: string\n    filename: string\n  } = await file\n\n  const image: Buffer = await readFS(createReadStream())\n  const filenameWithoutExtension = /(.+?)(\\.[^.]*$|$)$/.exec(filename)?.[1]\n\n  const uncompressedImage: Buffer = await sharp(image).jpeg().toBuffer()\n\n  const compressedImage: Buffer = await sharp(image)\n    .resize({ height: 250 })\n    .webp()\n    .toBuffer()\n\n  let original = await uploadStorageImage({\n    imageBuffer: image,\n    mimeType: mimetype,\n    name: filenameWithoutExtension,\n    directory: `original`,\n    base64,\n  })\n  let originalMimetype = mimetype\n\n  const uncompressed = await uploadStorageImage({\n    imageBuffer: uncompressedImage,\n    mimeType: \"image/jpeg\",\n    name: filenameWithoutExtension,\n    directory: `jpeg`,\n    base64,\n  })\n\n  const compressed = await uploadStorageImage({\n    imageBuffer: compressedImage,\n    mimeType: \"image/webp\",\n    name: filenameWithoutExtension,\n    directory: `webp`,\n    base64,\n  })\n\n  if (base64 && original.length > 262144) {\n    // Image upload fails if the original pic is too big converted to base64.\n    // Since we're only base64'ing in dev, this is not a production problem\n    original = uncompressed\n    originalMimetype = \"image/jpeg\"\n  }\n\n  const newImage = await ctx.db.image.create({\n    data: {\n      name: filename,\n      original,\n      original_mimetype: originalMimetype,\n      uncompressed,\n      uncompressed_mimetype: \"image/jpeg\",\n      compressed,\n      compressed_mimetype: \"image/webp\",\n    },\n  })\n\n  return newImage\n}\n\nexport const deleteImage = async ({\n  ctx,\n  id,\n}: {\n  ctx: NexusContext\n  id: string\n}): Promise<boolean> => {\n  const image = await ctx.db.image.findOne({ where: { id } })\n\n  if (!image) {\n    return false\n  }\n\n  // TODO: (?) do something with return statuses\n  const compressed = image.compressed\n    ? await deleteStorageImage(image.compressed)\n    : false\n  const uncompressed = await deleteStorageImage(image.uncompressed)\n  const original = await deleteStorageImage(image.original)\n\n  if (!compressed || !uncompressed || !original) {\n    console.warn(\n      `There was some problem with image deletion. Statuses: compressed ${compressed} uncompressed ${uncompressed} original ${original}`,\n    )\n  }\n  await ctx.db.image.delete({ where: { id } })\n\n  return true\n}\n"]}