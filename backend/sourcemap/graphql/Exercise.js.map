{"version":3,"file":"Exercise.js","sourceRoot":"","sources":["../../graphql/Exercise.ts"],"names":[],"mappings":"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","sourcesContent":["import { schema } from \"nexus\"\nimport { isAdmin } from \"../accessControl\"\nimport { filterNull } from \"../util/db-functions\"\n\nschema.objectType({\n  name: \"Exercise\",\n  definition(t) {\n    t.model.id()\n    t.model.course_id()\n    t.model.course()\n    t.model.created_at()\n    t.model.custom_id()\n    t.model.deleted()\n    t.model.max_points()\n    t.model.name()\n    t.model.part()\n    t.model.section()\n    t.model.service_id()\n    t.model.service()\n    t.model.timestamp()\n    t.model.updated_at()\n\n    // t.prismaFields({ filter: [\"exercise_completions\"] })\n\n    t.field(\"exercise_completions\", {\n      type: \"ExerciseCompletion\",\n      list: true,\n      args: {\n        orderBy: schema.arg({\n          // FIXME?\n          type: \"ExerciseCompletionOrderByInput\",\n          required: false,\n        }),\n      },\n      resolve: async (parent, args, ctx: NexusContext) => {\n        const { orderBy } = args\n\n        return ctx.db.exercise\n          .findOne({ where: { id: parent.id } })\n          .exercise_completions({\n            where: {\n              // @ts-ignore: context typing problem, FIXME\n              user_id: ctx?.user?.id, // { id: ctx?.user?.id },\n            },\n            orderBy: filterNull(orderBy) ?? undefined,\n          })\n      },\n    })\n  },\n})\n\nschema.extendType({\n  type: \"Query\",\n  definition(t) {\n    t.field(\"exercise\", {\n      type: \"Exercise\",\n      args: {\n        id: schema.idArg({ required: true }),\n      },\n      authorize: isAdmin,\n      resolve: async (_, { id }, ctx) =>\n        ctx.db.exercise.findOne({\n          where: { id },\n        }),\n    })\n\n    t.crud.exercises({\n      authorize: isAdmin,\n    })\n\n    /*t.list.field(\"exercises\", {\n      type: \"exercise\",\n      resolve: (_, __, ctx) => {\n        checkAccess(ctx)\n        return ctx.db.exercise.findMany()\n      },\n    })*/\n  },\n})\n\nschema.extendType({\n  type: \"Mutation\",\n  definition(t) {\n    t.field(\"addExercise\", {\n      type: \"Exercise\",\n      args: {\n        custom_id: schema.stringArg(),\n        name: schema.stringArg(),\n        part: schema.intArg(),\n        section: schema.intArg(),\n        max_points: schema.intArg(),\n        course: schema.idArg(),\n        service: schema.idArg(),\n      },\n      authorize: isAdmin,\n      resolve: (_, args, ctx) => {\n        const {\n          custom_id,\n          name,\n          part,\n          section,\n          max_points,\n          course,\n          service,\n        } = args\n\n        ctx.db\n        return ctx.db.exercise.create({\n          data: {\n            course: course ? { connect: { id: course } } : undefined,\n            service: service ? { connect: { id: service } } : undefined,\n            custom_id: custom_id ?? \"\",\n            name,\n            max_points,\n            part,\n            section,\n          },\n        })\n      },\n    })\n  },\n})\n"]}