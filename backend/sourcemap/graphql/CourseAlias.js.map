{"version":3,"file":"CourseAlias.js","sourceRoot":"","sources":["../../graphql/CourseAlias.ts"],"names":[],"mappings":";;;AAAA,+BAA8B;AAC9B,kDAA0C;AAE1C,cAAM,CAAC,UAAU,CAAC;IAChB,IAAI,EAAE,aAAa;IACnB,UAAU,YAAC,CAAC;QACV,CAAC,CAAC,KAAK,CAAC,EAAE,EAAE,CAAA;QACZ,CAAC,CAAC,KAAK,CAAC,UAAU,EAAE,CAAA;QACpB,CAAC,CAAC,KAAK,CAAC,UAAU,EAAE,CAAA;QACpB,CAAC,CAAC,KAAK,CAAC,SAAS,EAAE,CAAA;QACnB,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,CAAA;QAChB,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAA;IACvB,CAAC;CACF,CAAC,CAAA;AAEF,cAAM,CAAC,eAAe,CAAC;IACrB,IAAI,EAAE,wBAAwB;IAC9B,UAAU,YAAC,CAAC;QACV,CAAC,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAA;QACnC,CAAC,CAAC,MAAM,CAAC,aAAa,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAA;IAC7C,CAAC;CACF,CAAC,CAAA;AAEF,cAAM,CAAC,eAAe,CAAC;IACrB,IAAI,EAAE,wBAAwB;IAC9B,UAAU,YAAC,CAAC;QACV,CAAC,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAA;QAC/B,CAAC,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAA;QACnC,CAAC,CAAC,MAAM,CAAC,aAAa,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAA;IAC7C,CAAC;CACF,CAAC,CAAA;AAEF,cAAM,CAAC,UAAU,CAAC;IAChB,IAAI,EAAE,OAAO;IACb,UAAU,YAAC,CAAC;QACV,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;YACnB,SAAS,EAAE,uBAAO;SACnB,CAAC,CAAA;QACF;;;;;;YAMI;IACN,CAAC;CACF,CAAC,CAAA;AAEF,cAAM,CAAC,UAAU,CAAC;IAChB,IAAI,EAAE,UAAU;IAChB,UAAU,YAAC,CAAC;QAAZ,iBAsBC;QArBC,CAAC,CAAC,KAAK,CAAC,gBAAgB,EAAE;YACxB,IAAI,EAAE,aAAa;YACnB,IAAI,EAAE;gBACJ,WAAW,EAAE,cAAM,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;gBACjD,MAAM,EAAE,cAAM,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;aACzC;YACD,SAAS,EAAE,uBAAO;YAClB,OAAO,EAAE,UAAO,CAAC,EAAE,IAAI,EAAE,GAAG;;;;;4BAClB,WAAW,GAAa,IAAI,YAAjB,EAAE,MAAM,GAAK,IAAI,OAAT,CAAS;4BAIb,qBAAM,GAAG,CAAC,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC;oCACrD,IAAI,EAAE;wCACJ,WAAW,EAAE,WAAW,aAAX,WAAW,cAAX,WAAW,GAAI,EAAE;wCAC9B,MAAM,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE;qCACpC;iCACF,CAAC,EAAA;;4BALI,cAAc,GAAG,SAKrB;4BACF,sBAAO,cAAc,EAAA;;;iBACtB;SACF,CAAC,CAAA;IACJ,CAAC;CACF,CAAC,CAAA","sourcesContent":["import { schema } from \"nexus\"\nimport { isAdmin } from \"../accessControl\"\n\nschema.objectType({\n  name: \"CourseAlias\",\n  definition(t) {\n    t.model.id()\n    t.model.created_at()\n    t.model.updated_at()\n    t.model.course_id()\n    t.model.course()\n    t.model.course_code()\n  },\n})\n\nschema.inputObjectType({\n  name: \"CourseAliasCreateInput\",\n  definition(t) {\n    t.id(\"course\", { required: false })\n    t.string(\"course_code\", { required: true })\n  },\n})\n\nschema.inputObjectType({\n  name: \"CourseAliasUpsertInput\",\n  definition(t) {\n    t.id(\"id\", { required: false })\n    t.id(\"course\", { required: false })\n    t.string(\"course_code\", { required: true })\n  },\n})\n\nschema.extendType({\n  type: \"Query\",\n  definition(t) {\n    t.crud.courseAliases({\n      authorize: isAdmin,\n    })\n    /*t.list.field(\"CourseAliases\", {\n      type: \"course_alias\",\n      resolve: (_, __, ctx) => {\n        checkAccess(ctx)\n        return ctx.db.course_alias.findMany()\n      },\n    })*/\n  },\n})\n\nschema.extendType({\n  type: \"Mutation\",\n  definition(t) {\n    t.field(\"addCourseAlias\", {\n      type: \"CourseAlias\",\n      args: {\n        course_code: schema.stringArg({ required: true }),\n        course: schema.idArg({ required: true }),\n      },\n      authorize: isAdmin,\n      resolve: async (_, args, ctx) => {\n        const { course_code, course } = args\n\n        // FIXME: what to do on empty course_code?\n\n        const newCourseAlias = await ctx.db.courseAlias.create({\n          data: {\n            course_code: course_code ?? \"\",\n            course: { connect: { id: course } },\n          },\n        })\n        return newCourseAlias\n      },\n    })\n  },\n})\n"]}