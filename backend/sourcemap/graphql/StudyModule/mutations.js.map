{"version":3,"file":"mutations.js","sourceRoot":"","sources":["../../../graphql/StudyModule/mutations.ts"],"names":[],"mappings":"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","sourcesContent":["import { schema } from \"nexus\"\nimport { UserInputError } from \"apollo-server-core\"\nimport { omit } from \"lodash\"\nimport { isAdmin } from \"../../accessControl\"\n\nschema.extendType({\n  type: \"Mutation\",\n  definition(t) {\n    t.field(\"addStudyModule\", {\n      type: \"StudyModule\",\n      args: {\n        study_module: schema.arg({\n          type: \"StudyModuleCreateArg\",\n          required: true,\n        }),\n      },\n      authorize: isAdmin,\n      resolve: async (_, { study_module }, ctx) => {\n        const { study_module_translations } = study_module\n\n        return ctx.db.studyModule.create({\n          data: {\n            ...study_module,\n            name: study_module.name ?? \"\",\n            study_module_translations: !!study_module_translations\n              ? {\n                  create: study_module_translations.map((s) => ({\n                    ...s,\n                    name: s.name ?? \"\",\n                    id: s.id ?? undefined,\n                  })),\n                }\n              : undefined,\n          },\n        })\n      },\n    })\n\n    t.field(\"updateStudyModule\", {\n      type: \"StudyModule\",\n      args: {\n        study_module: schema.arg({\n          type: \"StudyModuleUpsertArg\",\n          required: true,\n        }),\n      },\n      authorize: isAdmin,\n      resolve: async (_, { study_module }, ctx) => {\n        const { id, slug, new_slug, study_module_translations } = study_module\n\n        if (!slug) {\n          throw new UserInputError(\"must provide slug\")\n        }\n\n        const existingTranslations = await ctx.db.studyModule\n          .findOne({ where: { slug } })\n          .study_module_translations()\n        const newTranslations = (study_module_translations || [])\n          .filter((t) => !t.id)\n          .map((t) => ({ ...t, id: undefined }))\n        const updatedTranslations = (study_module_translations || [])\n          .filter((t) => !!t.id)\n          .map((t) => ({ where: { id: t.id }, data: { ...t, id: undefined } }))\n        const existingTranslationIds = (existingTranslations || []).map(\n          (t) => t.id,\n        )\n        const moduleTranslationIds = (study_module_translations || []).map(\n          (t) => t.id,\n        )\n        const removedTranslationIds = existingTranslationIds\n          .filter((id) => !moduleTranslationIds.includes(id))\n          .map((id) => ({ id }))\n        /*       const removedTranslationIds: StudyModuleTranslationScalarWhereInput[] = pullAll(\n          (existingTranslations || []).map(t => t.id),\n          (study_module_translations || []).map(t => t.id).filter(v => !!v),\n        ).map(_id => ({ id: _id })) */\n\n        const translationMutation = {\n          create: newTranslations.length ? newTranslations : undefined,\n          updateMany: updatedTranslations.length\n            ? updatedTranslations\n            : undefined,\n          deleteMany: removedTranslationIds.length\n            ? removedTranslationIds\n            : undefined,\n        }\n\n        const updatedModule = await ctx.db.studyModule.update({\n          where: {\n            id: id ?? undefined,\n            slug,\n          },\n          data: {\n            ...omit(study_module, [\"new_slug\"]),\n            slug: new_slug ? new_slug : slug,\n            // FIXME/TODO: implement something like notEmpty for id field to fix typing\n            // @ts-ignore: TS doesn't get that in where: { id } the id has been already filtered\n            study_module_translations: Object.keys(translationMutation).length\n              ? translationMutation\n              : undefined,\n          },\n        })\n\n        return updatedModule\n      },\n    })\n\n    t.field(\"deleteStudyModule\", {\n      type: \"StudyModule\",\n      args: {\n        id: schema.idArg({ required: false }),\n        slug: schema.stringArg(),\n      },\n      authorize: isAdmin,\n      resolve: async (_, args, ctx) => {\n        const { id, slug } = args\n\n        if (!id && !slug) {\n          throw \"must have at least id or slug\"\n        }\n\n        const deletedModule = await ctx.db.studyModule.delete({\n          where: {\n            id: id ?? undefined,\n            slug: slug ?? undefined,\n          },\n        })\n\n        return deletedModule\n      },\n    })\n  },\n})\n"]}