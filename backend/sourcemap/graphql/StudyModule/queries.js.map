{"version":3,"file":"queries.js","sourceRoot":"","sources":["../../../graphql/StudyModule/queries.ts"],"names":[],"mappings":"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","sourcesContent":["import { schema } from \"nexus\"\nimport { UserInputError } from \"apollo-server-core\"\nimport { isAdmin, or, isUser, Role } from \"../../accessControl\"\nimport { filterNull } from \"../../util/db-functions\"\n\nschema.extendType({\n  type: \"Query\",\n  definition(t) {\n    t.field(\"study_module\", {\n      type: \"StudyModule\",\n      args: {\n        id: schema.idArg(),\n        slug: schema.stringArg(),\n        language: schema.stringArg(),\n      },\n      authorize: or(isAdmin, isUser),\n      nullable: true,\n      resolve: async (_, args, ctx) => {\n        const { id, slug, language } = args\n\n        if (!id && !slug) {\n          throw new UserInputError(\"must provide id or slug\")\n        }\n\n        const study_module = await ctx.db.studyModule.findOne({\n          where: {\n            id: id ?? undefined,\n            slug: slug ?? undefined,\n          },\n          ...(ctx.role !== Role.ADMIN\n            ? {\n                select: {\n                  id: true,\n                  slug: true,\n                  name: true,\n                },\n              }\n            : {}),\n        })\n\n        if (!study_module) {\n          throw new Error(\"study module not found\")\n        }\n\n        if (language) {\n          const module_translations = await ctx.db.studyModuleTranslation.findMany(\n            {\n              where: {\n                study_module_id: study_module.id,\n                language,\n              },\n            },\n          )\n\n          if (!module_translations.length) {\n            return Promise.resolve(null)\n          }\n\n          const { name, description = \"\" } = module_translations[0]\n          return {\n            ...study_module,\n            name,\n            description,\n          }\n        }\n\n        return {\n          ...study_module,\n          description: \"\",\n        }\n      },\n    })\n\n    t.crud.studyModules({\n      alias: \"study_modules\",\n      ordering: true,\n    })\n\n    t.list.field(\"study_modules\", {\n      type: \"StudyModule\",\n      args: {\n        orderBy: schema.arg({ type: \"StudyModuleOrderByInput\" }),\n        language: schema.stringArg(),\n      },\n      resolve: async (_, args, ctx) => {\n        const { orderBy, language } = args\n\n        const modules = await ctx.db.studyModule.findMany({\n          orderBy: filterNull(orderBy) ?? undefined,\n        })\n\n        const filtered = language\n          ? (\n              await Promise.all(\n                modules.map(async (module: any) => {\n                  const module_translations = await ctx.db.studyModuleTranslation.findMany(\n                    {\n                      where: { study_module_id: module.id, language },\n                    },\n                  )\n\n                  if (!module_translations.length) {\n                    return Promise.resolve(null)\n                  }\n\n                  const { name, description = \"\" } = module_translations[0]\n\n                  return { ...module, name, description }\n                }),\n              )\n            ).filter((v) => !!v)\n          : modules.map((module: any) => ({\n              ...module,\n              description: \"\",\n            }))\n\n        return filtered\n      },\n    })\n\n    t.field(\"study_module_exists\", {\n      type: \"Boolean\",\n      args: {\n        slug: schema.stringArg({ required: true }),\n      },\n      authorize: isAdmin,\n      resolve: async (_, { slug }, ctx) => {\n        return (\n          (await ctx.db.studyModule.findMany({ where: { slug } })).length > 0\n        )\n      },\n    })\n  },\n})\n"]}