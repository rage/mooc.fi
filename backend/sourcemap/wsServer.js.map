{"version":3,"file":"wsServer.js","sourceRoot":"","sources":["../wsServer.ts"],"names":[],"mappings":"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","sourcesContent":["import { createServer } from \"http\"\nimport * as WebSocketServer from \"websocket\"\nimport redisClient, * as redis from \"./services/redis\"\nimport { getCurrentUserDetails } from \"./services/tmc\"\nimport { UserInfo } from \"./domain/UserInfo\"\n\nconst webSocketsServerPort = 9000\n\nconst server = createServer()\n\nexport const wsListen = () => server.listen(webSocketsServerPort)\n\nconst wsServer = new WebSocketServer.server({\n  httpServer: server,\n})\n\nconst connectionByUserCourse = new Map()\nconst userCourseByConnection = new Map()\n\nexport enum MessageType {\n  PROGRESS_UPDATED = \"PROGRESS_UPDATED\",\n  PEER_REVIEW_RECEIVED = \"PEER_REVIEW_RECEIVED\",\n  QUIZ_CONFIRMED = \"QUIZ_CONFIRMED\",\n  QUIZ_REJECTED = \"QUIZ_REJECTED\",\n  COURSE_CONFIRMED = \"COURSE_CONFIRMED\",\n}\n\nexport const pushMessageToClient = (\n  userId: number,\n  courseId: string,\n  type: MessageType,\n  payload?: string,\n) => {\n  const userCourseObjectString = JSON.stringify({ userId, courseId })\n  const connection = connectionByUserCourse.get(userCourseObjectString)\n  if (connection) {\n    if (connection.connected) {\n      connection.sendUTF(\n        JSON.stringify({\n          type,\n          message: payload,\n        }),\n      )\n    } else {\n      connectionByUserCourse.delete(userCourseObjectString)\n      redis.publisher?.publish(\n        \"websocket\",\n        JSON.stringify({ userId, courseId, type, message: payload }),\n      )\n    }\n  } else {\n    redis.publisher?.publish(\n      \"websocket\",\n      JSON.stringify({ userId, courseId, type, message: payload }),\n    )\n  }\n}\n\nwsServer.on(\"request\", (request: any) => {\n  console.log(\"request \", request.origin)\n  const connection = request.accept(\"echo-protocol\", request.origin)\n\n  connection.on(\"message\", async (message: any) => {\n    const data = JSON.parse(message.utf8Data)\n    if (data instanceof Object && data.accessToken && data.courseId) {\n      const accessToken = data.accessToken\n      const courseId = data.courseId\n      try {\n        let user: UserInfo = JSON.parse(\n          (await redis.getAsync(accessToken)) ?? \"\",\n        )\n        if (!user) {\n          user = await getCurrentUserDetails(accessToken)\n          redisClient?.set(accessToken, JSON.stringify(user), \"EX\", 3600)\n        }\n        const userCourseObject = {\n          userId: user.id,\n          courseId,\n        }\n        connectionByUserCourse.set(JSON.stringify(userCourseObject), connection)\n        userCourseByConnection.set(connection, userCourseObject)\n        console.log(\"connection verified\")\n      } catch (error) {\n        connection.drop()\n        console.log(\"connection rejected\")\n      }\n    } else {\n      connection.drop()\n    }\n  })\n\n  connection.on(\"close\", () => {\n    const userCourseObjectString = JSON.stringify(\n      userCourseByConnection.get(connection),\n    )\n    userCourseByConnection.delete(connection)\n    connectionByUserCourse.delete(userCourseObjectString)\n  })\n})\n\nredis.subscriber?.on(\"message\", (_channel: any, message: any) => {\n  const data = JSON.parse(message)\n  if (data instanceof Object && data.userId && data.courseId && data.type) {\n    const userId = data.userId\n    const courseId = data.courseId\n    const userCourseObjectString = JSON.stringify({ userId, courseId })\n    const connection = connectionByUserCourse.get(userCourseObjectString)\n    if (connection) {\n      if (connection.connected) {\n        connection.sendUTF(\n          JSON.stringify({\n            type: data.type,\n            message: data.message,\n          }),\n        )\n      } else {\n        connectionByUserCourse.delete(userCourseObjectString)\n      }\n    }\n  }\n})\n\nredis.subscriber?.subscribe(\"websocket\")\n"]}