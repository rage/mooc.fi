{"version":3,"file":"19000101114728_create-table-schema.js","sourceRoot":"","sources":["../../migrations/19000101114728_create-table-schema.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Knex from \"knex\"\n\nexport async function up(knex: Knex): Promise<any> {\n  await knex.raw(`CREATE TYPE course_status AS ENUM (\n    'Active',\n    'Ended',\n    'Upcoming'\n  );`)\n  await knex.raw(`CREATE TYPE organization_role AS ENUM (\n    'Teacher',\n    'Student',\n    'OrganizationAdmin'\n  );`)\n\n  await knex.raw(`CREATE TABLE IF NOT EXISTS \"UserAppDatumConfig\" (\n    id uuid NOT NULL,\n    created_at timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp(3) without time zone,\n    name text,\n    \"timestamp\" timestamp(3) without time zone\n  );`)\n\n  await knex.raw(`CREATE TABLE IF NOT EXISTS \"UserCourseSettings\" (\n    id uuid NOT NULL,\n    created_at timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp(3) without time zone,\n    language text,\n    country text,\n    research boolean,\n    marketing boolean,\n    course_variant text,\n    other text,\n    \"user\" uuid,\n    course uuid\n  );`)\n\n  await knex.raw(`CREATE TABLE IF NOT EXISTS \"_CourseToService\" (\n    \"A\" uuid NOT NULL,\n    \"B\" uuid NOT NULL\n  );`)\n\n  await knex.raw(`CREATE TABLE IF NOT EXISTS \"_StudyModuleToCourse\" (\n    \"A\" uuid NOT NULL,\n    \"B\" uuid NOT NULL\n  );`)\n\n  await knex.raw(`CREATE TABLE IF NOT EXISTS completion (\n    id uuid NOT NULL,\n    created_at timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp(3) without time zone,\n    user_upstream_id integer,\n    email text NOT NULL,\n    student_number text,\n    completion_language text,\n    grade text,\n    certificate_id text,\n    course uuid,\n    \"user\" uuid,\n    eligible_for_ects boolean DEFAULT true\n  );`)\n\n  await knex.raw(`CREATE TABLE IF NOT EXISTS completion_registered (\n    id uuid NOT NULL,\n    created_at timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp(3) without time zone,\n    real_student_number text NOT NULL,\n    \"user\" uuid,\n    completion uuid,\n    course uuid,\n    organization uuid\n  );`)\n\n  await knex.raw(`CREATE TABLE IF NOT EXISTS course (\n    id uuid NOT NULL,\n    created_at timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp(3) without time zone,\n    teacher_in_charge_name text NOT NULL,\n    teacher_in_charge_email text NOT NULL,\n    support_email text,\n    start_date text NOT NULL,\n    end_date text,\n    name text NOT NULL,\n    slug text NOT NULL,\n    ects text,\n    promote boolean,\n    status course_status DEFAULT 'Upcoming'::course_status,\n    start_point boolean,\n    hidden boolean,\n    study_module_start_point boolean,\n    \"order\" integer,\n    study_module_order integer,\n    automatic_completions boolean DEFAULT false,\n    points_needed integer,\n    exercise_completions_needed integer,\n    has_certificate boolean DEFAULT false,\n    owner_organization uuid,\n    completion_email uuid,\n    inherit_settings_from uuid,\n    completions_handled_by uuid,\n    photo uuid,\n    automatic_completions_eligible_for_ects boolean DEFAULT true\n  );`)\n\n  await knex.raw(`CREATE TABLE IF NOT EXISTS course_alias (\n    id uuid NOT NULL,\n    created_at timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp(3) without time zone,\n    course_code text NOT NULL,\n    course uuid\n  );`)\n\n  await knex.raw(`CREATE TABLE IF NOT EXISTS course_organization (\n    id uuid NOT NULL,\n    created_at timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp(3) without time zone,\n    creator boolean,\n    course uuid,\n    organization uuid\n  );`)\n\n  await knex.raw(`CREATE TABLE IF NOT EXISTS course_translation (\n    id uuid NOT NULL,\n    created_at timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp(3) without time zone,\n    name text NOT NULL,\n    language text NOT NULL,\n    description text NOT NULL,\n    link text,\n    course uuid\n  );`)\n\n  await knex.raw(`CREATE TABLE IF NOT EXISTS course_variant (\n    id uuid NOT NULL,\n    created_at timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp(3) without time zone,\n    slug text NOT NULL,\n    description text,\n    course uuid\n  );`)\n\n  await knex.raw(`CREATE TABLE IF NOT EXISTS email_delivery (\n    id uuid NOT NULL,\n    created_at timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp(3) without time zone,\n    sent boolean DEFAULT false NOT NULL,\n    error boolean DEFAULT false NOT NULL,\n    error_message text,\n    \"user\" uuid,\n    email_template uuid\n  );`)\n\n  await knex.raw(`CREATE TABLE IF NOT EXISTS email_template (\n    id uuid NOT NULL,\n    created_at timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp(3) without time zone,\n    name text,\n    txt_body text,\n    html_body text,\n    title text\n  );`)\n\n  await knex.raw(`CREATE TABLE IF NOT EXISTS exercise (\n    id uuid NOT NULL,\n    created_at timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp(3) without time zone,\n    custom_id text NOT NULL,\n    name text,\n    part integer,\n    section integer,\n    max_points integer,\n    \"timestamp\" timestamp(3) without time zone,\n    deleted boolean DEFAULT false,\n    service uuid,\n    course uuid\n  );`)\n\n  await knex.raw(`CREATE TABLE IF NOT EXISTS exercise_completion (\n    id uuid NOT NULL,\n    created_at timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp(3) without time zone,\n    n_points numeric(65,30),\n    \"timestamp\" timestamp(3) without time zone NOT NULL,\n    completed boolean DEFAULT false,\n    \"user\" uuid,\n    exercise uuid\n  );`)\n\n  await knex.raw(`CREATE TABLE IF NOT EXISTS exercise_completion_required_actions (\n    id uuid NOT NULL,\n    value text NOT NULL,\n    exercise_completion uuid\n  );`)\n\n  await knex.raw(`CREATE TABLE IF NOT EXISTS image (\n    id uuid NOT NULL,\n    created_at timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp(3) without time zone,\n    name text,\n    original text NOT NULL,\n    original_mimetype text NOT NULL,\n    uncompressed text NOT NULL,\n    uncompressed_mimetype text NOT NULL,\n    compressed text,\n    compressed_mimetype text,\n    encoding text,\n    \"default\" boolean\n  );`)\n\n  await knex.raw(`CREATE TABLE IF NOT EXISTS open_university_registration_link (\n    id uuid NOT NULL,\n    created_at timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp(3) without time zone,\n    course_code text NOT NULL,\n    language text NOT NULL,\n    link text,\n    start_date timestamp(3) without time zone,\n    stop_date timestamp(3) without time zone,\n    course uuid\n  );`)\n\n  await knex.raw(`CREATE TABLE IF NOT EXISTS organization (\n    id uuid NOT NULL,\n    created_at timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp(3) without time zone,\n    slug text NOT NULL,\n    verified_at timestamp(3) without time zone,\n    verified boolean,\n    disabled boolean,\n    hidden boolean,\n    tmc_created_at timestamp(3) without time zone,\n    tmc_updated_at timestamp(3) without time zone,\n    logo_file_name text,\n    logo_content_type text,\n    logo_file_size integer,\n    logo_updated_at timestamp(3) without time zone,\n    phone text,\n    contact_information text,\n    email text,\n    website text,\n    pinned boolean,\n    secret_key text NOT NULL,\n    creator uuid\n  );`)\n\n  await knex.raw(`CREATE TABLE IF NOT EXISTS organization_translation (\n    id uuid NOT NULL,\n    created_at timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp(3) without time zone,\n    language text NOT NULL,\n    name text NOT NULL,\n    disabled_reason text,\n    information text,\n    organization uuid\n  );`)\n\n  await knex.raw(`CREATE TABLE IF NOT EXISTS service (\n    id uuid NOT NULL,\n    created_at timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp(3) without time zone,\n    url text NOT NULL,\n    name text NOT NULL\n  );`)\n\n  await knex.raw(`CREATE TABLE IF NOT EXISTS study_module (\n    id uuid NOT NULL,\n    slug text NOT NULL,\n    name text NOT NULL,\n    image text,\n    \"order\" integer,\n    created_at timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp(3) without time zone\n  );`)\n\n  await knex.raw(`CREATE TABLE IF NOT EXISTS study_module_translation (\n    id uuid NOT NULL,\n    created_at timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp(3) without time zone,\n    name text NOT NULL,\n    language text NOT NULL,\n    description text NOT NULL,\n    study_module uuid\n  );`)\n\n  await knex.raw(`CREATE TABLE IF NOT EXISTS \"user\" (\n    id uuid NOT NULL,\n    upstream_id integer NOT NULL,\n    created_at timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp(3) without time zone,\n    first_name text,\n    last_name text,\n    username text NOT NULL,\n    email text NOT NULL,\n    administrator boolean NOT NULL,\n    student_number text,\n    real_student_number text,\n    research_consent boolean\n  );`)\n\n  await knex.raw(`CREATE TABLE IF NOT EXISTS user_course_progress (\n    id uuid NOT NULL,\n    created_at timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp(3) without time zone,\n    progress json NOT NULL,\n    max_points numeric(65,30),\n    n_points numeric(65,30),\n    \"user\" uuid,\n    course uuid\n  );`)\n\n  await knex.raw(`CREATE TABLE IF NOT EXISTS user_course_service_progress (\n    id uuid NOT NULL,\n    created_at timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp(3) without time zone,\n    progress json NOT NULL,\n    \"timestamp\" timestamp(3) without time zone,\n    service uuid,\n    \"user\" uuid,\n    course uuid,\n    user_course_progress uuid\n  );`)\n\n  await knex.raw(`CREATE TABLE IF NOT EXISTS user_course_settings_visibility (\n    id uuid NOT NULL,\n    created_at timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp(3) without time zone,\n    language text NOT NULL,\n    course uuid\n  );`)\n\n  // TODO: check organization_role vs OrganizationRole\n  await knex.raw(`CREATE TABLE IF NOT EXISTS user_organization (\n    id uuid NOT NULL,\n    role organization_role DEFAULT 'Student'::organization_role,\n    created_at timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp(3) without time zone,\n    organization uuid,\n    \"user\" uuid\n  );`)\n\n  await knex.raw(`CREATE TABLE IF NOT EXISTS verified_user (\n    id uuid NOT NULL,\n    created_at timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP,\n    updated_at timestamp(3) without time zone,\n    display_name text,\n    personal_unique_code text NOT NULL,\n    organization uuid,\n    \"user\" uuid\n  );`)\n\n  try {\n    await knex.transaction(async (trx) => {\n      await trx.raw(`ALTER TABLE ONLY \"UserAppDatumConfig\" \n        ADD CONSTRAINT \"UserAppDatumConfig_pkey\" PRIMARY KEY (id);`)\n      await trx.raw(`ALTER TABLE ONLY \"UserCourseSettings\"\n        ADD CONSTRAINT \"UserCourseSettings_pkey\" PRIMARY KEY (id);`)\n      await trx.raw(`ALTER TABLE ONLY completion\n        ADD CONSTRAINT completion_pkey PRIMARY KEY (id);`)\n      await trx.raw(`ALTER TABLE ONLY completion_registered\n        ADD CONSTRAINT completion_registered_pkey PRIMARY KEY (id);`)\n      await trx.raw(`ALTER TABLE ONLY course_alias\n        ADD CONSTRAINT course_alias_pkey PRIMARY KEY (id);`)\n      await trx.raw(`ALTER TABLE ONLY course_organization\n        ADD CONSTRAINT course_organization_pkey PRIMARY KEY (id);`)\n      await trx.raw(`ALTER TABLE ONLY course\n        ADD CONSTRAINT course_pkey PRIMARY KEY (id);`)\n      await trx.raw(`ALTER TABLE ONLY course_translation\n        ADD CONSTRAINT course_translation_pkey PRIMARY KEY (id);`)\n      await trx.raw(`ALTER TABLE ONLY course_variant\n        ADD CONSTRAINT course_variant_pkey PRIMARY KEY (id);`)\n      await trx.raw(`ALTER TABLE ONLY email_template\n        ADD CONSTRAINT email_template_pkey PRIMARY KEY (id);`)\n      await trx.raw(`ALTER TABLE ONLY exercise_completion\n        ADD CONSTRAINT exercise_completion_pkey PRIMARY KEY (id);`)\n      await trx.raw(`ALTER TABLE ONLY exercise_completion_required_actions\n        ADD CONSTRAINT exercise_completion_required_actions_pkey PRIMARY KEY (id);`)\n      await trx.raw(`ALTER TABLE ONLY exercise\n        ADD CONSTRAINT exercise_pkey PRIMARY KEY (id);`)\n      await trx.raw(`ALTER TABLE ONLY image\n        ADD CONSTRAINT image_pkey PRIMARY KEY (id);`)\n      await trx.raw(`ALTER TABLE ONLY open_university_registration_link\n        ADD CONSTRAINT open_university_registration_link_pkey PRIMARY KEY (id);`)\n      await trx.raw(`ALTER TABLE ONLY organization\n        ADD CONSTRAINT organization_pkey PRIMARY KEY (id);`)\n      await trx.raw(`ALTER TABLE ONLY organization_translation\n        ADD CONSTRAINT organization_translation_pkey PRIMARY KEY (id);`)\n      await trx.raw(`ALTER TABLE ONLY service\n        ADD CONSTRAINT service_pkey PRIMARY KEY (id);`)\n      await trx.raw(`ALTER TABLE ONLY study_module\n        ADD CONSTRAINT study_module_pkey PRIMARY KEY (id);`)\n      await trx.raw(`ALTER TABLE ONLY study_module_translation\n        ADD CONSTRAINT study_module_translation_pkey PRIMARY KEY (id);`)\n      await trx.raw(`ALTER TABLE ONLY user_course_progress\n        ADD CONSTRAINT user_course_progress_pkey PRIMARY KEY (id);`)\n      await trx.raw(`ALTER TABLE ONLY user_course_service_progress\n        ADD CONSTRAINT user_course_service_progress_pkey PRIMARY KEY (id);`)\n      await trx.raw(`ALTER TABLE ONLY user_course_settings_visibility\n        ADD CONSTRAINT user_course_settings_visibility_pkey PRIMARY KEY (id);`)\n      await trx.raw(`ALTER TABLE ONLY user_organization\n        ADD CONSTRAINT user_organization_pkey PRIMARY KEY (id);`)\n      await trx.raw(`ALTER TABLE ONLY \"user\"\n        ADD CONSTRAINT user_pkey PRIMARY KEY (id);`)\n      await trx.raw(`ALTER TABLE ONLY verified_user\n        ADD CONSTRAINT verified_user_pkey PRIMARY KEY (id);`)\n    })\n  } catch {\n    console.log(\n      \"Error adding primary key constraints. Probably because they already existed.\",\n    )\n  }\n\n  await knex.raw(\n    `CREATE UNIQUE INDEX IF NOT EXISTS \"_CourseToService_AB_unique\" ON \"_CourseToService\" USING btree (\"A\", \"B\");`,\n  )\n  await knex.raw(\n    `CREATE INDEX IF NOT EXISTS \"_CourseToService_B\" ON \"_CourseToService\" USING btree (\"B\");`,\n  )\n  await knex.raw(\n    `CREATE UNIQUE INDEX IF NOT EXISTS \"_StudyModuleToCourse_AB_unique\" ON \"_StudyModuleToCourse\" USING btree (\"A\", \"B\");`,\n  )\n  await knex.raw(\n    `CREATE INDEX IF NOT EXISTS \"_StudyModuleToCourse_B\" ON \"_StudyModuleToCourse\" USING btree (\"B\");`,\n  )\n  await knex.raw(\n    `CREATE UNIQUE INDEX IF NOT EXISTS \"UserAppDatumConfig.name._UNIQUE\" ON \"UserAppDatumConfig\" USING btree (name);`,\n  )\n  await knex.raw(\n    `CREATE UNIQUE INDEX IF NOT EXISTS \"course.slug._UNIQUE\" ON course USING btree (slug);`,\n  )\n  await knex.raw(\n    `CREATE UNIQUE INDEX IF NOT EXISTS \"course_alias.course_code._UNIQUE\" ON course_alias USING btree (course_code);`,\n  )\n  await knex.raw(\n    `CREATE UNIQUE INDEX IF NOT EXISTS \"organization.secret_key._UNIQUE\" ON organization USING btree (secret_key);`,\n  )\n  await knex.raw(\n    `CREATE UNIQUE INDEX IF NOT EXISTS \"organization.slug._UNIQUE\" ON organization USING btree (slug);`,\n  )\n  await knex.raw(\n    `CREATE UNIQUE INDEX IF NOT EXISTS \"study_module.slug._UNIQUE\" ON study_module USING btree (slug);`,\n  )\n  await knex.raw(\n    `CREATE UNIQUE INDEX IF NOT EXISTS \"user.upstream_id._UNIQUE\" ON \"user\" USING btree (upstream_id);`,\n  )\n  await knex.raw(\n    `CREATE UNIQUE INDEX IF NOT EXISTS \"user.username._UNIQUE\" ON \"user\" USING btree (username);`,\n  )\n\n  try {\n    await knex.transaction(async (trx) => {\n      await trx.raw(`ALTER TABLE ONLY \"UserCourseSettings\"\n        ADD CONSTRAINT \"UserCourseSettings_course_fkey\" FOREIGN KEY (course) REFERENCES course(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY \"UserCourseSettings\"\n        ADD CONSTRAINT \"UserCourseSettings_user_fkey\" FOREIGN KEY (\"user\") REFERENCES \"user\"(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY \"_CourseToService\"\n        ADD CONSTRAINT \"_CourseToService_A_fkey\" FOREIGN KEY (\"A\") REFERENCES course(id) ON DELETE CASCADE;`)\n      await trx.raw(`ALTER TABLE ONLY \"_CourseToService\"\n        ADD CONSTRAINT \"_CourseToService_B_fkey\" FOREIGN KEY (\"B\") REFERENCES service(id) ON DELETE CASCADE;`)\n      await trx.raw(`ALTER TABLE ONLY \"_StudyModuleToCourse\"\n        ADD CONSTRAINT \"_StudyModuleToCourse_A_fkey\" FOREIGN KEY (\"A\") REFERENCES course(id) ON DELETE CASCADE;`)\n      await trx.raw(`ALTER TABLE ONLY \"_StudyModuleToCourse\"\n        ADD CONSTRAINT \"_StudyModuleToCourse_B_fkey\" FOREIGN KEY (\"B\") REFERENCES study_module(id) ON DELETE CASCADE;`)\n      await trx.raw(`ALTER TABLE ONLY completion\n        ADD CONSTRAINT completion_course_fkey FOREIGN KEY (course) REFERENCES course(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY completion_registered\n        ADD CONSTRAINT completion_registered_completion_fkey FOREIGN KEY (completion) REFERENCES completion(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY completion_registered\n        ADD CONSTRAINT completion_registered_course_fkey FOREIGN KEY (course) REFERENCES course(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY completion_registered\n        ADD CONSTRAINT completion_registered_organization_fkey FOREIGN KEY (organization) REFERENCES organization(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY completion_registered\n        ADD CONSTRAINT completion_registered_user_fkey FOREIGN KEY (\"user\") REFERENCES \"user\"(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY completion\n        ADD CONSTRAINT completion_user_fkey FOREIGN KEY (\"user\") REFERENCES \"user\"(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY course_alias\n        ADD CONSTRAINT course_alias_course_fkey FOREIGN KEY (course) REFERENCES course(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY course\n        ADD CONSTRAINT course_completion_email_fkey FOREIGN KEY (completion_email) REFERENCES email_template(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY course\n        ADD CONSTRAINT course_completions_handled_by_fkey FOREIGN KEY (completions_handled_by) REFERENCES course(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY course\n        ADD CONSTRAINT course_inherit_settings_from_fkey FOREIGN KEY (inherit_settings_from) REFERENCES course(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY course_organization\n        ADD CONSTRAINT course_organization_course_fkey FOREIGN KEY (course) REFERENCES course(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY course_organization\n        ADD CONSTRAINT course_organization_organization_fkey FOREIGN KEY (organization) REFERENCES organization(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY course\n        ADD CONSTRAINT course_owner_organization_fkey FOREIGN KEY (owner_organization) REFERENCES organization(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY course\n        ADD CONSTRAINT course_photo_fkey FOREIGN KEY (photo) REFERENCES image(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY course_translation\n        ADD CONSTRAINT course_translation_course_fkey FOREIGN KEY (course) REFERENCES course(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY course_variant\n        ADD CONSTRAINT course_variant_course_fkey FOREIGN KEY (course) REFERENCES course(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY email_delivery\n        ADD CONSTRAINT email_delivery_email_template_fkey FOREIGN KEY (email_template) REFERENCES email_template(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY email_delivery\n        ADD CONSTRAINT email_delivery_user_fkey FOREIGN KEY (\"user\") REFERENCES \"user\"(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY exercise_completion\n        ADD CONSTRAINT exercise_completion_exercise_fkey FOREIGN KEY (exercise) REFERENCES exercise(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY exercise_completion_required_actions\n        ADD CONSTRAINT exercise_completion_required_actions_exercise_completion_fkey FOREIGN KEY (exercise_completion) REFERENCES exercise_completion(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY exercise_completion\n        ADD CONSTRAINT exercise_completion_user_fkey FOREIGN KEY (\"user\") REFERENCES \"user\"(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY exercise\n        ADD CONSTRAINT exercise_course_fkey FOREIGN KEY (course) REFERENCES course(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY exercise\n        ADD CONSTRAINT exercise_service_fkey FOREIGN KEY (service) REFERENCES service(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY open_university_registration_link\n        ADD CONSTRAINT open_university_registration_link_course_fkey FOREIGN KEY (course) REFERENCES course(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY organization\n        ADD CONSTRAINT organization_creator_fkey FOREIGN KEY (creator) REFERENCES \"user\"(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY organization_translation\n        ADD CONSTRAINT organization_translation_organization_fkey FOREIGN KEY (organization) REFERENCES organization(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY study_module_translation\n        ADD CONSTRAINT study_module_translation_study_module_fkey FOREIGN KEY (study_module) REFERENCES study_module(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY user_course_progress\n        ADD CONSTRAINT user_course_progress_course_fkey FOREIGN KEY (course) REFERENCES course(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY user_course_progress\n        ADD CONSTRAINT user_course_progress_user_fkey FOREIGN KEY (\"user\") REFERENCES \"user\"(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY user_course_service_progress\n        ADD CONSTRAINT user_course_service_progress_course_fkey FOREIGN KEY (course) REFERENCES course(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY user_course_service_progress\n        ADD CONSTRAINT user_course_service_progress_service_fkey FOREIGN KEY (service) REFERENCES service(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY user_course_service_progress\n        ADD CONSTRAINT user_course_service_progress_user_course_progress_fkey FOREIGN KEY (user_course_progress) REFERENCES user_course_progress(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY user_course_service_progress\n        ADD CONSTRAINT user_course_service_progress_user_fkey FOREIGN KEY (\"user\") REFERENCES \"user\"(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY user_course_settings_visibility\n        ADD CONSTRAINT user_course_settings_visibility_course_fkey FOREIGN KEY (course) REFERENCES course(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY user_organization\n        ADD CONSTRAINT user_organization_organization_fkey FOREIGN KEY (organization) REFERENCES organization(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY user_organization\n        ADD CONSTRAINT user_organization_user_fkey FOREIGN KEY (\"user\") REFERENCES \"user\"(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY verified_user\n        ADD CONSTRAINT verified_user_organization_fkey FOREIGN KEY (organization) REFERENCES organization(id) ON DELETE SET NULL;`)\n      await trx.raw(`ALTER TABLE ONLY verified_user\n        ADD CONSTRAINT verified_user_user_fkey FOREIGN KEY (\"user\") REFERENCES \"user\"(id) ON DELETE SET NULL;`)\n    })\n  } catch {\n    console.log(\n      \"Error adding foreign key constraints. Probably because they existed already.\",\n    )\n  }\n}\n\nexport async function down(_knex: Knex): Promise<any> {}\n"]}