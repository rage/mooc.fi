{"version":3,"file":"20200813150438_alter-tables-convert-to-json-rename-camelcase-drop-recreate-view.js","sourceRoot":"","sources":["../../migrations/20200813150438_alter-tables-convert-to-json-rename-camelcase-drop-recreate-view.ts"],"names":[],"mappings":";;;;AACA,IAAM,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,CAAA;AAE1D,SAAsB,EAAE,CAAC,IAAU;;;;;yBAC7B,YAAY,EAAZ,wBAAY;oBACd,qBAAM,IAAI,CAAC,GAAG,CAAC,4CAA4C,CAAC,EAAA;;oBAA5D,SAA4D,CAAA;oBAC5D,qBAAM,IAAI,CAAC,GAAG,CAAC,0CAAwC,CAAC,EAAA;;oBAAxD,SAAwD,CAAA;oBACxD,qBAAM,IAAI,CAAC,GAAG,CAAC,sDAAsD,CAAC,EAAA;;oBAAtE,SAAsE,CAAA;;wBAGxE,qBAAM,IAAI,CAAC,GAAG,CACZ,gGAA4F,CAC7F,EAAA;;oBAFD,SAEC,CAAA;oBACD,qBAAM,IAAI,CAAC,GAAG,CACZ,wGAAoG,CACrG,EAAA;;oBAFD,SAEC,CAAA;oBACD,qBAAM,IAAI,CAAC,GAAG,CACZ,wFAAoF,CACrF,EAAA;;oBAFD,SAEC,CAAA;oBAED,qBAAM,IAAI,CAAC,GAAG,CACZ,uEAAmE,CACpE,EAAA;;oBAFD,SAEC,CAAA;oBACD,qBAAM,IAAI,CAAC,GAAG,CACZ,yEAAqE,CACtE,EAAA;;oBAFD,SAEC,CAAA;yBAEG,YAAY,EAAZ,yBAAY;oBACd,qBAAM,IAAI,CAAC,GAAG,CACZ,ubAeG,CACJ,EAAA;;oBAjBD,SAiBC,CAAA;oBACD,qBAAM,IAAI,CAAC,GAAG,CAAC,0DAAwD,CAAC,EAAA;;oBAAxE,SAAwE,CAAA;oBACxE,qBAAM,IAAI,CAAC,GAAG,CACZ,+bAkBG,CACJ,EAAA;;oBApBD,SAoBC,CAAA;oBACD,qBAAM,IAAI,CAAC,GAAG,CAAC,wCAAsC,CAAC,EAAA;;oBAAtD,SAAsD,CAAA;oBACtD,qBAAM,IAAI,CAAC,GAAG,CAAC,iDAA+C,CAAC,EAAA;;oBAA/D,SAA+D,CAAA;oBAC/D,qBAAM,IAAI,CAAC,GAAG,CACZ,wWAYG,CACJ,EAAA;;oBAdD,SAcC,CAAA;oBACD,qBAAM,IAAI,CAAC,GAAG,CAAC,gDAA8C,CAAC,EAAA;;oBAA9D,SAA8D,CAAA;oBAC9D,qBAAM,IAAI,CAAC,GAAG,CAAC,wDAAwD,CAAC,EAAA;;oBAAxE,SAAwE,CAAA;oBAExE,qBAAM,IAAI,CAAC,GAAG,CAAC,0DAA0D,CAAC,EAAA;;oBAA1E,SAA0E,CAAA;;;;;;CAE7E;AAvFD,gBAuFC;AAED,SAAsB,IAAI,CAAC,IAAU;;;;wBACnC,qBAAM,IAAI,CAAC,GAAG,CACZ,uEAAmE,CACpE,EAAA;;oBAFD,SAEC,CAAA;oBACD,qBAAM,IAAI,CAAC,GAAG,CACZ,yEAAqE,CACtE,EAAA;;oBAFD,SAEC,CAAA;;;;;CACF;AAPD,oBAOC","sourcesContent":["import * as Knex from \"knex\"\nconst isProduction = process.env.NODE_ENV === \"production\"\n\nexport async function up(knex: Knex): Promise<void> {\n  if (isProduction) {\n    await knex.raw(`DROP MATERIALIZED VIEW reaktor.completion;`)\n    await knex.raw(`DROP MATERIALIZED VIEW reaktor.\"user\";`)\n    await knex.raw(`DROP MATERIALIZED VIEW reaktor.user_course_settings;`)\n  }\n\n  await knex.raw(\n    `ALTER TABLE \"user_course_progress\" ALTER COLUMN progress TYPE JSON USING \"progress\"::json;`,\n  )\n  await knex.raw(\n    `ALTER TABLE \"user_course_service_progress\" ALTER COLUMN progress TYPE JSON USING \"progress\"::json;`,\n  )\n  await knex.raw(\n    `ALTER TABLE \"UserCourseSettings\" ALTER COLUMN other TYPE JSON using \"other\"::json;`,\n  )\n\n  await knex.raw(\n    `ALTER TABLE \"UserCourseSettings\" RENAME TO \"user_course_setting\";`,\n  )\n  await knex.raw(\n    `ALTER TABLE \"UserAppDatumConfig\" RENAME TO \"user_app_datum_config\";`,\n  )\n\n  if (isProduction) {\n    await knex.raw(\n      `CREATE materialized VIEW reaktor.user_course_settings AS\n        SELECT\n            user_id AS \"user\",\n            language,\n            country,\n            course_variant,\n            marketing,\n            research,\n            other,\n            created_at,\n            updated_at\n        FROM\n            \"user_course_setting\"\n        WHERE\n            course_id = '55dff8af-c06c-4a97-88e6-af7c04d252ca';\n        `,\n    )\n    await knex.raw(`CREATE INDEX on reaktor.user_course_settings (\"user\");`)\n    await knex.raw(\n      `CREATE materialized VIEW reaktor.\"user\" AS\n        SELECT\n            id,\n            upstream_id,\n            first_name,\n            last_name,\n            email,\n            created_at,\n            updated_at\n        FROM\n            \"user\"\n        WHERE\n            id IN (\n                SELECT\n                    \"user\"\n                FROM\n                    reaktor.user_course_settings\n            );\n        `,\n    )\n    await knex.raw(`CREATE INDEX ON reaktor.\"user\" (id);`)\n    await knex.raw(`CREATE INDEX ON reaktor.\"user\" (upstream_id);`)\n    await knex.raw(\n      `CREATE materialized VIEW reaktor.completion AS\n        SELECT\n            user_id AS \"user\",\n            user_upstream_id,\n            email,\n            completion_language,\n            created_at,\n            updated_at\n        FROM\n            completion\n        WHERE\n            course_id = '55dff8af-c06c-4a97-88e6-af7c04d252ca';\n        `,\n    )\n    await knex.raw(`CREATE INDEX ON reaktor.completion (\"user\");`)\n    await knex.raw(`CREATE INDEX ON reaktor.completion (user_upstream_id);`)\n\n    await knex.raw(`GRANT SELECT ON ALL TABLES IN SCHEMA reaktor TO reaktor;`)\n  }\n}\n\nexport async function down(knex: Knex): Promise<void> {\n  await knex.raw(\n    `ALTER TABLE \"user_course_setting\" RENAME TO \"UserCourseSettings\";`,\n  )\n  await knex.raw(\n    `ALTER TABLE \"user_app_datum_config\" RENAME TO \"UserAppDatumConfig\";`,\n  )\n}\n"]}