{"version":3,"file":"google-cloud.js","sourceRoot":"","sources":["../../services/google-cloud.ts"],"names":[],"mappings":"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","sourcesContent":["import { Storage } from \"@google-cloud/storage\"\nimport * as shortid from \"shortid\"\nimport * as mime from \"mime-types\"\n\nconst isProduction = process.env.NODE_ENV === \"production\"\nconst bucketName = process.env.GOOGLE_CLOUD_STORAGE_BUCKET\n// const isReflection = process.env.NEXUS_REFLECTION\n\nif (!bucketName && isProduction) {\n  console.error(\"no bucket name defined in GOOGLE_CLOUD_STORAGE_BUCKET\")\n  process.exit(1)\n}\n\nconst storage = isProduction\n  ? new Storage({\n      projectId: process.env.GOOGLE_CLOUD_STORAGE_PROJECT,\n      keyFilename: process.env.GOOGLE_CLOUD_STORAGE_KEYFILE,\n    })\n  : {\n      bucket: () => ({\n        file: () => ({\n          save: (\n            _: any, // buffer\n            __: any, // options\n            cb: (error?: string) => void,\n          ): any => cb(),\n          delete: (): any => Promise.resolve(true),\n        }),\n      }),\n    }\n// FIXME: doesn't actually upload in dev even with base64 set to false unless isproduction is true\n\nconst bucket = storage.bucket(bucketName ?? \"\") // this shouldn't ever happen in production\n\nexport const uploadImage = async ({\n  imageBuffer,\n  mimeType,\n  name = \"\",\n  directory = \"\",\n  base64 = false,\n}: {\n  imageBuffer: Buffer\n  mimeType: string\n  name?: string\n  directory?: string\n  base64?: boolean\n}): Promise<string> => {\n  const filename = `${directory ? directory + \"/\" : \"\"}${shortid.generate()}${\n    name && name !== \"\" ? \"-\" + name : \"\"\n  }.${mime.extension(mimeType)}`\n\n  if (base64) {\n    const base64 = `data:${mimeType};base64,` + imageBuffer.toString(\"base64\")\n\n    return Promise.resolve(base64)\n  }\n\n  const file = bucket.file(filename)\n\n  return new Promise((resolve, reject) => {\n    file.save(\n      imageBuffer,\n      {\n        metadata: { cacheControl: \"public, max-age=2628000\" },\n        // can't set this with ACL disabled; images will (hopefully) be public by default\n        // public: true,\n        validation: \"md5\",\n      },\n      (error: any) => {\n        if (error) {\n          reject(error)\n        }\n\n        resolve(filename)\n      },\n    )\n  })\n}\n\nexport const deleteImage = async (filename: string): Promise<boolean> => {\n  if (!filename || filename === \"\") {\n    return Promise.resolve(false)\n  }\n\n  if (~filename.indexOf(\"base64\")) {\n    return Promise.resolve(true)\n  }\n\n  const file = bucket.file(filename)\n\n  return file\n    .delete()\n    .then(() => true)\n    .catch((err: any) => (console.error(\"image delete error\", err), false))\n}\n"]}