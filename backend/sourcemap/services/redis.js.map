{"version":3,"file":"redis.js","sourceRoot":"","sources":["../../services/redis.ts"],"names":[],"mappings":"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","sourcesContent":["import * as redis from \"redis\"\nimport * as winston from \"winston\"\nimport { promisify } from \"util\"\n\nconst REDIS_URL = process.env.REDIS_URL ?? \"redis://127.0.0.1:7001\"\nconst REDIS_PASSWORD = process.env.REDIS_PASSWORD\nconst NEXUS_REFLECTION = process.env.NEXUS_REFLECTION\n\nconst redisClient = !NEXUS_REFLECTION\n  ? redis.createClient({\n      url: REDIS_URL,\n      password: REDIS_PASSWORD,\n    })\n  : undefined\n\nconst logger = winston.createLogger({\n  level: \"info\",\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.json(),\n  ),\n  defaultMeta: { service: \"redis\" },\n  transports: [new winston.transports.Console()],\n})\n\nredisClient?.on(\"error\", (err: any) => {\n  logger.error(\"Redis error: \" + err)\n})\n\nexport const getAsync = redisClient\n  ? promisify(redisClient?.get).bind(redisClient)\n  : async (_: any) => Promise.reject() // this doesn't actually get run ever, but\n\nexport async function redisify<T>(\n  fn: ((...props: any[]) => Promise<T> | T) | Promise<T>,\n  options: {\n    prefix: string\n    expireTime: number\n    key: string\n    params?: any\n  },\n) {\n  const { prefix, expireTime, key, params } = options\n\n  if (!redisClient?.connected) {\n    return fn instanceof Promise ? fn : fn(...params)\n  }\n  const prefixedKey = `${prefix}:${key}`\n\n  return await getAsync(prefixedKey)\n    .then(async (res: any) => {\n      if (res) {\n        logger.info(`Cache hit: ${prefix}`)\n        return await JSON.parse(res)\n      }\n      logger.info(`Cache miss: ${prefix}`)\n\n      const value =\n        fn instanceof Promise\n          ? await fn\n          : params\n          ? await fn(...params)\n          : await fn()\n\n      redisClient?.set(prefixedKey, JSON.stringify(value))\n      redisClient?.expire(prefixedKey, expireTime)\n\n      return value\n    })\n    .catch(() => {\n      return fn instanceof Promise ? fn : params ? fn(...params) : fn()\n    })\n}\n\nexport const publisher = !NEXUS_REFLECTION\n  ? redis.createClient({\n      url: REDIS_URL,\n      password: process.env.REDIS_PASSWORD,\n    })\n  : null\n\nexport const subscriber = !NEXUS_REFLECTION\n  ? redis.createClient({\n      url: REDIS_URL,\n      password: process.env.REDIS_PASSWORD,\n    })\n  : null\n\nexport const invalidate = (prefix: string, key: string) => {\n  if (!redisClient?.connected) {\n    return\n  }\n\n  redisClient.del(`${prefix}:${key}`)\n}\n\nexport default redisClient\n"]}