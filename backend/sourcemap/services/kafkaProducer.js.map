{"version":3,"file":"kafkaProducer.js","sourceRoot":"","sources":["../../services/kafkaProducer.ts"],"names":[],"mappings":";;;AAAA,0DAAqC;AACrC,uDAAkC;AAElC,IAAM,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC;IAClC,KAAK,EAAE,MAAM;IACb,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,OAAO,CAC5B,OAAO,CAAC,MAAM,CAAC,SAAS,EAAE,EAC1B,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,CACtB;IACD,WAAW,EAAE,EAAE,OAAO,EAAE,gBAAgB,EAAE;IAC1C,UAAU,EAAE,CAAC,IAAI,OAAO,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;CAC/C,CAAC,CAAA;AAEF,IAAI,QAAwB,CAAA;AAC5B,IAAI,KAAK,GAAsB,EAAE,CAAA;AACjC,IAAI,UAAmB,CAAA;AAEvB;IACE;QAAA,iBAYC;QAXC,KAAK,GAAG,EAAE,CAAA;QACV,UAAU,GAAG,KAAK,CAAA;QAClB,QAAQ,GAAG,IAAI,KAAK,CAAC,QAAQ,CAAC;YAC5B,sBAAsB,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU;YAC9C,KAAK,EAAE,IAAI;SACZ,CAAC,CAAA;QACF,QAAQ,CAAC,OAAO,EAAE,CAAA;QAClB,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE;;wBAAY,qBAAM,IAAI,CAAC,qBAAqB,EAAE,EAAA;wBAAlC,sBAAA,SAAkC,EAAA;;iBAAA,CAAC,CAAA;QACpE,QAAQ,CAAC,EAAE,CAAC,aAAa,EAAE,UAAU,GAAG;YACtC,MAAM,CAAC,KAAK,CAAC,uBAAuB,GAAG,GAAG,CAAC,CAAA;QAC7C,CAAC,CAAC,CAAA;IACJ,CAAC;IAEK,kCAAU,GAAhB;;;gBACE,UAAU,GAAG,IAAI,CAAA;;;;KAClB;IACK,4CAAoB,GAA1B,UAA2B,OAAwB;;;gBACjD,IAAI,UAAU;oBAAE,sBAAM;gBACtB,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;;;;KACpB;IAEa,6CAAqB,GAAnC;;;;gBACE,OAAO,IAAI,EAAE;oBACX,IAAI,UAAU,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC;wBAAE,MAAK;oBACzC,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;wBACd,OAAO,GAAoB,KAAK,CAAC,GAAG,EAAqB,CAAA;wBAE/D,IAAI;4BACF,QAAQ,CAAC,OAAO,CACd,OAAO,CAAC,KAAK,EACb,OAAO,CAAC,SAAS,EACjB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAC5B,EAAE,EAAE,mCAAmC;4BACvC,IAAI,CAAC,GAAG,EAAE,CACX,CAAA;yBACF;wBAAC,OAAO,GAAG,EAAE;4BACZ,MAAM,CAAC,KAAK,CAAC,+CAA+C,GAAG,GAAG,CAAC,CAAA;yBACpE;qBACF;iBACF;gBACD,QAAQ,CAAC,UAAU,EAAE,CAAA;;;;KACtB;IACH,oBAAC;AAAD,CAAC,AA5CD,IA4CC","sourcesContent":["import * as Kafka from \"node-rdkafka\"\nimport * as winston from \"winston\"\n\nconst logger = winston.createLogger({\n  level: \"info\",\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.json(),\n  ),\n  defaultMeta: { service: \"kafka-producer\" },\n  transports: [new winston.transports.Console()],\n})\n\nlet producer: Kafka.Producer\nlet queue: ProducerMessage[] = []\nlet disconnect: Boolean\n\nexport default class KafkaProducer {\n  constructor() {\n    queue = []\n    disconnect = false\n    producer = new Kafka.Producer({\n      \"metadata.broker.list\": process.env.KAFKA_HOST,\n      dr_cb: true,\n    })\n    producer.connect()\n    producer.on(\"ready\", async () => await this.producerReadyFunction())\n    producer.on(\"event.error\", function (err) {\n      logger.error(\"Error from producer: \" + err)\n    })\n  }\n\n  async disconnect() {\n    disconnect = true\n  }\n  async queueProducerMessage(message: ProducerMessage) {\n    if (disconnect) return\n    queue.push(message)\n  }\n\n  private async producerReadyFunction() {\n    while (true) {\n      if (disconnect && queue.length < 1) break\n      if (queue.length > 0) {\n        const message: ProducerMessage = queue.pop() as ProducerMessage\n\n        try {\n          producer.produce(\n            message.topic,\n            message.partition,\n            Buffer.from(message.message),\n            \"\", // TODO/FIXME: message key missing?\n            Date.now(),\n          )\n        } catch (err) {\n          logger.error(\"A problem occurred when sending our message: \" + err)\n        }\n      }\n    }\n    producer.disconnect()\n  }\n}\n\nexport interface ProducerMessage {\n  message: string\n  topic: string\n  partition: number | null\n}\n"]}