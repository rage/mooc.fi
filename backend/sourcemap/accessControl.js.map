{"version":3,"file":"accessControl.js","sourceRoot":"","sources":["../accessControl.ts"],"names":[],"mappings":";AAAA,sDAAsD;AACtD,2CAA2C;;;AAE3C,IAAY,IAKX;AALD,WAAY,IAAI;IACd,+BAAI,CAAA;IACJ,iCAAK,CAAA;IACL,+CAAY,CAAA;IACZ,qCAAO,CAAA;AACT,CAAC,EALW,IAAI,GAAJ,YAAI,KAAJ,YAAI,QAKf;AAED,iBAAiB;AACJ,QAAA,OAAO,GAAG,UAAC,CAAM,EAAE,KAAU,EAAE,GAAiB,EAAE,KAAU;IACvE,OAAA,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK;AAAvB,CAAuB,CAAA;AACZ,QAAA,MAAM,GAAG,UAAC,CAAM,EAAE,KAAU,EAAE,GAAiB,EAAE,KAAU;IACtE,OAAA,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI;AAAtB,CAAsB,CAAA;AACX,QAAA,cAAc,GAAG,UAC5B,CAAM,EACN,KAAU,EACV,GAAiB,EACjB,KAAU,IACP,OAAA,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,YAAY,EAA9B,CAA8B,CAAA;AACtB,QAAA,SAAS,GAAG,UAAC,CAAM,EAAE,KAAU,EAAE,GAAiB,EAAE,KAAU;IACzE,OAAA,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,OAAO;AAAzB,CAAyB,CAAA;AASd,QAAA,EAAE,GAAG;IAAC,oBAAkC;SAAlC,UAAkC,EAAlC,qBAAkC,EAAlC,IAAkC;QAAlC,+BAAkC;;IAAK,OAAA,UACxD,IAAS,EACT,IAAS,EACT,GAAiB,EACjB,IAAS,IACN,OAAA,UAAU,CAAC,IAAI,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,EAAxB,CAAwB,CAAC,EAAhD,CAAgD;AALK,CAKL,CAAA;AAExC,QAAA,GAAG,GAAG;IAAC,oBAAkC;SAAlC,UAAkC,EAAlC,qBAAkC,EAAlC,IAAkC;QAAlC,+BAAkC;;IAAK,OAAA,UACzD,IAAS,EACT,IAAS,EACT,GAAiB,EACjB,IAAS,IACN,OAAA,UAAU,CAAC,KAAK,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,EAAxB,CAAwB,CAAC,EAAjD,CAAiD;AALK,CAKL,CAAA;AAEzC,QAAA,GAAG,GAAG,UAAC,EAAqB,IAAK,OAAA,UAC5C,IAAS,EACT,IAAS,EACT,GAAiB,EACjB,IAAS,IACN,OAAA,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,EAA1B,CAA0B,EALe,CAKf,CAAA;AAE/B;;;;;;;;;;;;;;;;;4BAiB4B","sourcesContent":["// import { ForbiddenError } from \"apollo-server-core\"\n// import { NexusContext } from \"./context\"\n\nexport enum Role {\n  USER,\n  ADMIN,\n  ORGANIZATION, //for automated scripts, not for accounts\n  VISITOR,\n}\n\n// TODO: caching?\nexport const isAdmin = (_: any, _args: any, ctx: NexusContext, _info: any) =>\n  ctx.role === Role.ADMIN\nexport const isUser = (_: any, _args: any, ctx: NexusContext, _info: any) =>\n  ctx.role === Role.USER\nexport const isOrganization = (\n  _: any,\n  _args: any,\n  ctx: NexusContext,\n  _info: any,\n) => ctx.role === Role.ORGANIZATION\nexport const isVisitor = (_: any, _args: any, ctx: NexusContext, _info: any) =>\n  ctx.role === Role.VISITOR\n\ntype AuthorizeFunction = (\n  root: any,\n  args: any,\n  ctx: NexusContext,\n  info: any,\n) => boolean\n\nexport const or = (...predicates: AuthorizeFunction[]) => (\n  root: any,\n  args: any,\n  ctx: NexusContext,\n  info: any,\n) => predicates.some((p) => p(root, args, ctx, info))\n\nexport const and = (...predicates: AuthorizeFunction[]) => (\n  root: any,\n  args: any,\n  ctx: NexusContext,\n  info: any,\n) => predicates.every((p) => p(root, args, ctx, info))\n\nexport const not = (fn: AuthorizeFunction) => (\n  root: any,\n  args: any,\n  ctx: NexusContext,\n  info: any,\n) => !fn(root, args, ctx, info)\n\n/*const checkAccess = (\n  ctx: Context,\n  {\n    allowOrganizations = false,\n    disallowAdmin = false,\n    allowVisitors = false,\n    allowUsers = false,\n  } = {},\n) => {\n  // console.log(`role: ${Role[ctx.role]}, orgs ${allowOrganizations} no-admins ${disallowAdmin}, visitor ${allowVisitors}, users ${allowUsers}`)\n  if (allowOrganizations && ctx.role == Role.ORGANIZATION) return true\n  if (ctx.role == Role.ADMIN && !disallowAdmin) return true\n  if (ctx.role == Role.USER && allowUsers) return true\n  if (ctx.role == Role.VISITOR && allowVisitors) return true\n  throw new ForbiddenError(\"Access Denied\")\n}\n\nexport default checkAccess*/\n"]}