{"version":3,"file":"backgroundEmailer.js","sourceRoot":"","sources":["../../bin/backgroundEmailer.ts"],"names":[],"mappings":";;;AACA,oHAA+G;AAC/G,gEAAuC;AACvC,IAAM,UAAU,GAAG,GAAG,CAAA;AAEtB,IAAM,MAAM,GAAG,mBAAY,EAAE,CAAA;AAE7B,IAAM,SAAS,GAAG,UAAO,aAA4B;;;;;oBAEhD,qBAAM,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC;oBAClC,KAAK,EAAE,EAAE,EAAE,EAAE,aAAa,CAAC,EAAE,EAAE;oBAC/B,MAAM,EAAE;wBACN,IAAI,EAAE,IAAI;wBACV,cAAc,EAAE,IAAI;qBACrB;iBACF,CAAC,EAAA;;gBAPE,WACJ,CAAC,SAMC,CAAC,mCAAI,EAAE,EAPH,IAAI,UAAA,EAAE,cAAc,oBAAA;gBAQ5B,IAAI,CAAC,cAAc,IAAI,CAAC,IAAI,EAAE;oBAC5B,oDAAoD;oBACpD,OAAO,CAAC,KAAK,CAAC,qDAAqD,CAAC,CAAA;oBACpE,sBAAM;iBACP;gBAED;;;oEAGoD;gBACpD,OAAO,CAAC,GAAG,CAAC,sBAAoB,cAAc,CAAC,IAAI,YAAO,IAAI,CAAC,KAAO,CAAC,CAAA;;;;gBAErE,qBAAM,oDAAuB,CAAC,IAAI,EAAE,cAAc,CAAC,EAAA;;gBAAnD,SAAmD,CAAA;gBACnD,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAA;gBACzC,qBAAM,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC;wBAChC,KAAK,EAAE,EAAE,EAAE,EAAE,aAAa,CAAC,EAAE,EAAE;wBAC/B,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE;qBACnC,CAAC,EAAA;;gBAHF,SAGE,CAAA;;;;gBAEF,OAAO,CAAC,KAAK,CAAC,gBAAgB,EAAE,GAAC,CAAC,OAAO,CAAC,CAAA;gBAC1C,qBAAM,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC;wBAChC,KAAK,EAAE,EAAE,EAAE,EAAE,aAAa,CAAC,EAAE,EAAE;wBAC/B,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,aAAa,EAAE,GAAC,CAAC,OAAO,EAAE;qBAChD,CAAC,EAAA;;gBAHF,SAGE,CAAA;;;;;KAEL,CAAA;AAED,IAAM,IAAI,GAAG;;;;;qBACJ,IAAI;gBACe,qBAAM,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;wBAC1D,KAAK,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE;wBACpC,IAAI,EAAE,UAAU;qBACjB,CAAC,EAAA;;gBAHI,eAAe,GAAG,SAGtB;gBACF,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC9B,OAAO,CAAC,GAAG,CACT,yBAAuB,eAAe,CAAC,MAAM,qBAAkB,CAChE,CAAA;iBACF;sBAE0C,EAAf,mCAAe;;;qBAAf,CAAA,6BAAe,CAAA;gBAAhC,aAAa;gBACtB,qBAAM,SAAS,CAAC,aAAa,CAAC,EAAA;;gBAA9B,SAA8B,CAAA;;;gBADJ,IAAe,CAAA;;oBAG3C,qBAAM,IAAI,OAAO,CAAC,UAAC,OAAO,IAAK,OAAA,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,EAAzB,CAAyB,CAAC,EAAA;;gBAAzD,SAAyD,CAAA;;;;;KAE5D,CAAA;AAED,IAAI,EAAE,CAAA","sourcesContent":["import { EmailDelivery } from \"@prisma/client\"\nimport { sendEmailTemplateToUser } from \"./kafkaConsumer/userCourseProgressConsumer/generateUserCourseProgress\"\nimport prismaClient from \"./lib/prisma\"\nconst BATCH_SIZE = 100\n\nconst prisma = prismaClient()\n\nconst sendEmail = async (emailDelivery: EmailDelivery) => {\n  const { user, email_template } =\n    (await prisma.emailDelivery.findOne({\n      where: { id: emailDelivery.id },\n      select: {\n        user: true,\n        email_template: true,\n      },\n    })) ?? {}\n  if (!email_template || !user) {\n    // TODO: should this update the delivery with error?\n    console.error(\"No email template or user found while sending email\")\n    return\n  }\n\n  /*const user = await prisma.email_delivery.findOne({ where: { id: emailDelivery.id } }).user_email_deliveryTouser()\n  const emailTemplate = await prisma\n    .email_delivery.findOne({ where: { id: emailDelivery.id } })\n    .email_template_email_deliveryToemail_template()*/\n  console.log(`Delivering email ${email_template.name} to ${user.email}`)\n  try {\n    await sendEmailTemplateToUser(user, email_template)\n    console.log(\"Marking email as delivered\")\n    await prisma.emailDelivery.update({\n      where: { id: emailDelivery.id },\n      data: { sent: true, error: false },\n    })\n  } catch (e) {\n    console.error(\"Sending failed\", e.message)\n    await prisma.emailDelivery.update({\n      where: { id: emailDelivery.id },\n      data: { error: true, error_message: e.message },\n    })\n  }\n}\n\nconst main = async () => {\n  while (true) {\n    const emailsToDeliver = await prisma.emailDelivery.findMany({\n      where: { sent: false, error: false },\n      take: BATCH_SIZE,\n    })\n    if (emailsToDeliver.length > 0) {\n      console.log(\n        `Received a batch of ${emailsToDeliver.length} emails to send.`,\n      )\n    }\n    // No parallelism for now so that we don't accidentally bump into sending limits\n    for (const emailDelivery of emailsToDeliver) {\n      await sendEmail(emailDelivery)\n    }\n    await new Promise((resolve) => setTimeout(resolve, 1000))\n  }\n}\n\nmain()\n"]}