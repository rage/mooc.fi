{"version":3,"file":"seedPoints.js","sourceRoot":"","sources":["../../bin/seedPoints.ts"],"names":[],"mappings":"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","sourcesContent":["import * as faker from \"faker\"\nimport {\n  UserCourseProgressCreateInput,\n  UserCourseSettingCreateInput,\n} from \"@prisma/client\"\nimport prismaClient from \"./lib/prisma\"\n\nconst prisma = prismaClient()\n\n//Generate integer id which is not already taken\nfunction generateUniqueUpstreamId({ ExistingIds }: { ExistingIds: number[] }) {\n  //take the largest possible integer\n  const LargestPossibleUpstreamId = 2147483647\n  let UniqueIntId = 0\n  //Go down from the largest possible integer\n  //until value not already in use is found\n  let i: number\n  for (i = LargestPossibleUpstreamId; i > 0; i--) {\n    if (ExistingIds.indexOf(i) === -1) {\n      UniqueIntId = i\n      return UniqueIntId\n    }\n  }\n\n  return UniqueIntId\n}\n\nfunction generateRandomString() {\n  const randomString =\n    Math.random().toString(36).substring(2, 15) +\n    Math.random().toString(36).substring(2, 15)\n  return randomString\n}\n\nconst addUsers = async () => {\n  //get existing users from database\n  const UsersInDatabase = await prisma.user.findMany()\n  //create a list of upstream ids already in use\n  let UpstreamIdsInUse = UsersInDatabase.map((user) => user.upstream_id)\n  //Generate random data for 100 users\n  //and add them to the database\n  let i = 0\n  while (i < 100) {\n    const first_name = faker.name.firstName()\n    const last_name = faker.name.lastName()\n\n    const newUser = {\n      upstream_id: generateUniqueUpstreamId({ ExistingIds: UpstreamIdsInUse }),\n      first_name,\n      last_name,\n      username: faker.internet.userName(first_name, last_name),\n      email: faker.internet.email(first_name, last_name),\n      administrator: false,\n      student_number: generateRandomString(),\n      real_student_number: generateRandomString(),\n    }\n    //add new upstreamId to ids already in use\n    UpstreamIdsInUse = UpstreamIdsInUse.concat(newUser.upstream_id)\n\n    await prisma.user.create({ data: newUser })\n    i += 1\n  }\n}\n\nconst addServices = async () => {\n  let i = 0\n  while (i < 5) {\n    const newService = {\n      url: generateRandomString(),\n      name: generateRandomString(),\n    }\n    await prisma.service.create({ data: newService })\n    i += 1\n  }\n}\n\n// FIXME: (?) not used anywhere\n/* const addUserCourseServiceProgressess = async ({\n  courseId,\n}: {\n  courseId: string\n}) => {\n  const UsersInDb = await prisma.users({ first: 100 })\n  const ServicesInDb = await prisma.services({ first: 5 })\n  const AllServiceIds = ServicesInDb.map(s => s.id)\n  return await Promise.all(\n    UsersInDb.map(async user => {\n      const ucsp = {\n        user: {\n          connect: {\n            id: user.id,\n          },\n        },\n        course: {\n          connect: {\n            id: courseId,\n          },\n        },\n        service: {\n          connect: {\n            id: AllServiceIds[Math.floor(Math.random() * 5)],\n          },\n        },\n        progress: [\n          {\n            group: \"week1\",\n            max_points: 10,\n            n_points: Math.floor(Math.random() * 10),\n            progress: Math.random(),\n          },\n          {\n            group: \"week2\",\n            max_points: 8,\n            n_points: Math.floor(Math.random() * 8),\n            progress: Math.random(),\n          },\n          {\n            group: \"week3\",\n            max_points: 12,\n            n_points: Math.floor(Math.random() * 12),\n            progress: Math.random(),\n          },\n          {\n            group: \"week4\",\n            max_points: 20,\n            n_points: Math.floor(Math.random() * 20),\n            progress: Math.random(),\n          },\n          {\n            group: \"week5\",\n            max_points: 18,\n            n_points: Math.floor(Math.random() * 18),\n            progress: Math.random(),\n          },\n        ],\n        user_course_progress: {\n          create: {\n            user: {\n              connect: {\n                id: user.id,\n              },\n            },\n            course: {\n              connect: {\n                id: courseId,\n              },\n            },\n            progress: [\n              {\n                group: \"week1\",\n                max_points: 10,\n                n_points: Math.floor(Math.random() * 10),\n                progress: Math.random(),\n              },\n              {\n                group: \"week2\",\n                max_points: 8,\n                n_points: Math.floor(Math.random() * 8),\n                progress: Math.random(),\n              },\n              {\n                group: \"week3\",\n                max_points: 12,\n                n_points: Math.floor(Math.random() * 12),\n                progress: Math.random(),\n              },\n              {\n                group: \"week4\",\n                max_points: 20,\n                n_points: Math.floor(Math.random() * 20),\n                progress: Math.random(),\n              },\n              {\n                group: \"week5\",\n                max_points: 18,\n                n_points: Math.floor(Math.random() * 18),\n                progress: Math.random(),\n              },\n            ],\n          },\n        },\n      }\n      await prisma.createUserCourseServiceProgress(ucsp)\n    }),\n  )\n} */\n\nconst addUserCourseProgressess = async ({ courseId }: { courseId: string }) => {\n  const UsersInDb = await prisma.user.findMany({ take: 100 })\n  return await Promise.all(\n    UsersInDb.map(async (user) => {\n      const ucp: UserCourseProgressCreateInput = {\n        user: {\n          connect: {\n            id: user.id,\n          },\n        },\n        course: {\n          connect: {\n            id: courseId,\n          },\n        },\n        progress: [\n          {\n            group: \"week1\",\n            max_points: 10,\n            n_points: Math.floor(Math.random() * 10),\n            progress: Math.random(),\n          },\n          {\n            group: \"week2\",\n            max_points: 8,\n            n_points: Math.floor(Math.random() * 8),\n            progress: Math.random(),\n          },\n          {\n            group: \"week3\",\n            max_points: 12,\n            n_points: Math.floor(Math.random() * 12),\n            progress: Math.random(),\n          },\n          {\n            group: \"week4\",\n            max_points: 20,\n            n_points: Math.floor(Math.random() * 20),\n            progress: Math.random(),\n          },\n          {\n            group: \"week5\",\n            max_points: 18,\n            n_points: Math.floor(Math.random() * 18),\n            progress: Math.random(),\n          },\n        ],\n      }\n\n      return await prisma.userCourseProgress.create({ data: ucp })\n    }),\n  )\n}\n\nconst addUserCourseSettingses = async ({ courseId }: { courseId: string }) => {\n  const UsersInDb = await prisma.user.findMany({ take: 100 })\n  return await Promise.all(\n    UsersInDb.map(async (user) => {\n      const ucs: UserCourseSettingCreateInput = {\n        user: {\n          connect: {\n            id: user.id,\n          },\n        },\n        course: {\n          connect: {\n            id: courseId,\n          },\n        },\n        language: \"fi_FI\",\n        country: \"Finland\",\n        research: true,\n        marketing: false,\n        course_variant: null,\n        other: null,\n      }\n      return await prisma.userCourseSetting.create({ data: ucs })\n    }),\n  )\n}\n\nconst seedPointsData = async () => {\n  const course = await prisma.course.findOne({\n    where: { slug: \"elements-of-ai\" },\n  })\n  console.log(\"course\", course)\n  await addUsers()\n  await addServices()\n  course && (await addUserCourseProgressess({ courseId: course.id }))\n  course && (await addUserCourseSettingses({ courseId: course.id }))\n}\n\nseedPointsData()\n"]}