{"version":3,"file":"EmailTemplater.js","sourceRoot":"","sources":["../../../../../bin/kafkaConsumer/common/EmailTemplater/EmailTemplater.ts"],"names":[],"mappings":";;;;AAAA,+CAAsC;AACtC,6DAAwC;AAMxC;IASE,wBAAY,aAA4B,EAAE,IAAU,EAAE,MAAoB;QAR1E,sBAAiB,GAA0B;YACzC,eAAe,EAAE,SAAS,CAAC,cAAc;YACzC,KAAK,EAAE,SAAS,CAAC,KAAK;SACvB,CAAA;QAMC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAA;QAClC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,IAAI,CAAC,OAAO,EAAE,CAAA;IAChB,CAAC;IAEK,gCAAO,GAAb;;;;;;;wBACQ,QAAQ,SAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,mCAAI,EAAE,CAAA;wBAClD,qBAAM,IAAI,CAAC,mBAAmB,EAAE,EAAA;;wBAAhC,SAAgC,CAAA;wBAChC,sBAAO,sBAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,iBAAiB,CAAC,EAAA;;;;KAChD;IAEO,gCAAO,GAAf;QAAA,iBAUC;QATC,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,UAAC,CAAC;YAC3D,KAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,GAAa,CACpC,IAA2B,KAAI,CAAC,iBAAiB,CAAC,CAAC,CAAE,CAAC;gBACpD,aAAa,EAAE,KAAI,CAAC,aAAa;gBACjC,IAAI,EAAE,KAAI,CAAC,IAAI;gBACf,MAAM,EAAE,KAAI,CAAC,MAAM;aACpB,CAAC,CACH,CAAA;QACH,CAAC,CAAC,CAAA;IACJ,CAAC;IAEa,4CAAmB,GAAjC;;;;;4BACE,qBAAM,IAAI,CAAC,YAAY,CACrB,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAClD,UAAO,CAAS;;;;;wCACd,KAAA,IAAI,CAAC,iBAAiB,CAAA;wCAAC,KAAA,CAAC,CAAA;wCACtB,qBAAiB,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAE,CAAC,OAAO,EAAE,EAAA;;wCADvD,MAAyB,GAAW,CAClC,SAAqD,CACtD,CAAA;;;;6BACF,CACF,EAAA;;wBAPD,SAOC,CAAA;;;;;KACF;IAEK,qCAAY,GAAlB,UAAmB,KAAY,EAAE,QAAkB;;;;;;wBACxC,KAAK,GAAG,CAAC;;;6BAAE,CAAA,KAAK,GAAG,KAAK,CAAC,MAAM,CAAA;wBACtC,qBAAM,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,EAAA;;wBAA1C,SAA0C,CAAA;;;wBADF,KAAK,EAAE,CAAA;;;;;;KAGlD;IACH,qBAAC;AAAD,CAAC,AAlDD,IAkDC;AAlDY,wCAAc","sourcesContent":["import { render } from \"micromustache\"\nimport * as Templates from \"./templates\"\nimport { PrismaClient, EmailTemplate, User } from \"@prisma/client\"\nimport { KeyWordToTemplateType } from \"./types/KeywordToTemplateType\"\nimport Template from \"./types/Template\"\nimport ITemplateConstructor from \"./types/ITemplateConstructor\"\n\nexport class EmailTemplater {\n  keyWordToTemplate: KeyWordToTemplateType = {\n    completion_link: Templates.CompletionLink,\n    grade: Templates.Grade,\n  }\n  emailTemplate: EmailTemplate\n  user: User\n  prisma: PrismaClient\n\n  constructor(emailTemplate: EmailTemplate, user: User, prisma: PrismaClient) {\n    this.emailTemplate = emailTemplate\n    this.user = user\n    this.prisma = prisma\n    this.prepare()\n  }\n\n  async resolve(): Promise<string> {\n    const template = this.emailTemplate.txt_body ?? \"\"\n    await this.resolveAllTemplates()\n    return render(template, this.keyWordToTemplate)\n  }\n\n  private prepare() {\n    Object.getOwnPropertyNames(this.keyWordToTemplate).forEach((p) => {\n      this.keyWordToTemplate[p] = <Template>(\n        new (<ITemplateConstructor>this.keyWordToTemplate[p])({\n          emailTemplate: this.emailTemplate,\n          user: this.user,\n          prisma: this.prisma,\n        })\n      )\n    })\n  }\n\n  private async resolveAllTemplates(): Promise<void> {\n    await this.asyncForEach(\n      Object.getOwnPropertyNames(this.keyWordToTemplate),\n      async (p: string) => {\n        this.keyWordToTemplate[p] = <string>(\n          await (<Template>this.keyWordToTemplate[p]).resolve()\n        )\n      },\n    )\n  }\n\n  async asyncForEach(array: any[], callback: Function) {\n    for (let index = 0; index < array.length; index++) {\n      await callback(array[index], index, array)\n    }\n  }\n}\n"]}