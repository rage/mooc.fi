{"version":3,"file":"saveToDB.js","sourceRoot":"","sources":["../../../../bin/kafkaConsumer/exerciseConsumer/saveToDB.ts"],"names":[],"mappings":"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","sourcesContent":["import { Message, ExerciseData } from \"./interfaces\"\nimport { PrismaClient } from \"@prisma/client\"\nimport { DateTime } from \"luxon\"\nimport winston = require(\"winston\")\n\nexport const saveToDatabase = async (\n  message: Message,\n  prisma: PrismaClient,\n  logger: winston.Logger,\n): Promise<Boolean> => {\n  const existingCourse = await prisma.course.findOne({\n    where: { id: message.course_id },\n  })\n  if (!existingCourse) {\n    logger.error(\"given course does not exist\")\n    return false\n  }\n  message.data.forEach((exercise) => {\n    handleExercise(\n      exercise,\n      message.course_id,\n      DateTime.fromISO(message.timestamp),\n      message.service_id,\n      logger,\n      prisma,\n    )\n  })\n\n  await prisma.exercise.updateMany({\n    where: {\n      AND: {\n        course_id: message.course_id,\n        service_id: message.service_id,\n        custom_id: { not: { in: message.data.map((p) => p.id) } },\n      },\n    },\n    data: {\n      deleted: true,\n    },\n  })\n\n  logger.info(\"Saved to DB succesfully\")\n  return true\n}\n\nconst handleExercise = async (\n  exercise: ExerciseData,\n  course_id: string,\n  timestamp: DateTime,\n  service_id: string,\n  logger: winston.Logger,\n  prisma: PrismaClient,\n) => {\n  const existingExercises = await prisma.exercise.findMany({\n    where: {\n      course_id: course_id,\n      service_id: service_id,\n      custom_id: exercise.id,\n    },\n  })\n  if (existingExercises.length > 0) {\n    const oldExercises = await prisma.exercise.findMany({\n      where: {\n        course_id: course_id,\n        service_id: service_id,\n        custom_id: exercise.id,\n      },\n    })\n\n    const oldExercise = oldExercises[0]\n    // FIXME: well this is weird\n    if (\n      DateTime.fromISO(oldExercise.timestamp?.toISOString() ?? \"\") > timestamp\n    ) {\n      logger.warn(\n        \"Timestamp is older than on existing exercise on \" +\n          JSON.stringify(exercise) +\n          \"skipping this exercise\",\n      )\n      return\n    }\n    await prisma.exercise.update({\n      where: { id: oldExercise.id },\n      data: {\n        name: exercise.name,\n        custom_id: exercise.id,\n        part: Number(exercise.part),\n        section: Number(exercise.section),\n        max_points: Number(exercise.max_points),\n        timestamp: timestamp.toJSDate(),\n        deleted: false,\n      },\n    })\n  } else {\n    await prisma.exercise.create({\n      data: {\n        name: exercise.name,\n        custom_id: exercise.id,\n        part: Number(exercise.part),\n        section: Number(exercise.section),\n        max_points: Number(exercise.max_points),\n        course: { connect: { id: course_id } },\n        service: { connect: { id: service_id } },\n        timestamp: timestamp.toJSDate(),\n      },\n    })\n  }\n}\n"]}