{"version":3,"file":"kafkaConsumer.js","sourceRoot":"","sources":["../../../../bin/kafkaConsumer/userPointsConsumer/kafkaConsumer.ts"],"names":[],"mappings":";;;AAAA,OAAO,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC;IAC5B,gBAAgB,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY;CACxD,CAAC,CAAA;AACF,6DAAiD;AAEjD,0DAAqC;AACrC,uEAAmC;AAEnC,yDAAuD;AAEvD,uCAA6C;AAC7C,uCAA2C;AAC3C,oEAA2C;AAC3C,oEAA2C;AAE3C,IAAM,UAAU,GAAG,CAAC,wBAAM,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAA;AAE3D,IAAM,KAAK,GAAG,IAAI,uBAAK,EAAE,CAAA;AACzB,IAAM,MAAM,GAAG,mBAAY,EAAE,CAAA;AAE7B,IAAM,MAAM,GAAG,mBAAY,CAAC,EAAE,OAAO,EAAE,4BAA4B,EAAE,CAAC,CAAA;AAEtE,IAAM,SAAS,GAAG,UAAC,GAAQ,EAAE,eAAoB;IAC/C,IAAI,GAAG,EAAE;QACP,MAAM,CAAC,KAAK,CAAC,kBAAkB,GAAG,GAAG,CAAC,CAAA;KACvC;SAAM;QACL,MAAM,CAAC,IAAI,CAAC,6BAA6B,GAAG,eAAe,CAAC,CAAA;KAC7D;AACH,CAAC,CAAA;AAED,IAAM,QAAQ,GAAG,IAAI,KAAK,CAAC,aAAa,CACtC;IACE,UAAU,EAAE,OAAO;IACnB,sBAAsB,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU;IAC9C,gBAAgB,EAAE,SAAS;IAC3B,oBAAoB,EAAE,KAAK;IAC3B,+BAA+B,EAAE,YAAY;CAC9C,EACD,EAAE,mBAAmB,EAAE,UAAU,EAAE,CACpC,CAAA;AAED,QAAQ,CAAC,OAAO,EAAE,CAAA;AAElB,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE;IACnB,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC,CAAA;IAC9B,IAAM,YAAY,GAAG,UAAO,KAAU,EAAE,QAAa;;;;oBACnD,IAAI,KAAK,EAAE;wBACT,MAAM,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAA;wBAC5C,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;qBACjB;yBACG,CAAA,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAA,EAAnB,wBAAmB;oBACrB,qBAAM,6BAAa,CAAU;4BAC3B,YAAY,EAAE,QAAQ,CAAC,CAAC,CAAC;4BACzB,KAAK,OAAA;4BACL,MAAM,QAAA;4BACN,QAAQ,UAAA;4BACR,MAAM,QAAA;4BACN,gBAAgB,6BAAA;4BAChB,cAAc,2BAAA;yBACf,CAAC,EAAA;;oBARF,SAQE,CAAA;oBACF,YAAY,CAAC;wBACX,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE,YAAY,CAAC,CAAA;oBACnC,CAAC,CAAC,CAAA;;;oBAEF,UAAU,CAAC;wBACT,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE,YAAY,CAAC,CAAA;oBACnC,CAAC,EAAE,EAAE,CAAC,CAAA;;;;;SAET,CAAA;IACD,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE,YAAY,CAAC,CAAA;AACnC,CAAC,CAAC,CAAA;AAEF,QAAQ,CAAC,EAAE,CAAC,aAAa,EAAE,UAAC,KAAK;IAC/B,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;IACnB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;AAClB,CAAC,CAAC,CAAA;AAEF,QAAQ,CAAC,EAAE,CAAC,WAAW,EAAE,UAAU,GAAG;IACpC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;AAClB,CAAC,CAAC,CAAA","sourcesContent":["require(\"dotenv-safe\").config({\n  allowEmptyValues: process.env.NODE_ENV === \"production\",\n})\nimport { Mutex } from \"../../lib/await-semaphore\"\n\nimport * as Kafka from \"node-rdkafka\"\nimport config from \"../kafkaConfig\"\n\nimport { handleMessage } from \"../common/handleMessage\"\nimport { Message } from \"./interfaces\"\nimport { MessageYupSchema } from \"./validate\"\nimport { saveToDatabase } from \"./saveToDB\"\nimport prismaClient from \"../../lib/prisma\"\nimport sentryLogger from \"../../lib/logger\"\n\nconst TOPIC_NAME = [config.user_points_consumer.topic_name]\n\nconst mutex = new Mutex()\nconst prisma = prismaClient()\n\nconst logger = sentryLogger({ service: \"kafka-consumer-user-points\" })\n\nconst logCommit = (err: any, topicPartitions: any) => {\n  if (err) {\n    logger.error(\"Error in commit:\" + err)\n  } else {\n    logger.info(\"Committed. topicPartitions:\" + topicPartitions)\n  }\n}\n\nconst consumer = new Kafka.KafkaConsumer(\n  {\n    \"group.id\": \"kafka\",\n    \"metadata.broker.list\": process.env.KAFKA_HOST,\n    offset_commit_cb: logCommit,\n    \"enable.auto.commit\": false,\n    \"partition.assignment.strategy\": \"roundrobin\",\n  },\n  { \"auto.offset.reset\": \"earliest\" },\n)\n\nconsumer.connect()\n\nconsumer.on(\"ready\", () => {\n  consumer.subscribe(TOPIC_NAME)\n  const consumerImpl = async (error: any, messages: any) => {\n    if (error) {\n      logger.error(\"Error while consuming\", error)\n      process.exit(-1)\n    }\n    if (messages.length > 0) {\n      await handleMessage<Message>({\n        kafkaMessage: messages[0],\n        mutex,\n        logger,\n        consumer,\n        prisma,\n        MessageYupSchema,\n        saveToDatabase,\n      })\n      setImmediate(() => {\n        consumer.consume(1, consumerImpl)\n      })\n    } else {\n      setTimeout(() => {\n        consumer.consume(1, consumerImpl)\n      }, 10)\n    }\n  }\n  consumer.consume(1, consumerImpl)\n})\n\nconsumer.on(\"event.error\", (error) => {\n  logger.error(error)\n  process.exit(-1)\n})\n\nconsumer.on(\"event.log\", function (log) {\n  console.log(log)\n})\n"]}