{"version":3,"file":"saveToDB.js","sourceRoot":"","sources":["../../../../bin/kafkaConsumer/userPointsConsumer/saveToDB.ts"],"names":[],"mappings":"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","sourcesContent":["import { Message } from \"./interfaces\"\nimport { PrismaClient, ExerciseCompletion, User } from \"@prisma/client\"\nimport { DateTime } from \"luxon\"\nimport winston = require(\"winston\")\nimport { CheckCompletion } from \"../userCourseProgressConsumer/generateUserCourseProgress\"\nimport knex from \"knex\"\nimport getUserFromTMC from \"../common/getUserFromTMC\"\n\nconst Knex = knex({\n  client: \"pg\",\n  connection: {\n    host: process.env.DB_HOST,\n    port: Number(process.env.DB_PORT),\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME,\n  },\n  searchPath:\n    // TODO: should this use the env search path?\n    process.env.NODE_ENV === \"production\"\n      ? [\"moocfi$production\"]\n      : [\"default$default\"],\n})\n\n// @ts-ignore: not used\nconst isUserInDB = async (user_id: number) => {\n  return await Knex(\"user\").where(\"upstream_id\", \"=\", user_id)\n}\n\nexport const saveToDatabase = async (\n  message: Message,\n  prisma: PrismaClient,\n  logger: winston.Logger,\n): Promise<Boolean> => {\n  logger.info(\"Parsing timestamp\")\n  const timestamp: DateTime = DateTime.fromISO(message.timestamp)\n\n  logger.info(`Checking if user ${message.user_id} exists.`)\n\n  let user: User | null\n\n  user = (await Knex(\"user\").where(\"upstream_id\", message.user_id).limit(1))[0]\n\n  if (!user) {\n    try {\n      user = await getUserFromTMC(prisma, message.user_id)\n    } catch (e) {\n      user = (\n        await Knex(\"user\").where(\"upstream_id\", message.user_id).limit(1)\n      )[0]\n      if (!user) {\n        throw e\n      }\n      console.log(\"Mitigated race condition with user imports\")\n    }\n  }\n\n  const course = await prisma.course.findOne({\n    where: { id: message.course_id },\n  })\n\n  if (!user || !course) {\n    logger.error(\"Invalid user or course\")\n    return false\n  }\n\n  logger.info(\"Checking if a exercise exists with id \" + message.exercise_id)\n  const existingExercises = await prisma.exercise.findMany({\n    where: { custom_id: message.exercise_id },\n  })\n  if (existingExercises.length < 1) {\n    logger.error(`Given exercise does not exist: id ${message.exercise_id}`)\n    return false\n  }\n  logger.info(\"Getting the exercise\")\n  const exercises = await prisma.exercise.findMany({\n    take: 1,\n    where: {\n      custom_id: message.exercise_id,\n    },\n  })\n\n  const exercise = exercises[0]\n\n  logger.info(\"Getting the completion\")\n  const exerciseCompleteds = await prisma.exerciseCompletion.findMany({\n    take: 1,\n    where: {\n      exercise: {\n        custom_id: message.exercise_id,\n      },\n      user: { upstream_id: Number(message.user_id) },\n    },\n    orderBy: { timestamp: \"desc\" },\n  })\n  const exerciseCompleted = exerciseCompleteds[0]\n\n  // @ts-ignore: value not used\n  let savedExerciseCompletion: ExerciseCompletion\n\n  if (!exerciseCompleted) {\n    logger.info(\"No previous completion, creating a new one\")\n    savedExerciseCompletion = await prisma.exerciseCompletion.create({\n      data: {\n        exercise: {\n          connect: { id: exercise.id },\n        },\n        user: {\n          connect: { upstream_id: Number(message.user_id) },\n        },\n        n_points: message.n_points,\n        completed: message.completed,\n        exercise_completion_required_actions: {\n          create: message.required_actions.map((ra) => {\n            return {\n              value: ra,\n            }\n          }),\n        },\n        timestamp: message.timestamp,\n      },\n    })\n  } else {\n    logger.info(\"Updating previous completion\")\n    const oldTimestamp = DateTime.fromISO(\n      exerciseCompleted?.timestamp?.toISOString() ?? \"\",\n    )\n    if (timestamp <= oldTimestamp) {\n      logger.error(\"Timestamp older than in DB, aborting\")\n      return false\n    }\n    savedExerciseCompletion = await prisma.exerciseCompletion.update({\n      where: { id: exerciseCompleted.id },\n      data: {\n        n_points: Number(message.n_points),\n        completed: message.completed,\n        exercise_completion_required_actions: {\n          create: message.required_actions.map((ra) => {\n            return {\n              value: ra,\n            }\n          }),\n        },\n        timestamp: message.timestamp,\n      },\n    })\n  }\n  await CheckCompletion(user, course)\n  logger.info(\"Saved to DB succesfully\")\n  return true\n}\n"]}