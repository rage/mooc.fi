{"version":3,"file":"generateUserCourseProgress.js","sourceRoot":"","sources":["../../../../bin/kafkaConsumer/userCourseProgressConsumer/generateUserCourseProgress.ts"],"names":[],"mappings":"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","sourcesContent":["require(\"dotenv-safe\").config({\n  allowEmptyValues: process.env.NODE_ENV === \"production\",\n})\nimport {\n  UserCourseSetting,\n  User,\n  Course,\n  UserCourseProgress,\n  EmailTemplate,\n  UserCourseServiceProgress,\n} from \"@prisma/client\"\nimport Knex from \"../../../services/knex\"\nimport * as nodemailer from \"nodemailer\"\nimport SMTPTransport = require(\"nodemailer/lib/smtp-transport\")\nimport { EmailTemplater } from \"../common/EmailTemplater/EmailTemplater\"\nimport { pushMessageToClient, MessageType } from \"../../../wsServer\"\nimport prismaClient from \"../../lib/prisma\"\n\nconst prisma = prismaClient()\n\nconst email_host = process.env.SMTP_HOST\nconst email_user = process.env.SMTP_USER\nconst email_pass = process.env.SMTP_PASS\nconst email_port = process.env.SMTP_PORT\nconst email_from = process.env.SMTP_FROM\n\ninterface Props {\n  user: User\n  course: Course\n  userCourseProgress: UserCourseProgress\n}\n\ninterface ServiceProgressPartType {\n  max_points: number\n  n_points: number\n  group: string\n  progress: number\n}\n\ninterface ServiceProgressType extends Array<ServiceProgressPartType> {\n  [index: number]: ServiceProgressPartType\n}\n\n/******************************************************/\n\nexport const generateUserCourseProgress = async ({\n  user,\n  course,\n  userCourseProgress,\n}: Props) => {\n  const combined = await GetCombinedUserCourseProgress(user, course)\n  await CheckCompletion(user, course, combined)\n  await prisma.userCourseProgress.update({\n    where: { id: userCourseProgress.id },\n    data: {\n      progress: combined.progress as any, // errors unless typed as any\n      max_points: combined.total_max_points,\n      n_points: combined.total_n_points,\n    },\n  })\n}\n\n/******************************************************/\n\nexport async function sendEmailTemplateToUser(\n  user: User,\n  template: EmailTemplate,\n) {\n  const options: SMTPTransport.Options = {\n    host: email_host,\n    port: parseInt(email_port || \"\"),\n    secure: false, // true for 465, false for other ports\n    auth: {\n      user: email_user, // generated ethereal user\n      pass: email_pass, // generated ethereal password\n    },\n  }\n  let transporter = nodemailer.createTransport(options)\n  // send mail with defined transport object\n  let info = await transporter.sendMail({\n    from: email_from, // sender address\n    to: user.email, // list of receivers\n    subject: template.title ?? undefined, // Subject line\n    text: await ApplyTemplate(template, user), // plain text body\n    html: template.html_body ?? undefined, // html body\n  })\n  console.log(\"Message sent: %s\", info.messageId)\n  // Message sent: <b658f8ca-6296-ccf4-8306-87d57a0b4321@example.com>\n}\n\nconst ApplyTemplate = async (email_template: EmailTemplate, user: User) => {\n  const templater = new EmailTemplater(email_template, user, prisma)\n  return await templater.resolve()\n}\n\nconst GetCombinedUserCourseProgress = async (\n  user: User,\n  course: Course,\n): Promise<CombinedUserCourseProgress> => {\n  /* Get UserCourseServiceProgresses */\n  const userCourseServiceProgresses = await prisma.userCourseServiceProgress.findMany(\n    {\n      where: {\n        user_id: user?.id,\n        course_id: course?.id,\n      },\n    },\n  )\n\n  /*\n   * Get rid of everything we dont neeed. After this the array looks like this:\n   * [(serviceProgress)[[part1],[part2], ...], (anotherServiceProgress)[part1], [part2], ...]\n   * It is still 2-dimensional!\n   */\n  const progresses: ServiceProgressType[] = userCourseServiceProgresses.map(\n    (entry: UserCourseServiceProgress) => entry.progress as any, // type error otherwise\n  )\n\n  let combined = new CombinedUserCourseProgress()\n  progresses.forEach((entry) => {\n    entry.forEach((p: ServiceProgressPartType) => {\n      combined.addProgress(p)\n    })\n  })\n\n  return combined\n}\n\nconst CheckRequiredExerciseCompletions = async (\n  user: User,\n  course: Course,\n): Promise<boolean> => {\n  if (course.exercise_completions_needed) {\n    const exercise_completions = await Knex(\"exercise_completion\")\n      .countDistinct(\"exercise_completion.exercise_id\")\n      .join(\"exercise\", { \"exercise_completion.exercise_id\": \"exercise.id\" })\n      .where(\"exercise.course_id\", course.id)\n      .andWhere(\"exercise_completion.user_id\", user.id)\n      .andWhere(\"exercise_completion.completed\", true)\n      .andWhereNot(\"exercise.max_points\", 0)\n\n    return exercise_completions[0].count >= course.exercise_completions_needed\n  }\n  return true\n}\n\nconst GetUserCourseSettings = async (\n  user: User,\n  course: Course,\n): Promise<UserCourseSetting> => {\n  let userCourseSetting: UserCourseSetting =\n    (\n      await prisma.userCourseSetting.findMany({\n        where: {\n          user_id: user.id,\n          course_id: course.id,\n        },\n      })\n    )?.[0] || null\n\n  if (!userCourseSetting) {\n    const inheritCourse = await prisma.course\n      .findOne({ where: { id: course.id } })\n      .inherit_settings_from()\n    if (inheritCourse) {\n      userCourseSetting =\n        (\n          await prisma.userCourseSetting.findMany({\n            where: {\n              user_id: user.id,\n              course_id: inheritCourse.id,\n            },\n          })\n        )[0] || null\n    }\n  }\n  return userCourseSetting\n}\n\nconst languageCodeMapping: { [key: string]: string } = {\n  fi: \"fi_FI\",\n  en: \"en_US\",\n  se: \"sv_SE\",\n  ee: \"et_EE\",\n  de: \"de_DE\",\n  fr: \"fr_FR\",\n  it: \"it_IT\",\n  hu: \"hu_HU\",\n  lv: \"lv_LV\",\n  da: \"da_DK\",\n  nl: \"nl_NL\",\n  hr: \"hr_HR\",\n  lt: \"lt_LT\",\n  ga: \"ga_IE\",\n  bg: \"bg_BG\",\n  cs: \"cs_CZ\",\n  el: \"el_GR\",\n  mt: \"mt_MT\",\n  pt: \"pt_PT\",\n  ro: \"ro_RO\",\n  sk: \"sk_SK\",\n  sl: \"sl_SI\",\n  no: \"nb_NO\",\n}\n\nexport const CheckCompletion = async (\n  user: User,\n  course: Course,\n  combinedProgress?: CombinedUserCourseProgress,\n) => {\n  let combined = combinedProgress\n\n  if (!combined) {\n    combined = await GetCombinedUserCourseProgress(user, course)\n  }\n\n  const requiredExerciseCompletions = await CheckRequiredExerciseCompletions(\n    user,\n    course,\n  )\n  const userCourseSettings = await GetUserCourseSettings(user, course)\n\n  if (\n    course.automatic_completions &&\n    combined.total_n_points >= (course.points_needed ?? 9999999) &&\n    requiredExerciseCompletions\n  ) {\n    let handlerCourse = course\n\n    const otherHandlerCourse = await prisma.course\n      .findOne({ where: { id: course.id } })\n      .completions_handled_by()\n\n    if (otherHandlerCourse) {\n      handlerCourse = otherHandlerCourse\n    }\n\n    const completions = await prisma.completion.findMany({\n      where: {\n        user_id: user.id,\n        course_id: handlerCourse?.id,\n      },\n    })\n    if (completions.length < 1) {\n      await prisma.completion.create({\n        data: {\n          course: { connect: { id: handlerCourse.id } },\n          email: user.email,\n          user: { connect: { id: user.id } },\n          user_upstream_id: user.upstream_id,\n          student_number: user.student_number,\n          completion_language: userCourseSettings?.language\n            ? languageCodeMapping[userCourseSettings.language]\n            : \"unknown\",\n          eligible_for_ects:\n            handlerCourse.automatic_completions_eligible_for_ects,\n          completion_date: new Date(),\n        },\n      })\n      pushMessageToClient(\n        user.upstream_id,\n        course.id,\n        MessageType.COURSE_CONFIRMED,\n      )\n      const template = await prisma.course\n        .findOne({ where: { id: course.id } })\n        .completion_email()\n      if (template) {\n        await sendEmailTemplateToUser(user, template)\n      }\n    }\n  }\n}\n\nclass CombinedUserCourseProgress {\n  public progress: ServiceProgressPartType[] = []\n  public total_max_points = 0\n  public total_n_points = 0\n\n  public addProgress(newProgress: ServiceProgressPartType) {\n    this.total_max_points += newProgress.max_points\n    this.total_n_points += newProgress.n_points\n    let index = this.groupIndex(newProgress.group)\n    if (index < 0) {\n      this.progress.push(newProgress)\n    } else {\n      this.addToExistingProgress(newProgress, index)\n    }\n  }\n\n  private groupIndex(part: string) {\n    for (let i = 0; i < this.progress.length; i++) {\n      if (this.progress[i].group == part) return i\n    }\n    return -1\n  }\n\n  private addToExistingProgress(\n    progress: ServiceProgressPartType,\n    index: number,\n  ) {\n    this.progress[index].max_points += progress.max_points\n    this.progress[index].n_points += progress.n_points\n    this.progress[index].progress =\n      this.progress[index].n_points / this.progress[index].max_points\n  }\n}\n"]}