{"version":3,"file":"saveToDB.js","sourceRoot":"","sources":["../../../../bin/kafkaConsumer/userCourseProgressConsumer/saveToDB.ts"],"names":[],"mappings":"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","sourcesContent":["import { Message } from \"./interfaces\"\nimport { DateTime } from \"luxon\"\nimport {\n  PrismaClient,\n  User,\n  UserCourseProgress,\n  UserCourseServiceProgress,\n} from \"@prisma/client\"\nimport { generateUserCourseProgress } from \"./generateUserCourseProgress\"\nimport { Logger } from \"winston\"\nimport { pushMessageToClient, MessageType } from \"../../../wsServer\"\nimport getUserFromTMC from \"../common/getUserFromTMC\"\n\nimport _KnexConstructor from \"knex\"\n\nconst Knex = _KnexConstructor({\n  client: \"pg\",\n  connection: {\n    host: process.env.DB_HOST,\n    port: Number(process.env.DB_PORT),\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_NAME,\n  },\n  searchPath:\n    process.env.NODE_ENV === \"production\"\n      ? [\"moocfi$production\"]\n      : [\"default$default\"],\n})\n\nexport const saveToDatabase = async (\n  message: Message,\n  prisma: PrismaClient,\n  logger: Logger,\n) => {\n  const timestamp: DateTime = DateTime.fromISO(message.timestamp)\n\n  let user: User | null\n\n  user = (await Knex(\"user\").where(\"upstream_id\", message.user_id).limit(1))[0]\n\n  if (!user) {\n    try {\n      user = await getUserFromTMC(prisma, message.user_id)\n    } catch (e) {\n      user = (\n        await Knex(\"user\").where(\"upstream_id\", message.user_id).limit(1)\n      )[0]\n      if (!user) {\n        throw e\n      }\n      console.log(\"Mitigated race condition with user imports\")\n    }\n  }\n\n  const course = await prisma.course.findOne({\n    where: { id: message.course_id },\n  })\n\n  if (!user || !course) {\n    logger.error(\"Invalid user or course\")\n    return -1\n  }\n\n  let userCourseProgress = (\n    await Knex<unknown, UserCourseProgress[]>(\"user_course_progress\")\n      .where(\"user_id\", user?.id)\n      .where(\"course_id\", message.course_id)\n      .limit(1)\n  )[0]\n\n  if (!userCourseProgress) {\n    userCourseProgress = await prisma.userCourseProgress.create({\n      data: {\n        course: {\n          connect: { id: message.course_id },\n        },\n        user: { connect: { id: user?.id } },\n        progress: message.progress as any, // type error without any\n      },\n    })\n  }\n\n  const userCourseServiceProgress = (\n    await Knex<unknown, UserCourseServiceProgress[]>(\n      \"user_course_service_progress\",\n    )\n      .where(\"user_id\", user?.id)\n      .where(\"course_id\", message.course_id)\n      .where(\"service_id\", message.service_id)\n      .limit(1)\n  )[0]\n\n  if (userCourseServiceProgress) {\n    // FIXME: weird\n    const oldTimestamp = DateTime.fromISO(\n      userCourseServiceProgress?.timestamp?.toISOString() ?? \"\",\n    )\n\n    if (timestamp < oldTimestamp) {\n      logger.error(\"Timestamp older than in DB, aborting\")\n      return false\n    }\n    await prisma.userCourseServiceProgress.update({\n      where: {\n        id: userCourseServiceProgress.id,\n      },\n      data: {\n        progress: message.progress as any, // type error without any\n        timestamp: timestamp.toJSDate(),\n      },\n    })\n  } else {\n    await prisma.userCourseServiceProgress.create({\n      data: {\n        user: { connect: { id: user?.id } },\n        course: {\n          connect: { id: message.course_id },\n        },\n        service: {\n          connect: { id: message.service_id },\n        },\n        progress: message.progress as any, // type error without any\n        user_course_progress: {\n          connect: { id: userCourseProgress.id },\n        },\n        timestamp: timestamp.toJSDate(),\n      },\n    })\n  }\n\n  await generateUserCourseProgress({\n    user,\n    course,\n    userCourseProgress,\n  })\n\n  pushMessageToClient(\n    message.user_id,\n    message.course_id,\n    MessageType.PROGRESS_UPDATED,\n  )\n  logger.info(\"Saved to DB succesfully\")\n  return true\n}\n"]}