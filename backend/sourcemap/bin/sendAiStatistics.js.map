{"version":3,"file":"sendAiStatistics.js","sourceRoot":"","sources":["../../bin/sendAiStatistics.ts"],"names":[],"mappings":"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","sourcesContent":["require(\"dotenv-safe\").config({\n  allowEmptyValues: process.env.NODE_ENV === \"production\",\n})\nimport SlackPoster from \"../services/slackPoster\"\nimport Knex from \"../services/knex\"\nimport prismaClient from \"./lib/prisma\"\n\nconst slackPoster: SlackPoster = new SlackPoster()\nconst url: string | undefined = process.env.AI_SLACK_URL\n\nif (!url) {\n  throw \"no AI_SLACK_URL env variable\"\n}\n\nlet data = { text: \"\" }\nconst prisma = prismaClient()\n\ninterface langProps {\n  language: string\n  completion_language: string\n  country: string\n  langName: string\n}\n\nconst langArr: langProps[] = [\n  {\n    language: \"se\",\n    completion_language: \"sv_SE\",\n    country: \"Sweden\",\n    langName: \"Swedish\",\n  },\n  {\n    language: \"fi\",\n    completion_language: \"fi_FI\",\n    country: \"Finland\",\n    langName: \"Finnish\",\n  },\n  {\n    language: \"ee\",\n    completion_language: \"et_EE\",\n    country: \"Estonia\",\n    langName: \"Estonian\",\n  },\n  {\n    language: \"de\",\n    completion_language: \"de_DE\",\n    country: \"Germany\",\n    langName: \"German\",\n  },\n  {\n    language: \"no\",\n    completion_language: \"nb_NO\",\n    country: \"Norway\",\n    langName: \"Norwegian\",\n  },\n  {\n    language: \"lv\",\n    completion_language: \"lv_LV\",\n    country: \"Latvia\",\n    langName: \"Latvian\",\n  },\n]\n\nconst getDataByLanguage = async (langProps: langProps) => {\n  const totalByLang = await prisma.userCourseSetting.findMany({\n    where: {\n      language: langProps.language,\n      course: { slug: \"elements-of-ai\" },\n    },\n  })\n  const completionsByLang = await prisma.completion.findMany({\n    where: {\n      course: { slug: \"elements-of-ai\" },\n      completion_language: langProps.completion_language,\n    },\n  })\n  const englishInLang = await prisma.userCourseSetting.findMany({\n    where: {\n      country: langProps.country,\n      language: \"en\",\n    },\n  })\n  const now = new Date()\n  return `\\`\\`\\`Stats ${now.getDate()}.${\n    now.getMonth() + 1\n  }.${now.getFullYear()}:\n\n  1) ${totalByLang.length} registered students in the ${\n    langProps.langName\n  } version\n  2) of these ${completionsByLang.length} have completed the course.\n  3) ${\n    englishInLang.length\n  } people registered for the English course residing in ${langProps.country}.\n\n  In total: ${totalByLang.length} + ${englishInLang.length} = ${\n    totalByLang.length + englishInLang.length\n  }\\`\\`\\` `\n}\n\n// const getGlobalStats = async () => {\n//   const totalUsers = await prisma.userCourseSettingses({\n//     where: {\n//       course: { slug: \"elements-of-ai\" },\n//     },\n//   })\n//   const totalCompletions = await prisma.completions({\n//     where: {\n//       course: { slug: \"elements-of-ai\" },\n//     },\n//   })\n\n//   const now = new Date()\n//   return `\\`\\`\\`Stats ${now.getDate()}.${now.getMonth() +\n//     1}.${now.getFullYear()}:\n\n//   1) ${totalUsers.length} registered students in all versions\n//   2) of these ${totalCompletions.length} have completed the course.\\`\\`\\` `\n// }\n\nconst getGlobalStats = async (): Promise<string> => {\n  const course = await Knex.select(\"id\")\n    .from(\"course\")\n    .where({ slug: \"elements-of-ai\" })\n  const totalUsers = (\n    await Knex.count()\n      .from(\"user_course_setting\")\n      .where({ course_id: course[0].id })\n  )[0].count\n  const totalCompletions = (\n    await Knex.count().from(\"completion\").where({ course_id: course[0].id })\n  )[0].count\n  const now = new Date()\n  return `\\`\\`\\`Stats ${now.getDate()}.${\n    now.getMonth() + 1\n  }.${now.getFullYear()}:\n    1) ${totalUsers} registered students in all versions\n    2) of these ${totalCompletions} have completed the course.\\`\\`\\` `\n}\n\nconst post = async () => {\n  data.text = data.text.concat(await getGlobalStats())\n  for (let i = 0; i < langArr.length; i++) {\n    data.text = data.text.concat(await getDataByLanguage(langArr[i]))\n  }\n  await slackPoster.post(url, data)\n  Knex.destroy()\n}\n\npost().then(() => process.exit(0))\n"]}