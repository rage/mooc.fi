{"version":3,"file":"kafkaBridge.js","sourceRoot":"","sources":["../../bin/kafkaBridge.ts"],"names":[],"mappings":"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","sourcesContent":["require(\"dotenv-safe\").config({\n  allowEmptyValues: process.env.NODE_ENV === \"production\",\n})\n\nimport * as Kafka from \"node-rdkafka\"\n// import * as winston from \"winston\"\nimport express from \"express\"\nimport compression from \"compression\"\nimport bodyParser from \"body-parser\"\nimport morgan from \"morgan\"\nimport { promisify } from \"util\"\n\nconst SECRET = process.env.KAFKA_BRIDGE_SECRET\n\nif (!SECRET) {\n  console.error(\"No secret defined in KAFKA_BRIDGE_SECRET, exiting.\")\n  process.exit(-1)\n}\n\n/* const logger = winston.createLogger({\n  level: \"info\",\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.json(),\n  ),\n  defaultMeta: { service: \"kafka-consumer-user-points\" },\n  transports: [new winston.transports.Console()],\n})\n */\nconst producer = new Kafka.Producer({\n  \"client.id\": \"kafka-bridge\",\n  \"metadata.broker.list\": process.env.KAFKA_HOST,\n})\n\nlet flushProducer = promisify(producer.flush.bind(producer))\n\nlet producerReady = false\nproducer.on(\"ready\", () => {\n  producerReady = true\n})\n\nproducer.connect(undefined, (err, data) => {\n  if (err) {\n    console.error(\"Error while connecting producer\", err)\n    return\n  }\n  console.log(\"Connected to producer\", data)\n})\n\nproducer.setPollInterval(100)\n\nproducer.on(\"delivery-report\", function (err, report) {\n  if (err) {\n    console.error(\"Delivery report error\", err)\n  }\n  console.log(\"Delivery report\", report)\n})\n\nlet app = express()\napp.use(compression())\napp.use(bodyParser.json())\napp.use(morgan(\"combined\"))\nconst port = parseInt(process.env.KAFKA_BRIDGE_SERVER_PORT || \"3003\")\nconst host = process.env.KAFKA_BRIDGE_SERVER_HOST || \"0.0.0.0\"\n\napp.post(\"/kafka-bridge/api/v0/event\", async (req, res) => {\n  if (\n    !req.headers.authorization ||\n    req?.headers?.authorization?.split(\" \")[1] !== SECRET\n  ) {\n    return res.status(403).json({ error: \"Not authorized\" }).send()\n  }\n\n  const { topic, payload } = req.body\n  if (!topic || !payload) {\n    console.log(\n      \"Received an event without a topic or without a payload\",\n      req.body,\n    )\n    return res.status(400).json({ error: \"Topic or payload missing\" }).send()\n  }\n  console.log(\"Producing to topic\", topic, \"payload\", JSON.stringify(payload))\n\n  try {\n    producer.produce(topic, null, Buffer.from(JSON.stringify(payload)))\n    flushProducer(1000, undefined)\n  } catch (e) {\n    console.error(\"Producing to kafka failed\", e)\n    return res.status(500).json({ error: e.toString() }).send()\n  }\n  res.json({ msg: \"Thanks!\" }).send()\n})\napp.get(\"/kafka-bridge/api/v0/healthz\", (_, res) => {\n  if (!producerReady) {\n    return res.status(500).json({ error: \"Kafka producer not ready\" }).send()\n  }\n\n  if (!producer.isConnected()) {\n    return res\n      .status(500)\n      .json({ error: \"Kafka producer got disconnected\" })\n      .send()\n  }\n  res.json({ status: \"ok\" })\n})\n\napp.listen(port, host, () =>\n  console.log(`Kafka bridge listening on ${host}:${port}!`),\n)\n\n// FIXME: (?) not used anywhere\n/* const logCommit = (err: any, topicPartitions: any) => {\n  if (err) {\n    logger.error(\"Error in commit:\" + err)\n  } else {\n    logger.info(\"Committed. topicPartitions:\" + topicPartitions)\n  }\n} */\n"]}