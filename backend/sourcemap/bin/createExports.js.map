{"version":3,"file":"createExports.js","sourceRoot":"","sources":["../../bin/createExports.ts"],"names":[],"mappings":";;;AAAA,6CAAwB;AACxB,iDAA4B;AAE5B,IAAM,IAAI,GAAG;IACX,sBAAsB,EAAE,QAAQ;IAChC,oBAAoB,EAAE,oBAAoB;IAC1C,iBAAiB,EAAE,kBAAkB;IACrC,KAAK,EAAE,QAAQ;CAChB,CAAA;AAED,IAAM,aAAa,GAAG,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAA;AACpD,IAAM,WAAW,GAAG,UAAU,CAAA;AAE9B,IAAM,UAAU,GAAG,UAAC,GAAW,IAAK,OAAA,GAAG,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAnC,CAAmC,CAAA;AAEvE,IAAM,aAAa,GAAG,UAAC,GAAW,EAAE,OAAe;IACjD,IAAM,KAAK,GAAG,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,CAAA;IAEjC,OAAO,KAAK;SACT,MAAM,CACL,UAAC,QAAQ;QACP,OAAA,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,QAAQ,KAAK,WAAW;IAA7D,CAA6D,CAChE;SACA,GAAG,CAAC,UAAC,QAAQ;QACZ,IAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAA;QAC1C,IAAM,UAAU,GAAG,OAAO,CAAC,OAAO,CAChC,QAAQ,EACR,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CACrD,CAAA;QAED,OAAO,yBAAuB,UAAU,oBAAc,QAAQ,OAAG,CAAA;IACnE,CAAC,CAAC,CAAA;AACN,CAAC,CACA;AAAA,CAAC;IACA,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,UAAC,EAAc;YAAb,GAAG,QAAA,EAAE,OAAO,QAAA;QACrC,IAAM,OAAO,GAAG,aAAa,CAAC,GAAG,EAAE,OAAO,CAAC,CAAA;QAE3C,IAAM,UAAU,GAAM,GAAG,SAAI,WAAa,CAAA;QAC1C,IAAM,kBAAkB,GAAG,kBAAgB,IAAI,IAAI,EAAE,YAAO,OAAO,CAAC,IAAI,CACtE,IAAI,CACH,CAAA;QAEH,EAAE,CAAC,aAAa,CAAC,UAAU,EAAE,kBAAkB,CAAC,CAAA;QAChD,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,UAAU,CAAC,CAAA;IAClC,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,EAAE,CAAA","sourcesContent":["import * as fs from \"fs\"\nimport * as path from \"path\"\n\nconst data = {\n  \"resolvers/Completion\": \"%name%\",\n  \"resolvers/Mutation\": \"add%name%Mutations\",\n  \"resolvers/Query\": \"add%name%Queries\",\n  types: \"%name%\",\n}\n\nconst IGNORED_FILES = [\"index.ts\", \"mimetypes.d.ts\"]\nconst OUTPUT_FILE = \"index.ts\"\n\nconst capitalize = (str: string) => str[0].toUpperCase() + str.slice(1)\n\nconst createExports = (dir: string, pattern: string) => {\n  const files = fs.readdirSync(dir)\n\n  return files\n    .filter(\n      (filename) =>\n        !IGNORED_FILES.includes(filename) && filename !== OUTPUT_FILE,\n    )\n    .map((filename) => {\n      const basename = path.parse(filename).name\n      const exportName = pattern.replace(\n        \"%name%\",\n        pattern[0] !== \"%\" ? capitalize(basename) : basename,\n      )\n\n      return `export { default as ${exportName} } from \"./${basename}\"`\n    })\n}\n;(() => {\n  Object.entries(data).map(([dir, pattern]) => {\n    const exports = createExports(dir, pattern)\n\n    const exportFile = `${dir}/${OUTPUT_FILE}`\n    const exportFileContents = `// generated ${new Date()}\\n\\n${exports.join(\n      \"\\n\",\n    )}`\n\n    fs.writeFileSync(exportFile, exportFileContents)\n    console.log(\"wrote\", exportFile)\n  })\n})()\n"]}