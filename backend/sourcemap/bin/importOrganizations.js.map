{"version":3,"file":"importOrganizations.js","sourceRoot":"","sources":["../../bin/importOrganizations.ts"],"names":[],"mappings":"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","sourcesContent":["require(\"dotenv-safe\").config({\n  allowEmptyValues: process.env.NODE_ENV === \"production\",\n})\nimport TmcClient from \"../services/tmc\"\nimport { OrganizationInfo, UserInfo } from \"../domain/UserInfo\"\nimport { generateSecret } from \"../graphql/Organization\"\nimport prismaClient from \"./lib/prisma\"\n\nconst tmc = new TmcClient()\nconst prisma = prismaClient()\n\nconst fetchOrganizations = async () => {\n  const orgInfos: OrganizationInfo[] = await tmc.getOrganizations()\n  await Promise.all(orgInfos.map((p) => upsertOrganization(p)))\n}\n\nconst upsertOrganization = async (org: OrganizationInfo) => {\n  const user =\n    org.creator_id != null ? await getUserFromTmc(org.creator_id) : null\n\n  // FIXME: type\n  const details: any = {\n    slug: org.slug,\n    verified_at: org.verified_at,\n    verified: org.verified || false,\n    disabled: org.disabled || false,\n    tmc_created_at: org.created_at,\n    tmc_updated_at: org.updated_at,\n    hidden: org.hidden || false,\n    creator: user != null ? { connect: { id: user.id } } : null,\n    logo_file_name: org.logo_file_name,\n    logo_content_type: org.logo_content_type,\n    logo_file_size: Number(org.logo_file_size),\n    logo_updated_at: org.logo_updated_at,\n    phone: org.phone,\n    contact_information: org.contact_information,\n    email: org.email,\n    website: org.website,\n    pinned: org.pinned || false,\n  }\n\n  const existingOrganizations = await prisma.organization.findMany({\n    where: {\n      slug: org.slug,\n    },\n  })\n\n  let organization\n  if (existingOrganizations.length > 0) {\n    organization = await prisma.organization.update({\n      where: {\n        slug: org.slug,\n      },\n      data: details,\n    })\n  } else {\n    organization = await prisma.organization.create(\n      await detailsWithSecret(details),\n    )\n  }\n  const translationDetails = {\n    language: \"fi_FI\", //placholder since there is no language information\n    name: org.name,\n    disabled_reason: org.disabled_reason,\n    information: org.information,\n    organization: { connect: { id: organization.id } },\n  }\n  const organizationTranslations = await prisma.organization\n    .findOne({ where: { id: organization.id } })\n    .organization_translations({\n      where: { language: translationDetails.language },\n    })\n  const organizationTranslationId = organizationTranslations.length\n    ? organizationTranslations[0].id\n    : null\n  if (organizationTranslationId != null) {\n    await prisma.organizationTranslation.update({\n      where: { id: organizationTranslationId },\n      data: translationDetails,\n    })\n  } else {\n    await prisma.organizationTranslation.create({ data: translationDetails })\n  }\n}\n\n// FIXME: type\nconst detailsWithSecret = async (details: any) => {\n  details.secret_key = await generateSecret()\n  return details\n}\n\nconst getUserFromTmc = async (user_id: Number) => {\n  const details: UserInfo = await tmc.getUserDetailsById(user_id)\n  const prismaDetails = {\n    upstream_id: details.id,\n    administrator: details.administrator,\n    email: details.email.trim(),\n    first_name: details.user_field.first_name.trim(),\n    last_name: details.user_field.last_name.trim(),\n    username: details.username,\n  }\n  return await prisma.user.upsert({\n    where: { upstream_id: details.id },\n    create: prismaDetails,\n    update: prismaDetails,\n  })\n}\n\nfetchOrganizations()\n"]}