{"version":3,"file":"fetchUserFieldValues.js","sourceRoot":"","sources":["../../bin/fetchUserFieldValues.ts"],"names":[],"mappings":"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","sourcesContent":["require(\"dotenv-safe\").config({\n  allowEmptyValues: process.env.NODE_ENV === \"production\",\n})\nimport TmcClient from \"../services/tmc\"\nimport { PrismaClient } from \"@prisma/client\"\nimport { UserInfo } from \"../domain/UserInfo\"\nimport { DateTime } from \"luxon\"\nimport prismaClient from \"./lib/prisma\"\nimport sentryLogger from \"./lib/logger\"\n\nconst CONFIG_NAME = \"userFieldValues\"\n\nconst prisma = prismaClient()\n\nconst logger = sentryLogger({ service: \"fetch-user-field-values\" })\n\nconst fetcUserFieldValues = async () => {\n  const startTime = new Date().getTime()\n  const tmc = new TmcClient()\n\n  // const prisma: Prisma = new Prisma()\n\n  const existingConfig = await prisma.userAppDatumConfig.findMany({\n    where: { name: CONFIG_NAME },\n  })\n  const latestTimeStamp =\n    existingConfig.length > 0\n      ? existingConfig[0].timestamp // ((await prisma.userAppDatumConfig({ name: CONFIG_NAME })) ?? {}).timestamp\n      : null\n\n  logger.info(latestTimeStamp)\n\n  const data_from_tmc = await tmc.getUserFieldValues(\n    latestTimeStamp?.toISOString() ?? null,\n  )\n  logger.info(\"Got data from tmc\")\n  logger.info(\"data length\", data_from_tmc.length)\n  logger.info(\"sorting\")\n  const data = data_from_tmc.sort(\n    (a, b) =>\n      DateTime.fromISO(a.updated_at).toMillis() -\n      DateTime.fromISO(b.updated_at).toMillis(),\n  )\n  logger.info(data)\n  logger.info(\"sorted\")\n  const saveInterval = 10000\n  let saveCounter = 0\n\n  for (let i = 0; i < data.length; i++) {\n    saveCounter++\n    let p = data[i]\n    if (p.user_id == null) continue\n    if (i % 1000 == 0) logger.info(i)\n    if (!p || p == null) {\n      logger.warning(\n        \"not p:\",\n        p,\n        \"i is\",\n        i,\n        \"while data.length is\",\n        data.length,\n      )\n      continue\n    }\n    const existingUsers = await prisma.user.findMany({\n      where: {\n        upstream_id: p.user_id,\n      },\n    })\n    if (existingUsers.length < 1) {\n      try {\n        await getUserFromTmcAndSaveToDB(p.user_id, tmc)\n      } catch (error) {\n        logger.error(\n          \"error in getting user data from tmc, trying again in 30s...\",\n        )\n        logger.error(\"above error is:\", error)\n        await delay(30 * 1000)\n        await getUserFromTmcAndSaveToDB(p.user_id, tmc)\n      }\n    }\n\n    if (\n      p.field_name === \"organizational_id\" &&\n      p.value &&\n      p.value.trim() != \"\"\n    ) {\n      await prisma.user.update({\n        where: { upstream_id: p.user_id },\n        data: {\n          student_number: p.value.trim(),\n        },\n      })\n    }\n\n    if (saveCounter % saveInterval == 0) {\n      saveProgress(prisma, new Date(p.updated_at))\n    }\n  }\n\n  await saveProgress(prisma, new Date(data[data.length - 1].updated_at))\n\n  const stopTime = new Date().getTime()\n  logger.info(\"used\", stopTime - startTime, \"milliseconds\")\n}\n\nconst getUserFromTmcAndSaveToDB = async (user_id: Number, tmc: TmcClient) => {\n  const details: UserInfo = await tmc.getUserDetailsById(user_id)\n  const prismaDetails = {\n    upstream_id: details.id,\n    administrator: details.administrator,\n    email: details.email.trim(),\n    first_name: details.user_field.first_name.trim(),\n    last_name: details.user_field.last_name.trim(),\n    username: details.username,\n  }\n  try {\n    const result = await prisma.user.upsert({\n      where: { upstream_id: details.id },\n      create: prismaDetails,\n      update: prismaDetails,\n    })\n\n    return result\n  } catch (e) {\n    logger.error(\n      `Failed to upsert user with upstream id ${\n        details.id\n      }. Values we tried to upsert: ${JSON.stringify(\n        prismaDetails,\n      )}. Values found from the database: ${JSON.stringify(details)}`,\n    )\n    if (e.meta?.target?.includes(\"username\")) {\n      logger.info(`Removing user with duplicate username`)\n      await prisma.user.delete({ where: { username: details.username } })\n    }\n    throw e\n  }\n}\n\n// FIXME: not used anywhere\n/* const currentDate = () => {\n  var today = new Date()\n  var date =\n    today.getFullYear() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getDate()\n  var time =\n    today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds()\n  var dateTime = date + \" \" + time\n  return encodeURIComponent(dateTime)\n} */\nconst delay = (ms: number) => new Promise((res) => setTimeout(res, ms))\n\nasync function saveProgress(prisma: PrismaClient, dateToDB: Date) {\n  logger.info(\"saving\")\n  dateToDB.setMinutes(dateToDB.getMinutes() - 10)\n\n  await prisma.userAppDatumConfig.upsert({\n    where: { name: CONFIG_NAME },\n    create: {\n      name: CONFIG_NAME,\n      timestamp: dateToDB,\n    },\n    update: {\n      timestamp: dateToDB,\n    },\n  })\n}\n\nfetcUserFieldValues()\n  .then(() => process.exit(0))\n  .catch((e) => logger.error(e))\n"]}