{"version":3,"file":"fetchAvoinLinks.js","sourceRoot":"","sources":["../../bin/fetchAvoinLinks.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from \"axios\"\nimport { DateTime } from \"luxon\"\nimport { maxBy } from \"lodash\"\nimport prismaClient from \"./lib/prisma\"\nimport sentryLogger from \"./lib/logger\"\n\nrequire(\"dotenv-safe\").config({\n  allowEmptyValues: process.env.NODE_ENV === \"production\",\n})\n\nconst prisma = prismaClient()\n\nconst logger = sentryLogger({ service: \"fetch-avoin-links\" })\n\nconst fetch = async () => {\n  const avoinObjects = await prisma.openUniversityRegistrationLink.findMany({})\n\n  for (const p of avoinObjects) {\n    logger.info(\"Processing link\", p.course_code, p.language)\n    if (!p.course_code) {\n      logger.info(\n        \"Since this link has no course code, I won't try to fetch new links.\",\n      )\n      continue\n    }\n    const res = await getInfoWithCourseCode(p.course_code).catch((error) => {\n      logger.error(error)\n      throw error\n    })\n    logger.info(\"Open university info: \", JSON.stringify(res, undefined, 2))\n\n    const now: DateTime = DateTime.fromJSDate(new Date())\n\n    const alternatives = res.map((data) => {\n      const linkStartDate: DateTime = DateTime.fromISO(data.alkupvm)\n      const linkStopDate: DateTime = DateTime.fromISO(data.loppupvm)\n      return {\n        link: data.oodi_id,\n        stopDate: linkStopDate,\n        startTime: linkStartDate,\n      } as Link\n    })\n\n    let openLinks = alternatives.filter(\n      (o) => o.startTime < now && o.stopDate > now,\n    )\n\n    const bestLink = maxBy(openLinks, (o) => o.stopDate)\n\n    if (!bestLink) {\n      logger.warn(\"Did not find any open links\")\n      continue\n    }\n\n    logger.info(`Best link found was: ${JSON.stringify(bestLink)}`)\n\n    const url = `https://www.avoin.helsinki.fi/palvelut/esittely.aspx?o=${bestLink.link}`\n\n    logger.info(\"Updating link to\", url)\n    await prisma.openUniversityRegistrationLink.update({\n      where: {\n        id: p.id,\n      },\n      data: {\n        link: url,\n        start_date: bestLink.startTime.toJSDate(),\n        stop_date: bestLink.stopDate.toJSDate(),\n      },\n    })\n  }\n}\n\nconst getInfoWithCourseCode = async (\n  course_code: string,\n): Promise<AvoinLinkData[]> => {\n  const url = process.env.AVOIN_COURSE_URL + course_code\n  const res = await axios.get(url, {\n    headers: { Authorized: \"Basic \" + process.env.AVOIN_TOKEN },\n  })\n  return await res.data\n}\n\ninterface AvoinLinkData {\n  oodi_id: string\n  url: string\n  alkupvm: string\n  loppupvm: string\n}\n\ninterface Link {\n  link: string\n  stopDate: DateTime\n  startTime: DateTime\n}\n\nfetch().catch((error) => {\n  logger.error(error)\n  throw error\n})\n"]}