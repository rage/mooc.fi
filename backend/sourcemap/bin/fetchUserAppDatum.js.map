{"version":3,"file":"fetchUserAppDatum.js","sourceRoot":"","sources":["../../bin/fetchUserAppDatum.ts"],"names":[],"mappings":"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","sourcesContent":["require(\"dotenv-safe\").config({\n  allowEmptyValues: process.env.NODE_ENV === \"production\",\n})\nimport TmcClient from \"../services/tmc\"\nimport { PrismaClient, UserCourseSetting } from \"@prisma/client\"\nimport { UserInfo } from \"../domain/UserInfo\"\nimport { DateTime } from \"luxon\"\nimport prismaClient from \"./lib/prisma\"\nimport sentryLogger from \"./lib/logger\"\n\nconst CONFIG_NAME = \"userAppDatum\"\n\nconst prisma = prismaClient()\nlet course\nlet old: UserCourseSetting\n\nconst logger = sentryLogger({ service: \"fetch-user-app-datum\" })\n\nconst fetchUserAppDatum = async () => {\n  const startTime = new Date().getTime()\n  const tmc = new TmcClient()\n\n  // const prisma: Prisma = new Prisma()\n\n  const existingConfigs = await prisma.userAppDatumConfig.findMany({\n    where: { name: CONFIG_NAME },\n  })\n  const latestTimeStamp =\n    existingConfigs.length > 0\n      ? existingConfigs[0].timestamp // ((await prisma.userAppDatumConfig.findOne({ name: CONFIG_NAME })) ?? {}).timestamp\n      : null\n\n  logger.info(latestTimeStamp)\n\n  // weird\n  const data_from_tmc = await tmc.getUserAppDatum(\n    latestTimeStamp?.toISOString() ?? null,\n  )\n  logger.info(\"Got data from tmc\")\n  logger.info(\"data length\", data_from_tmc.length)\n  logger.info(\"sorting\")\n\n  const data = data_from_tmc.sort(\n    (a, b) =>\n      DateTime.fromISO(a.updated_at).toMillis() -\n      DateTime.fromISO(b.updated_at).toMillis(),\n  )\n\n  logger.info(data)\n  logger.info(\"sorted\")\n  const saveInterval = 10000\n  let saveCounter = 0\n\n  for (let i = 0; i < data.length; i++) {\n    saveCounter++\n    let p = data[i]\n    if (p.user_id == null) continue\n    if (i % 1000 == 0) logger.info(i)\n    if (!p || p == \"undefined\" || p == null) {\n      logger.warning(\n        \"not p:\",\n        p,\n        \"i is\",\n        i,\n        \"while data.length is\",\n        data.length,\n      )\n      continue\n    }\n    const existingUsers = await prisma.user.findMany({\n      where: { upstream_id: p.user_id },\n    })\n    if (existingUsers.length < 1) {\n      try {\n        await getUserFromTmcAndSaveToDB(p.user_id, tmc)\n      } catch (error) {\n        logger.error(\n          \"error in getting user data from tmc, trying again in 30s...\",\n        )\n        logger.error(\"above error is:\", error)\n        await delay(30 * 1000)\n        await getUserFromTmcAndSaveToDB(p.user_id, tmc)\n      }\n    }\n    const existingCourses = await prisma.course.findMany({\n      where: { slug: p.namespace },\n    })\n    if (existingCourses.length < 1) {\n      await prisma.course.create({\n        data: {\n          slug: p.namespace,\n          name: p.namespace,\n          hidden: true,\n          teacher_in_charge_name: \"\",\n          teacher_in_charge_email: \"\",\n          start_date: \"\",\n        },\n      })\n    }\n\n    course = await prisma.course.findOne({ where: { slug: p.namespace } })\n\n    if (!course) {\n      process.exit(1)\n    }\n\n    const existingUserCourseSettings = await prisma.userCourseSetting.findMany({\n      where: {\n        user: { upstream_id: p.user_id },\n        course_id: course.id,\n      },\n    })\n    if (existingUserCourseSettings.length < 1) {\n      old = await prisma.userCourseSetting.create({\n        data: {\n          user: {\n            connect: { upstream_id: p.user_id },\n          },\n          course: { connect: { id: course.id } },\n        },\n      })\n    } else {\n      old = existingUserCourseSettings[0]\n    }\n\n    switch (p.field_name) {\n      case \"language\":\n        saveLanguage(p)\n        break\n      case \"country\":\n        saveCountry(p)\n        break\n      case \"research\":\n        saveResearch(p)\n        break\n      case \"marketing\":\n        saveMarketing(p)\n        break\n      case \"course_variant\": //course_variant and deadline are functionally the same (deadline is used in elements-of-ai)\n      case \"deadline\": // deadline does not tell when the deadline is but what is the course variant\n        saveCourseVariant(p)\n        break\n      default:\n        saveOther(p)\n    }\n    if (saveCounter % saveInterval == 0)\n      saveProgress(prisma, new Date(p.updated_at))\n  }\n\n  await saveProgress(prisma, new Date(data[data.length - 1].updated_at))\n\n  const stopTime = new Date().getTime()\n  logger.info(\"used\", stopTime - startTime, \"milliseconds\")\n}\n\nconst saveLanguage = async (p: any) => {\n  await prisma.userCourseSetting.update({\n    where: {\n      id: old.id,\n    },\n    data: {\n      language: p.value,\n    },\n  })\n}\nconst saveCountry = async (p: any) => {\n  await prisma.userCourseSetting.update({\n    where: {\n      id: old.id,\n    },\n    data: {\n      country: p.value,\n    },\n  })\n}\nconst saveResearch = async (p: any) => {\n  const value: boolean = p.value == \"t\" ? true : false\n  await prisma.userCourseSetting.update({\n    where: {\n      id: old.id,\n    },\n    data: {\n      research: value,\n    },\n  })\n}\nconst saveMarketing = async (p: any) => {\n  const value: boolean = p.value == \"t\" ? true : false\n  await prisma.userCourseSetting.update({\n    where: {\n      id: old.id,\n    },\n    data: {\n      marketing: value,\n    },\n  })\n}\nconst saveCourseVariant = async (p: any) => {\n  await prisma.userCourseSetting.update({\n    where: {\n      id: old.id,\n    },\n    data: {\n      course_variant: p.value,\n    },\n  })\n}\n\nconst saveOther = async (p: any) => {\n  const other: any = old.other ?? {}\n  if (p.value == \"t\") {\n    p.value = true\n  } else if (p.value == \"f\") {\n    p.value = false\n  }\n  other[p.field_name] = p.value\n\n  await prisma.userCourseSetting.update({\n    where: {\n      id: old.id,\n    },\n    data: {\n      other: other,\n    },\n  })\n}\n\nconst getUserFromTmcAndSaveToDB = async (user_id: Number, tmc: TmcClient) => {\n  const details: UserInfo = await tmc.getUserDetailsById(user_id)\n  const prismaDetails = {\n    upstream_id: details.id,\n    administrator: details.administrator,\n    email: details.email.trim(),\n    first_name: details.user_field.first_name.trim(),\n    last_name: details.user_field.last_name.trim(),\n    username: details.username,\n  }\n  try {\n    const result = await prisma.user.upsert({\n      where: { upstream_id: details.id },\n      create: prismaDetails,\n      update: prismaDetails,\n    })\n\n    return result\n  } catch (e) {\n    logger.error(\n      `Failed to upsert user with upstream id ${\n        details.id\n      }. Values we tried to upsert: ${JSON.stringify(\n        prismaDetails,\n      )}. Values found from the database: ${JSON.stringify(details)}`,\n    )\n    if (e.meta?.target?.includes(\"username\")) {\n      logger.info(`Removing user with duplicate username`)\n      await prisma.user.delete({ where: { username: details.username } })\n    }\n    throw e\n  }\n}\n\n// FIXME: not used anywhere\n/* const currentDate = () => {\n  var today = new Date()\n  var date =\n    today.getFullYear() + \"-\" + (today.getMonth() + 1) + \"-\" + today.getDate()\n  var time =\n    today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds()\n  var dateTime = date + \" \" + time\n  return encodeURIComponent(dateTime)\n} */\n\nconst delay = (ms: number) => new Promise((res) => setTimeout(res, ms))\n\nasync function saveProgress(prisma: PrismaClient, dateToDB: Date) {\n  logger.info(\"saving\")\n  dateToDB.setMinutes(dateToDB.getMinutes() - 10)\n\n  await prisma.userAppDatumConfig.upsert({\n    where: { name: CONFIG_NAME },\n    create: {\n      name: CONFIG_NAME,\n      timestamp: dateToDB,\n    },\n    update: {\n      timestamp: dateToDB,\n    },\n  })\n}\n\nfetchUserAppDatum()\n  .then(() => process.exit(0))\n  .catch((e) => logger.error(e))\n"]}