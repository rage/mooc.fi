{"version":3,"file":"parseFile.js","sourceRoot":"","sources":["../../bin/parseFile.ts"],"names":[],"mappings":";;;AAAA,OAAO,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC;IAC5B,gBAAgB,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY;CACxD,CAAC,CAAA;AACF,iCAA+B;AAC/B,gEAAuC;AACvC,gEAAuC;AAEvC,IAAM,GAAG,GAAG,IAAI,gBAAS,EAAE,CAAA;AAC3B,IAAM,MAAM,GAAG,mBAAY,EAAE,CAAA;AAE7B,IAAM,IAAI,GAAG;;;;oBACE,qBAAM,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,EAAA;;gBAAtC,IAAI,GAAG,SAA+B;gBAC5C,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;gBACb,CAAC,GAAG,IAAI,CAAC,MAAM,CACjB,UAAC,CAAC;oBACA,OAAA,CAAC,CAAC,SAAS,KAAK,gBAAgB;wBAChC,CAAC,CAAC,UAAU,IAAI,UAAU;wBAC1B,CAAC,CAAC,KAAK,IAAI,IAAI;gBAFf,CAEe,CAClB,CAAA;gBACD,CAAC,GAAG,eAAM,CAAC,CAAC,EAAE,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,OAAO,EAAT,CAAS,CAAC,CAAA;gBAC/B,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAA;gBAEjB,OAAO,GAAG,CAAC,CAAA;gBAaN,CAAC,GAAG,CAAC;;;qBAAE,CAAA,CAAC,GAAG,CAAC,CAAC,MAAM,CAAA;gBACT,qBAAM,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC;wBAChD,KAAK,EAAE;4BACL,gBAAgB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO;4BAC9B,MAAM,EAAE,EAAE,IAAI,EAAE,gBAAgB,EAAE;yBACnC;qBACF,CAAC;oBACF;;;wBAGI;kBAJF;;gBALI,QAAQ,GAAG,SAKf;gBACF;;;oBAGI;gBACJ,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC;oBAAE,OAAO,EAAE,CAAA;;;gBAXN,CAAC,EAAE,CAAA;;;gBAajC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;gBAChB,CAAC,GAAG,IAAI,CAAC,MAAM,CACjB,UAAC,CAAC;oBACA,OAAA,CAAC,CAAC,SAAS,KAAK,gBAAgB;wBAChC,CAAC,CAAC,UAAU,IAAI,UAAU;wBAC1B,CAAC,CAAC,KAAK,IAAI,IAAI;gBAFf,CAEe,CAClB,CAAA;gBACG,CAAC,GAAG,IAAI;qBACT,MAAM,CACL,UAAC,CAAC;oBACA,OAAA,CAAC,CAAC,SAAS,KAAK,gBAAgB;wBAChC,CAAC,CAAC,UAAU,IAAI,SAAS;wBACzB,CAAC,CAAC,KAAK,IAAI,QAAQ;gBAFnB,CAEmB,CACtB;qBACA,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,OAAO,EAAT,CAAS,CAAC,CAAA;gBACxB,OAAO,GAAG,CAAC,CAAA;gBACX,KAAS,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACjC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;wBAAE,OAAO,EAAE,CAAA;iBACxC;gBACD,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;;;;KACrB,CAAA;AAED,IAAI,EAAE,CAAC,OAAK,CAAA,CAAC,UAAC,CAAC,IAAK,OAAA,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAd,CAAc,CAAC,CAAA","sourcesContent":["require(\"dotenv-safe\").config({\n  allowEmptyValues: process.env.NODE_ENV === \"production\",\n})\nimport { uniqBy } from \"lodash\"\nimport TmcClient from \"../services/tmc\"\nimport prismaClient from \"./lib/prisma\"\n\nconst tmc = new TmcClient()\nconst prisma = prismaClient()\n\nconst doIt = async () => {\n  const data = await tmc.getUserAppDatum(null)\n  console.log(data)\n  let x = data.filter(\n    (p) =>\n      p.namespace === \"elements-of-ai\" &&\n      p.field_name == \"language\" &&\n      p.value == \"se\",\n  )\n  x = uniqBy(x, (p) => p.user_id)\n  console.log(x.length)\n  // const prisma: Prisma = new Prisma()\n  let counter = 0\n  /*\n    couldn't this be replaced by\n\n    counter = (await prisma.completion.findMany({ \n      where: {\n        user_upstream_id: { in: x[i].map(y => y.user_id) },\n        course_completionTocourse: { slug: \"elements-of-ai\" }\n      }\n    })).length\n\n    ?\n  */\n  for (let i = 0; i < x.length; i++) {\n    const existing = await prisma.completion.findMany({\n      where: {\n        user_upstream_id: x[i].user_id,\n        course: { slug: \"elements-of-ai\" },\n      },\n    })\n    /*const exists = await prisma.$exists.completion({\n      user_upstream_id: x[i].user_id,\n      course: { slug: \"elements-of-ai\" },\n    })*/\n    if (existing.length > 0) counter++\n  }\n  console.log(counter)\n  let y = data.filter(\n    (p) =>\n      p.namespace === \"elements-of-ai\" &&\n      p.field_name == \"language\" &&\n      p.value == \"en\",\n  )\n  let z = data\n    .filter(\n      (p) =>\n        p.namespace === \"elements-of-ai\" &&\n        p.field_name == \"country\" &&\n        p.value == \"Sweden\",\n    )\n    .map((p) => p.user_id)\n  counter = 0\n  for (let i = 0; i < y.length; i++) {\n    if (z.includes(y[i].user_id)) counter++\n  }\n  console.log(counter)\n}\n\ndoIt().catch((e) => console.log(e))\n"]}