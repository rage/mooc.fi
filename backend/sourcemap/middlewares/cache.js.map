{"version":3,"file":"cache.js","sourceRoot":"","sources":["../../middlewares/cache.ts"],"names":[],"mappings":";;;AAAA,iCAAmC;AACnC,2CAA4C;AAC5C,4CAA4C;AAE5C,IAAM,KAAK,GAAG,UAAC,OAAY,IAAK,OAAA,UAC9B,IAAS,EACT,IAAyB,EACzB,OAAqB,EACrB,IAAS,EACT,IAAc;;;;;;gBAEV,QAAQ,GAAuB,SAAS,CAAA;gBAC5C,IAAI,OAAO,CAAC,OAAO,EAAE;oBACnB,QAAQ,SAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,0CAAE,aAAa,CAAA;iBAC3C,CAAC;;mBAEC;qBACC,CAAA,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,KAAK,OAAO,IAAI,QAAQ,CAAA,EAA1D,wBAA0D;gBACrD,qBAAM,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,EAAA;oBAA5C,sBAAO,SAAqC,EAAA;;gBAGxC,GAAG,GAAM,IAAI,CAAC,SAAS,SAAI,IAAI,CAAC,SAAS,CAC7C,IAAI,CAAC,UAAU,CAChB,SAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAG,CAAA;gBAEvB,IAAI,GAAG,mBAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;gBAC7C,qBAAM,gBAAQ,CACxB;;oCAAY,qBAAM,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,EAAA;oCAArC,sBAAA,SAAqC,EAAA;;6BAAA,EACjD;wBACE,MAAM,EAAE,kBAAkB;wBAC1B,UAAU,EAAE,GAAG;wBACf,GAAG,EAAE,IAAI;qBACV,CACF,EAAA;;gBAPK,GAAG,GAAG,SAOX;gBACD,sBAAO,GAAG,EAAA;;;KACX,EA/B+B,CA+B/B,CAAA;AAED,qBAAe,KAAK,CAAA","sourcesContent":["import { createHash } from \"crypto\"\nimport { redisify } from \"../services/redis\"\n// import { NexusContext } from \"../context\"\n\nconst cache = (_config: any) => async (\n  root: any,\n  args: Record<string, any>,\n  context: NexusContext,\n  info: any,\n  next: Function,\n) => {\n  let rawToken: string | undefined = undefined\n  if (context.headers) {\n    rawToken = context?.headers?.authorization\n  } /* else if (context.connection) {\n    rawToken = context.connection.context[\"Authorization\"]\n  }*/\n  if (root || info.parentType.toString() !== \"Query\" || rawToken) {\n    return await next(root, args, context, info)\n  }\n\n  const key = `${info.fieldName}-${JSON.stringify(\n    info.fieldNodes,\n  )}-${JSON.stringify(args)}`\n\n  let hash = createHash(\"sha512\").update(key).digest(\"hex\")\n  const res = await redisify<any>(\n    async () => await next(root, args, context, info),\n    {\n      prefix: \"graphql-response\",\n      expireTime: 300,\n      key: hash,\n    },\n  )\n  return res\n}\n\nexport default cache\n"]}