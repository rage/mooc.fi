{"version":3,"file":"runtime.js","sourceRoot":"","sources":["../../../middlewares/auth-plugin/runtime.ts"],"names":[],"mappings":"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","sourcesContent":["import { RuntimePlugin } from \"nexus/plugin\"\nimport TmcClient from \"../../services/tmc\"\nimport { redisify } from \"../../services/redis\"\nimport { AuthenticationError } from \"apollo-server-errors\"\nimport { UserInfo } from \"../../domain/UserInfo\"\nimport { Role } from \"../../accessControl\"\nimport { Settings } from \"./settings\"\nimport { User } from \"@prisma/client\"\nimport hashUser from \"../../util/hashUser\"\n\nexport const plugin: RuntimePlugin<Settings, \"required\"> = (\n  settings: Settings,\n) => (_project: any) => ({\n  context: {\n    typeGen: {\n      fields: {\n        details: \"any\",\n        role: \"Role\",\n        user: \"any\",\n        organization: \"any\",\n      },\n    },\n    create: async (req: any) => {\n      const rawToken = req?.headers?.authorization\n\n      if (!rawToken) {\n        return {\n          details: undefined,\n          role: Role.VISITOR,\n          user: undefined,\n          organization: undefined,\n        }\n      }\n\n      const { prisma } = settings\n\n      if (rawToken.startsWith(\"Basic\")) {\n        const organization = await prisma.organization.findOne({\n          where: {\n            secret_key: rawToken.split(\" \")?.[1] ?? \"\",\n          },\n        })\n\n        if (!organization) {\n          throw new AuthenticationError(\"log in\")\n        }\n\n        return {\n          details: undefined,\n          role: Role.ORGANIZATION,\n          organization,\n          user: undefined,\n        }\n      }\n\n      let details: UserInfo | null = null\n      try {\n        const client = new TmcClient(rawToken)\n        details = await redisify<UserInfo>(\n          async () => await client.getCurrentUserDetails(),\n          {\n            prefix: \"userdetails\",\n            expireTime: 3600,\n            key: rawToken,\n          },\n        )\n      } catch (e) {\n        console.log(\"error\", e)\n      }\n\n      if (!details) {\n        throw new AuthenticationError(\"invalid credentials\")\n      }\n\n      const id: number = details.id\n      const prismaDetails = {\n        upstream_id: id,\n        administrator: details.administrator,\n        email: details.email.trim(),\n        first_name: details.user_field.first_name.trim(),\n        last_name: details.user_field.last_name.trim(),\n        username: details.username,\n      }\n\n      const user = await redisify<User>(\n        async () =>\n          await prisma.user.upsert({\n            where: { upstream_id: id },\n            create: prismaDetails,\n            update: prismaDetails,\n          }),\n        {\n          prefix: \"user\",\n          expireTime: 3600,\n          key: hashUser(prismaDetails),\n        },\n      )\n\n      return {\n        details,\n        role: details.administrator ? Role.ADMIN : Role.USER,\n        user,\n        organization: undefined,\n      }\n    },\n  },\n  schema: {\n    plugins: [],\n  },\n})\n"]}