{"version":3,"file":"FetchUser.js","sourceRoot":"","sources":["../../middlewares/FetchUser.ts"],"names":[],"mappings":"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","sourcesContent":["import { AuthenticationError } from \"apollo-server-core\"\nimport TmcClient from \"../services/tmc\"\nimport { Role } from \"../accessControl\"\nimport { redisify } from \"../services/redis\"\nimport { UserInfo } from \"/domain/UserInfo\"\nimport { PrismaClient } from \"@prisma/client\"\n// import { IncomingMessage } from \"http\"\nimport { NexusContext } from \"../context\"\n\n// this is the version suitable for middleware, not used for now\nconst fetchUser = (_config: any) => async (\n  root: any,\n  args: Record<string, any>,\n  ctx: NexusContext,\n  info: any,\n  next: Function,\n) => {\n  if (ctx.userDetails || ctx.organization) {\n    return await next(root, args, ctx, info)\n  }\n\n  const rawToken = ctx.headers?.authorization // connection?\n\n  if (!rawToken) {\n    ctx.role = Role.VISITOR\n  } else if (rawToken.startsWith(\"Basic\")) {\n    await getOrganization(ctx, rawToken)\n  } else {\n    await getUser(ctx, rawToken)\n  }\n\n  return await next(root, args, ctx, info)\n}\n\nconst getOrganization = async (ctx: NexusContext, rawToken: string | null) => {\n  const secret: string = rawToken?.split(\" \")[1] ?? \"\"\n\n  const org = await ctx.db.organization.findMany({\n    where: { secret_key: secret },\n  })\n  if (org.length < 1) {\n    throw new AuthenticationError(\"Please log in.\")\n  }\n\n  ctx.organization = org[0]\n  ctx.role = Role.ORGANIZATION\n}\n\nconst getUser = async (ctx: NexusContext, rawToken: string) => {\n  const client = new TmcClient(rawToken)\n  // TODO: Does this always make a request?\n  let details: UserInfo | null = null\n  try {\n    details = await redisify<UserInfo>(client.getCurrentUserDetails(), {\n      prefix: \"userdetails\",\n      expireTime: 3600,\n      key: rawToken,\n    })\n  } catch (e) {\n    console.log(\"error\", e)\n  }\n\n  ctx.tmcClient = client\n  ctx.userDetails = details ?? undefined\n\n  if (!details) {\n    return\n  }\n\n  const id: number = details.id\n  const prismaDetails = {\n    upstream_id: id,\n    administrator: details.administrator,\n    email: details.email.trim(),\n    first_name: details.user_field.first_name.trim(),\n    last_name: details.user_field.last_name.trim(),\n    username: details.username,\n  }\n  ctx.user = await ctx.db.user.upsert({\n    where: { upstream_id: id },\n    create: prismaDetails,\n    update: prismaDetails,\n  })\n  if (ctx.user.administrator) {\n    ctx.role = Role.ADMIN\n  } else {\n    ctx.role = Role.USER\n  }\n}\n\nexport default fetchUser\n\n// this is the one suitable for context, not use for now\nexport const contextUser = async (\n  req: any, // was: IncomingMessage, but somehow it's wrapped in req\n  prisma: PrismaClient,\n) => {\n  // TODO/FIXME:\n  // Future versions of nexus seem to wrap this, so its req?.req?...\n  const rawToken = req?.headers?.authorization\n\n  if (!rawToken) {\n    return {\n      role: Role.VISITOR,\n      user: undefined,\n      organization: undefined,\n    }\n  }\n\n  if (rawToken.startsWith(\"Basic\")) {\n    const organization = await prisma.organization.findOne({\n      where: {\n        secret_key: rawToken.split(\" \")?.[1] ?? \"\",\n      },\n    })\n\n    if (!organization) {\n      throw new AuthenticationError(\"log in\")\n    }\n\n    return {\n      role: Role.ORGANIZATION,\n      organization,\n      user: undefined,\n    }\n  }\n\n  // TODO: Does this always make a request?\n  let details: UserInfo | null = null\n  try {\n    const client = new TmcClient(rawToken)\n    details = await redisify<UserInfo>(\n      async () => await client.getCurrentUserDetails(),\n      {\n        prefix: \"userdetails\",\n        expireTime: 3600,\n        key: rawToken,\n      },\n    )\n  } catch (e) {\n    console.log(\"error\", e)\n  }\n\n  if (!details) {\n    throw new AuthenticationError(\"invalid credentials\")\n  }\n\n  const id: number = details.id\n  const prismaDetails = {\n    upstream_id: id,\n    administrator: details.administrator,\n    email: details.email.trim(),\n    first_name: details.user_field.first_name.trim(),\n    last_name: details.user_field.last_name.trim(),\n    username: details.username,\n  }\n\n  const user = await prisma.user.upsert({\n    where: { upstream_id: id },\n    create: prismaDetails,\n    update: prismaDetails,\n  })\n\n  return {\n    role: details.administrator ? Role.ADMIN : Role.USER,\n    organization: undefined,\n    user,\n  }\n}\n"]}