generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "clientExtensions", "postgresqlExtensions", "extendedWhereUnique", "filteredRelationCount"]
  // , "fieldReference", 
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp", schema: "extensions"), pg_trgm(schema: "extensions"), btree_gin(schema: "extensions")]
}

model AbEnrollment {
  id          String   @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  user_id     String?  @db.Uuid
  ab_study_id String   @db.Uuid
  group       Int?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
  user        User?    @relation(fields: [user_id], references: [id], onUpdate: NoAction)
  ab_study    AbStudy  @relation(fields: [ab_study_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, ab_study_id])
  @@index([ab_study_id])
  @@map("ab_enrollment")
}

model AbStudy {
  id             String         @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  group_count    Int
  name           String?        @unique
  created_at     DateTime       @default(now())
  updated_at     DateTime       @default(now()) @updatedAt
  ab_enrollments AbEnrollment[]

  @@map("ab_study")
}

model Completion {
  id                                   String                 @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  course_id                            String?                @db.Uuid
  user_id                              String?                @db.Uuid
  certificate_id                       String?
  completion_date                      DateTime?              @default(now()) @db.Timestamptz(6)
  completion_language                  String?
  completion_registration_attempt_date DateTime?
  eligible_for_ects                    Boolean?               @default(true)
  email                                String
  grade                                String?
  student_number                       String?
  tier                                 Int?
  user_upstream_id                     Int?
  created_at                           DateTime               @default(now())
  updated_at                           DateTime               @default(now()) @updatedAt
  course                               Course?                @relation(fields: [course_id], references: [id], onUpdate: NoAction)
  user                                 User?                  @relation(fields: [user_id], references: [id], onUpdate: NoAction)
  completions_registered               CompletionRegistered[]

  @@index([completion_language])
  @@index([course_id, user_id, created_at])
  @@index([user_id, course_id, created_at])
  @@map("completion")
}

model CompletionRegistered {
  id                  String        @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  real_student_number String
  registration_date   DateTime?
  user_id             String?       @db.Uuid
  completion_id       String?       @db.Uuid
  course_id           String?       @db.Uuid
  organization_id     String?       @db.Uuid
  created_at          DateTime      @default(now())
  updated_at          DateTime      @default(now()) @updatedAt
  completion          Completion?   @relation(fields: [completion_id], references: [id], onUpdate: NoAction)
  course              Course?       @relation(fields: [course_id], references: [id], onUpdate: NoAction)
  organization        Organization? @relation(fields: [organization_id], references: [id], onUpdate: NoAction)
  user                User?         @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@index([completion_id])
  @@index([course_id])
  @@index([organization_id])
  @@index([user_id, course_id])
  @@map("completion_registered")
}

model Course {
  id                                      String                           @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name                                    String
  slug                                    String                           @unique
  teacher_in_charge_name                  String
  teacher_in_charge_email                 String
  support_email                           String?
  start_date                              String
  end_date                                String?
  ects                                    String?
  promote                                 Boolean?
  status                                  CourseStatus?                    @default(Upcoming)
  start_point                             Boolean?
  hidden                                  Boolean?
  study_module_start_point                Boolean?
  order                                   Int?
  study_module_order                      Int?
  automatic_completions                   Boolean?                         @default(false)
  automatic_completions_eligible_for_ects Boolean?                         @default(true)
  points_needed                           Int?
  exercise_completions_needed             Int?
  has_certificate                         Boolean?                         @default(false)
  upcoming_active_link                    Boolean?                         @default(false)
  tier                                    Int?
  language                                String?
  owner_organization_id                   String?                          @db.Uuid
  completion_email_id                     String?                          @db.Uuid
  inherit_settings_from_id                String?                          @db.Uuid
  completions_handled_by_id               String?                          @db.Uuid
  course_stats_email_id                   String?                          @db.Uuid
  photo_id                                String?                          @db.Uuid
  created_at                              DateTime                         @default(now())
  updated_at                              DateTime                         @default(now()) @updatedAt
  completions                             Completion[]
  completions_registered                  CompletionRegistered[]
  completion_email                        EmailTemplate?                   @relation("EmailTemplate_Course_completion_email", fields: [completion_email_id], references: [id], onUpdate: NoAction)
  triggered_automatically_email           EmailTemplate[]                  @relation("EmailTemplate_Course_triggered_automatically_by")
  course_stats_email                      EmailTemplate?                   @relation("EmailTemplate_Course_stats_email", fields: [course_stats_email_id], references: [id], onUpdate: NoAction)
  completions_handled_by                  Course?                          @relation("Course_completions_handled_by", fields: [completions_handled_by_id], references: [id], onUpdate: NoAction)
  handles_completions_for                 Course[]                         @relation("Course_completions_handled_by")
  inherit_settings_from                   Course?                          @relation("Course_inherit_settings_from", fields: [inherit_settings_from_id], references: [id], onUpdate: NoAction)
  handles_settings_for                    Course[]                         @relation("Course_inherit_settings_from")
  owner_organization                      Organization?                    @relation(fields: [owner_organization_id], references: [id], onUpdate: NoAction)
  photo                                   Image?                           @relation(fields: [photo_id], references: [id], onUpdate: NoAction)
  course_aliases                          CourseAlias[]
  course_organizations                    CourseOrganization[]
  ownerships                              CourseOwnership[]
  course_translations                     CourseTranslation[]
  course_variants                         CourseVariant[]
  exercises                               Exercise[]
  open_university_registration_links      OpenUniversityRegistrationLink[]
  stored_data                             StoredData[]
  user_course_progresses                  UserCourseProgress[]
  user_course_service_progresses          UserCourseServiceProgress[]
  user_course_settings                    UserCourseSetting[]
  user_course_settings_visibilities       UserCourseSettingsVisibility[]
  tags                                    Tag[]                            @relation("CourseToTag")
  services                                Service[]                        @relation("course_to_service")
  study_modules                           StudyModule[]                    @relation("study_module_to_course")

  @@index([completion_email_id])
  @@index([completions_handled_by_id])
  @@index([status])
  @@map("course")
}

model CourseAlias {
  id          String   @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  course_code String   @unique
  course_id   String?  @db.Uuid
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
  course      Course?  @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([course_id])
  @@map("course_alias")
}

model CourseOrganization {
  id              String        @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  creator         Boolean?
  course_id       String?       @db.Uuid
  organization_id String?       @db.Uuid
  created_at      DateTime      @default(now())
  updated_at      DateTime      @default(now()) @updatedAt
  course          Course?       @relation(fields: [course_id], references: [id], onUpdate: NoAction)
  organization    Organization? @relation(fields: [organization_id], references: [id], onUpdate: NoAction)

  @@map("course_organization")
}

model CourseTranslation {
  id           String   @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name         String
  language     String
  description  String
  link         String?
  instructions String?
  course_id    String?  @db.Uuid
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now()) @updatedAt
  course       Course?  @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([course_id, language])
  @@index([name])
  @@map("course_translation")
}

model CourseVariant {
  id           String   @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  slug         String
  description  String?
  instructions String?
  course_id    String?  @db.Uuid
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now()) @updatedAt
  course       Course?  @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([course_id])
  @@index([slug])
  @@map("course_variant")
}

model EmailDelivery {
  id                String         @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  sent              Boolean        @default(false)
  error             Boolean        @default(false)
  error_message     String?
  user_id           String?        @db.Uuid
  email_template_id String?        @db.Uuid
  created_at        DateTime       @default(now())
  updated_at        DateTime       @default(now()) @updatedAt
  email_template    EmailTemplate? @relation(fields: [email_template_id], references: [id], onUpdate: NoAction)
  user              User?          @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@index([email_template_id])
  @@index([user_id, email_template_id])
  @@map("email_delivery")
}

model EmailTemplate {
  id                                   String                    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name                                 String?
  txt_body                             String?
  html_body                            String?
  title                                String?
  points_threshold                     Int?
  exercise_completions_threshold       Int?
  template_type                        String?
  course_instance_language             String?
  triggered_automatically_by_course_id String?                   @db.Uuid
  created_at                           DateTime                  @default(now())
  updated_at                           DateTime                  @default(now()) @updatedAt
  courses                              Course[]                  @relation("EmailTemplate_Course_completion_email")
  stats_courses                        Course[]                  @relation("EmailTemplate_Course_stats_email")
  course_stats_subscriptions           CourseStatsSubscription[]
  email_deliveries                     EmailDelivery[]
  triggered_automatically_by_course    Course?                   @relation("EmailTemplate_Course_triggered_automatically_by", fields: [triggered_automatically_by_course_id], references: [id], onUpdate: NoAction)

  @@index([triggered_automatically_by_course_id, template_type])
  @@map("email_template")
}

model Exercise {
  id                   String               @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  custom_id            String
  name                 String?
  part                 Int?
  section              Int?
  max_points           Int?
  timestamp            DateTime?
  deleted              Boolean?             @default(false)
  service_id           String?              @db.Uuid
  course_id            String?              @db.Uuid
  created_at           DateTime             @default(now())
  updated_at           DateTime             @default(now()) @updatedAt
  course               Course?              @relation(fields: [course_id], references: [id], onUpdate: NoAction)
  service              Service?             @relation(fields: [service_id], references: [id], onUpdate: NoAction)
  exercise_completions ExerciseCompletion[]

  @@index([course_id, service_id, custom_id])
  @@index([custom_id])
  @@index([service_id])
  @@map("exercise")
}

model ExerciseCompletion {
  id                                   String                             @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  n_points                             Float?
  timestamp                            DateTime
  completed                            Boolean?                           @default(false)
  attempted                            Boolean?
  original_submission_date             DateTime?
  user_id                              String?                            @db.Uuid
  exercise_id                          String?                            @db.Uuid
  created_at                           DateTime                           @default(now())
  updated_at                           DateTime                           @default(now()) @updatedAt
  exercise                             Exercise?                          @relation(fields: [exercise_id], references: [id], onUpdate: NoAction)
  user                                 User?                              @relation(fields: [user_id], references: [id], onUpdate: NoAction)
  exercise_completion_required_actions ExerciseCompletionRequiredAction[]

  @@index([user_id, exercise_id, timestamp(sort: Desc), updated_at(sort: Desc)])
  @@map("exercise_completion")
}

model ExerciseCompletionRequiredAction {
  id                     String              @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  value                  String
  exercise_completion_id String?             @db.Uuid
  exercise_completion    ExerciseCompletion? @relation(fields: [exercise_completion_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("exercise_completion_required_actions")
}

model Image {
  id                    String   @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name                  String?
  original              String
  original_mimetype     String
  uncompressed          String
  uncompressed_mimetype String
  compressed            String?
  compressed_mimetype   String?
  encoding              String?
  default               Boolean?
  created_at            DateTime @default(now())
  updated_at            DateTime @default(now()) @updatedAt
  courses               Course[]

  @@map("image")
}

model OpenUniversityRegistrationLink {
  id          String    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  course_code String
  language    String
  link        String?
  start_date  DateTime?
  stop_date   DateTime?
  course_id   String?   @db.Uuid
  tiers       Json?     @db.Json
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now()) @updatedAt
  course      Course?   @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([course_id])
  @@map("open_university_registration_link")
}

model Organization {
  id                        String                    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  slug                      String                    @unique
  secret_key                String                    @unique
  name                      String
  information               String?
  verified_at               DateTime?
  verified                  Boolean?
  disabled                  Boolean?
  disabled_reason           String?
  hidden                    Boolean?
  tmc_created_at            DateTime?
  tmc_updated_at            DateTime?
  logo_file_name            String?
  logo_content_type         String?
  logo_file_size            Int?
  logo_updated_at           DateTime?
  phone                     String?
  contact_information       String?
  email                     String?
  website                   String?
  pinned                    Boolean?
  creator_id                String?                   @db.Uuid
  created_at                DateTime                  @default(now())
  updated_at                DateTime                  @default(now()) @updatedAt
  completions_registered    CompletionRegistered[]
  courses                   Course[]
  course_organizations      CourseOrganization[]
  creator                   User?                     @relation(fields: [creator_id], references: [id], onUpdate: NoAction)
  organization_translations OrganizationTranslation[]
  user_organizations        UserOrganization[]
  verified_users            VerifiedUser[]

  @@index([creator_id])
  @@map("organization")
}

model OrganizationTranslation {
  id              String        @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  language        String
  name            String
  information     String?
  organization_id String?       @db.Uuid
  created_at      DateTime      @default(now())
  updated_at      DateTime      @default(now()) @updatedAt
  organization    Organization? @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([organization_id])
  @@map("organization_translation")
}

model Service {
  id                             String                      @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  url                            String
  name                           String
  created_at                     DateTime                    @default(now())
  updated_at                     DateTime                    @default(now()) @updatedAt
  exercises                      Exercise[]
  user_course_service_progresses UserCourseServiceProgress[]
  courses                        Course[]                    @relation("course_to_service")

  @@map("service")
}

model StoredData {
  data       String?
  course_id  String   @db.Uuid
  user_id    String   @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  course     Course   @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([course_id, user_id])
  @@unique([course_id, user_id])
  @@index([user_id])
  @@map("stored_data")
}

model StudyModule {
  id                        String                   @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  slug                      String                   @unique
  name                      String
  image                     String?
  order                     Int?
  created_at                DateTime                 @default(now())
  updated_at                DateTime                 @default(now()) @updatedAt
  study_module_translations StudyModuleTranslation[]
  courses                   Course[]                 @relation("study_module_to_course")

  @@map("study_module")
}

model StudyModuleTranslation {
  id              String       @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name            String
  language        String
  description     String
  study_module_id String?      @db.Uuid
  created_at      DateTime     @default(now())
  updated_at      DateTime     @default(now()) @updatedAt
  study_module    StudyModule? @relation(fields: [study_module_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([study_module_id, language])
  @@map("study_module_translation")
}

model User {
  id                             String                      @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  upstream_id                    Int                         @unique
  username                       String                      @unique
  first_name                     String?
  last_name                      String?
  email                          String
  administrator                  Boolean
  student_number                 String?
  real_student_number            String?
  research_consent               Boolean?
  created_at                     DateTime                    @default(now())
  updated_at                     DateTime                    @default(now()) @updatedAt
  ab_enrollments                 AbEnrollment[]
  completions                    Completion[]
  completions_registered         CompletionRegistered[]
  course_ownerships              CourseOwnership[]
  course_stats_subscriptions     CourseStatsSubscription[]
  email_deliveries               EmailDelivery[]
  exercise_completions           ExerciseCompletion[]
  organizations                  Organization[]
  stored_data                    StoredData[]
  user_course_progresses         UserCourseProgress[]
  user_course_service_progresses UserCourseServiceProgress[]
  user_course_settings           UserCourseSetting[]
  user_organizations             UserOrganization[]
  verified_users                 VerifiedUser[]

  @@index([email(ops: raw("gin_trgm_ops"))], type: Gin)
  @@index([first_name(ops: raw("gin_trgm_ops")), last_name(ops: raw("gin_trgm_ops"))], type: Gin)
  @@index([last_name(ops: raw("gin_trgm_ops"))], type: Gin)
  @@map("user")
}

model UserAppDatumConfig {
  id         String    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name       String?   @unique
  timestamp  DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt

  @@map("user_app_datum_config")
}

model UserCourseProgress {
  id                             String                      @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  progress                       Json                        @db.Json
  extra                          Json?                       @db.Json
  max_points                     Float?
  n_points                       Float?
  user_id                        String?                     @db.Uuid
  course_id                      String?                     @db.Uuid
  created_at                     DateTime                    @default(now())
  updated_at                     DateTime                    @default(now()) @updatedAt
  course                         Course?                     @relation(fields: [course_id], references: [id], onUpdate: NoAction)
  user                           User?                       @relation(fields: [user_id], references: [id], onUpdate: NoAction)
  user_course_service_progresses UserCourseServiceProgress[]

  @@index([course_id, user_id])
  @@index([user_id])
  @@map("user_course_progress")
}

model UserCourseServiceProgress {
  id                      String              @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  progress                Json                @db.Json
  timestamp               DateTime?
  service_id              String?             @db.Uuid
  user_id                 String?             @db.Uuid
  course_id               String?             @db.Uuid
  user_course_progress_id String?             @db.Uuid
  created_at              DateTime            @default(now())
  updated_at              DateTime            @default(now()) @updatedAt
  course                  Course?             @relation(fields: [course_id], references: [id], onUpdate: NoAction)
  service                 Service?            @relation(fields: [service_id], references: [id], onUpdate: NoAction)
  user_course_progress    UserCourseProgress? @relation(fields: [user_course_progress_id], references: [id], onUpdate: NoAction)
  user                    User?               @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@index([course_id])
  @@index([service_id, course_id, user_id])
  @@index([user_id])
  @@map("user_course_service_progress")
}

model UserCourseSetting {
  id             String   @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  language       String?
  country        String?
  research       Boolean?
  marketing      Boolean?
  course_variant String?
  other          Json?    @db.Json
  user_id        String?  @db.Uuid
  course_id      String?  @db.Uuid
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now()) @updatedAt
  course         Course?  @relation(fields: [course_id], references: [id], onUpdate: NoAction)
  user           User?    @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@index([country])
  @@index([course_id, user_id, created_at])
  @@index([language])
  @@index([user_id])
  @@map("user_course_setting")
}

model UserCourseSettingsVisibility {
  id         String   @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  language   String
  course_id  String?  @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  course     Course?  @relation(fields: [course_id], references: [id], onUpdate: NoAction)

  @@map("user_course_settings_visibility")
}

model UserOrganization {
  id              String            @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  role            OrganizationRole? @default(Student)
  organization_id String?           @db.Uuid
  user_id         String?           @db.Uuid
  consented       Boolean?          @default(false)
  created_at      DateTime          @default(now())
  updated_at      DateTime          @default(now()) @updatedAt
  organization    Organization?     @relation(fields: [organization_id], references: [id], onUpdate: NoAction)
  user            User?             @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@map("user_organization")
}

model VerifiedUser {
  id                            String        @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  display_name                  String?
  personal_unique_code          String
  home_organization             String?
  person_affiliation            String?
  person_affiliation_updated_at DateTime?
  mail                          String?
  organizational_unit           String?
  user_id                       String?       @db.Uuid
  organization_id               String?       @db.Uuid
  created_at                    DateTime      @default(now())
  updated_at                    DateTime      @default(now()) @updatedAt
  user                          User?         @relation(fields: [user_id], references: [id], onUpdate: NoAction)
  organization                  Organization? @relation(fields: [organization_id], references: [id], onUpdate: NoAction)

  @@unique([user_id, personal_unique_code, home_organization])
  @@map("verified_user")
}

model CourseOwnership {
  id         String   @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  course_id  String?  @db.Uuid
  user_id    String?  @db.Uuid
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  course     Course?  @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       User?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, course_id])
  @@map("course_ownership")
}

model CourseStatsSubscription {
  id                String         @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  email_template_id String?        @db.Uuid
  user_id           String?        @db.Uuid
  created_at        DateTime       @default(now())
  updated_at        DateTime       @default(now()) @updatedAt
  email_template    EmailTemplate? @relation(fields: [email_template_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user              User?          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, email_template_id])
  @@map("course_stats_subscription")
}

model Tag {
  id               String           @id @default(dbgenerated("extensions.uuid_generate_v4()"))
  hidden           Boolean          @default(false)
  created_at       DateTime         @default(now())
  updated_at       DateTime         @default(now()) @updatedAt
  courses          Course[]         @relation("CourseToTag")
  tag_types        TagType[]        @relation("TagToTagType")
  tag_translations TagTranslation[]

  @@map("tag")
}

model TagType {
  name       String   @id
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  tags       Tag[]    @relation("TagToTagType")

  @@map("tag_type")
}

model TagTranslation {
  language     String
  name         String
  abbreviation String?
  description  String?
  tag_id       String
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now()) @updatedAt
  tag          Tag      @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([tag_id, language])
  @@unique([name, language])
  @@map("tag_translation")
}

enum CourseStatus {
  Active
  Ended
  Upcoming

  @@map("course_status")
}

enum OrganizationRole {
  Teacher
  Student
  OrganizationAdmin

  @@map("organization_role")
}
