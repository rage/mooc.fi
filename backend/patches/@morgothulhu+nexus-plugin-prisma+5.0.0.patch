diff --git a/node_modules/@morgothulhu/nexus-plugin-prisma/dist/typegen/render.js b/node_modules/@morgothulhu/nexus-plugin-prisma/dist/typegen/render.js
index f207722..2bb36da 100644
--- a/node_modules/@morgothulhu/nexus-plugin-prisma/dist/typegen/render.js
+++ b/node_modules/@morgothulhu/nexus-plugin-prisma/dist/typegen/render.js
@@ -111,20 +111,26 @@ interface PrismaModels {
 ${dmmf.datamodel.models.map((m) => `  ${m.name}: Prisma.${m.name}`).join('\n')}
 }`;
 }
+function getUniqueFields(data) {
+    return Array.from(new Set(data.map((d) => d.fieldName))).map((fieldName) => ({
+        fieldName,
+        returnType: data.find((d) => d.fieldName === fieldName).returnType,
+    }));
+}
 function renderNexusPrismaOutputs(dmmf) {
-    const queriesByType = (0, mapping_1.getCrudMappedFields)('Query', dmmf).map((mappedfield) => ({
+    const queriesByType = getUniqueFields((0, mapping_1.getCrudMappedFields)('Query', dmmf).map((mappedfield) => ({
         fieldName: mappedfield.field.name,
         returnType: mappedfield.field.outputType.type,
-    }));
-    const mutationsByType = (0, mapping_1.getCrudMappedFields)('Mutation', dmmf).map((mappedField) => ({
+    })));
+    const mutationsByType = getUniqueFields((0, mapping_1.getCrudMappedFields)('Mutation', dmmf).map((mappedField) => ({
         fieldName: mappedField.field.name,
         returnType: mappedField.field.outputType.type,
-    }));
+    })));
     const fieldsByType = dmmf.datamodel.models.reduce((acc, m) => {
-        acc[m.name] = m.fields.map((f) => ({
+        acc[m.name] = getUniqueFields(m.fields.map((f) => ({
             fieldName: f.name,
             returnType: f.type,
-        }));
+        })));
         return acc;
     }, {});
     // TODO: Add JS Docs
diff --git a/node_modules/@morgothulhu/nexus-plugin-prisma/src/typegen/render.ts b/node_modules/@morgothulhu/nexus-plugin-prisma/src/typegen/render.ts
index 9d7dfcc..3eb4e73 100644
--- a/node_modules/@morgothulhu/nexus-plugin-prisma/src/typegen/render.ts
+++ b/node_modules/@morgothulhu/nexus-plugin-prisma/src/typegen/render.ts
@@ -100,22 +100,29 @@ ${dmmf.datamodel.models.map((m) => `  ${m.name}: Prisma.${m.name}`).join('\n')}
 }`
 }
 
+function getUniqueFields(data: { fieldName: string, returnType: string }[]) {
+  return Array.from(new Set(data.map((d) => d.fieldName))).map((fieldName) => ({
+    fieldName,
+    returnType: data.find((d) => d.fieldName === fieldName)!.returnType,
+  }))
+}
+
 function renderNexusPrismaOutputs(dmmf: DmmfDocument) {
-  const queriesByType = getCrudMappedFields('Query', dmmf).map((mappedfield) => ({
+  const queriesByType = getUniqueFields(getCrudMappedFields('Query', dmmf).map((mappedfield) => ({
     fieldName: mappedfield.field.name,
     returnType: mappedfield.field.outputType.type,
-  }))
-  const mutationsByType = getCrudMappedFields('Mutation', dmmf).map((mappedField) => ({
+  })))
+  const mutationsByType = getUniqueFields(getCrudMappedFields('Mutation', dmmf).map((mappedField) => ({
     fieldName: mappedField.field.name,
     returnType: mappedField.field.outputType.type,
-  }))
+  })))
   const fieldsByType = dmmf.datamodel.models.reduce<
     Record<string, { fieldName: string; returnType: string }[]>
   >((acc, m) => {
-    acc[m.name] = m.fields.map((f) => ({
+    acc[m.name] = getUniqueFields(m.fields.map((f) => ({
       fieldName: f.name,
       returnType: f.type,
-    }))
+    })))
 
     return acc
   }, {})
