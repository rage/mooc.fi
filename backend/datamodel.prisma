type User @db(name: "user") {
  id: UUID! @id
  "User's unique identifier from TMC"
  upstream_id: Int! @unique
  created_at: DateTime @createdAt
  updated_at: DateTime @updatedAt
  first_name: String
  last_name: String
  "TMC random generated username"
  username: String! @unique
  email: String!
  administrator: Boolean!
  student_number: String
  "Confirmed student number"
  real_student_number: String
  "User's completions"
  completions: [Completion!]! @relation(name: "CompletionToUser")
  "User's completions that have been reqistered for ECTS etc."
  registered_completions: [CompletionRegistered!]! @relation(name: "CompletionRegisteredToUser")
  created_organizations: [Organization!]! @relation(name: "OrganizationToUser")
  exercise_completions: [ExerciseCompletion!]! @relation(name: "ExerciseCompletionsToUser")
  "User's points in courses"
  user_course_progresses: [UserCourseProgress!]!  @relation( name: "UserCourseProgressToUser")
}

type Course @db(name: "course") {
  id: UUID! @id
  created_at: DateTime @createdAt
  updated_at: DateTime @updatedAt
  name: String!
  "identify course in other api Equerys"
  slug: String! @unique
  "aliases that can be used in this this api instead of slug "
  course_aliases: [CourseAlias!]! @relation(name: "CourseToCourseAlias")
  services: [Service] @relation(name: "CourseToService")
  photo: Image @relation(name: "CourseToImage", onDelete: CASCADE)
  course_translations: [CourseTranslation!] @relation(name: "CourseToCourseTranslation", onDelete: CASCADE)
  promote: Boolean
  status: CourseStatus
  study_modules: [StudyModule!] @relation(name: "StudyModuleToCourse")
  start_point: Boolean
  hidden: Boolean
  study_module_start_point: Boolean
  order: Int
  open_university_registration_links: [OpenUniversityRegistrationLink!]! @relation(name: "OpenUniversityRegistrationLinkToCourse")
  exercises: [Exercise!]! @relation(name:"ExerciseToCourse")
  
}

type CourseAlias  @db(name: "course_alias"){
  id: UUID! @id
  created_at: DateTime @createdAt
  updated_at: DateTime @updatedAt
  "The actual code/slug that is used in querys"
  course_code: String! @unique
  "Which course this code links to"
  course: Course! @relation(link: INLINE, name: "CourseToCourseAlias")
}

type OpenUniversityRegistrationLink  @db(name: "open_university_registration_link"){
  id: UUID! @id
  created_at: DateTime @createdAt
  updated_at: DateTime @updatedAt
  "University of Helsinki course code"
  course_code: String!
  "Which course this code links to"
  course: Course! @relation(link: INLINE, name: "OpenUniversityRegistrationLinkToCourse")
  language: String!
  link: String
  start_date: DateTime
  stop_date: DateTime
}


enum CourseStatus @db(name:"course_status"){
  Active, Ended, Upcoming
}

type CourseTranslation @db(name:"course_translation"){
  id: UUID! @id
  created_at: DateTime @createdAt
  updated_at: DateTime @updatedAt
  name: String!
  language: String!
  description: String!
  link: String
  course: Course! @relation(link: INLINE, name:"CourseToCourseTranslation", onDelete: SET_NULL)
}

type Completion @db(name: "completion") {
  id: UUID! @id
  created_at: DateTime @createdAt
  updated_at: DateTime @updatedAt
  "User's unique identifier. Should be used to deduplicate registered completions, since all the other fields can change."
  user_upstream_id: Int
  email: String!
  student_number: String
  user: User! @relation(link: INLINE, name: "CompletionToUser")
  course: Course! @relation(link: INLINE, name: "CompletionToCourse")
  completion_language: String
  "Where this completion has been registered, can have multiple locations."
  completions_registered: [CompletionRegistered!]! @relation(name: "CompletionRegisteredToCompletion") 
}

type CompletionRegistered @db(name: "completion_registered") {
  id: UUID! @id
  created_at: DateTime @createdAt
  updated_at: DateTime @updatedAt
  user: User! @relation(link: INLINE, name: "CompletionRegisteredToUser")
  course: Course! @relation(link: INLINE, name: "CompletionRegisteredToCourse")
  "Confirmed student number"
  real_student_number: String!
  "Link to completion whose register info this is"
  completion: Completion! @relation(link: INLINE, name: "CompletionRegisteredToCompletion")
  organization: Organization @relation(link:INLINE, name: "CompletionRegisteredToOrganization")
}

type Service @db(name: "service") {
  id: UUID! @id
  created_at: DateTime @createdAt
  updated_at: DateTime @updatedAt
  url: String!
  name: String!
  courses: [Course] @relation(name: "CourseToService")
  exercises: [Exercise!]! @relation(name: "ExerciseToService")
}

type StudyModule @db(name:"study_module"){
  id: UUID! @id
  slug: String! @unique
  name: String!
  image: String
  order: Int
  created_at: DateTime @createdAt
  updated_at: DateTime @updatedAt
  courses: [Course!]! @relation(name: "StudyModuleToCourse")
  study_module_translations: [StudyModuleTranslation!]! @relation(name: "StudyModuleToStudyModuleTranslation", onDelete: CASCADE)
}

type StudyModuleTranslation @db(name:"study_module_translation"){
  id: UUID! @id
  created_at: DateTime @createdAt
  updated_at: DateTime @updatedAt
  name: String!
  language: String!
  description: String!
  study_module: StudyModule! @relation(link: INLINE, name: "StudyModuleToStudyModuleTranslation", onDelete: SET_NULL)
}

type UserCourseProgress @db(name: "user_course_progress") {
  id: UUID! @id
  created_at: DateTime @createdAt
  updated_at: DateTime @updatedAt
  user: User! @relation(link: INLINE, name: "UserCourseProgressToUser")
  course: Course! @relation(link: INLINE, name: "UserCourseProgressToCourse")
  "Json containing all progress data for User in a course"
  progress: Json!
  user_course_service_progresses: [UserCourseServiceProgress!]! @relation(name:"UserCourseServiceProgressToUserCourseProgress")
}


type UserCourseServiceProgress @db(name: "user_course_service_progress") {
  id: UUID! @id
  created_at: DateTime @createdAt
  updated_at: DateTime @updatedAt
  user: User! @relation(link: INLINE, name: "UserCourseServiceProgressToUser")
  course: Course! @relation(link: INLINE, name: "UserCourseServiceProgressToCourse")
  service: Service! @relation(link: INLINE, name: "UserCourseServiceProgressToService")
  "User's progress in a course in a spesific course"
  progress: Json!
  user_course_progress: UserCourseProgress! @relation(link: INLINE, name: "UserCourseServiceProgressToUserCourseProgress")
  timestamp: DateTime
}

type Organization @db(name: "organization") {
  id: UUID! @id
  created_at: DateTime @createdAt
  updated_at: DateTime @updatedAt
  slug: String! @unique
  verified_at: DateTime
  verified: Boolean
  disabled: Boolean
  hidden: Boolean
  creator: User @relation(link: INLINE, name: "OrganizationToUser")
  tmc_created_at: DateTime
  tmc_updated_at: DateTime
  logo_file_name: String
  logo_content_type: String
  logo_file_size: Int
  logo_updated_at: DateTime
  phone: String
  contact_information: String
  email: String
  website: String
  pinned: Boolean
  secret_key: String! @unique
  completions_registered: [CompletionRegistered!]! @relation(name: "CompletionRegisteredToOrganization")
  organization_translations: [OrganizationTranslation!]! @relation(name: "OrganizationToOrganizationTranslation")
}

type OrganizationTranslation @db(name: "organization_translation") {
  id: UUID! @id
  created_at: DateTime @createdAt
  updated_at: DateTime @updatedAt
  language: String!
  name: String!
  disabled_reason: String
  information: String
  organization: Organization! @relation(link: INLINE, name: "OrganizationToOrganizationTranslation")
}

type Exercise @db(name: "exercise") {
  id: UUID! @id
  created_at: DateTime @createdAt
  updated_at: DateTime @updatedAt
  custom_id: String!
  name: String
  part: Int
  section: Int
  max_points: Int
  course: Course! @relation(name:"ExerciseToCourse" )
  service: Service @relation(link: INLINE, name: "ExerciseToService")
  ExerciseCompletions: [ExerciseCompletion!]! @relation(name: "ExerciseCompletionsToExercise")
  timestamp: DateTime
  deleted: Boolean @default(value: false)
}

type ExerciseCompletion @db(name: "exercise_completion") {
  id: UUID! @id
  created_at: DateTime @createdAt
  updated_at: DateTime @updatedAt
  n_points: Int
  exercise: Exercise! @relation(link: INLINE, name: "ExerciseCompletionsToExercise")
  user: User! @relation(link: INLINE, name: "ExerciseCompletionsToUser")
  timestamp: DateTime
  completed: Boolean @default(value: false)
  required_actions: String
}

type Image @db(name: "image") {
  id: UUID! @id
  created_at: DateTime @createdAt
  updated_at: DateTime @updatedAt
  name: String
  original: String!
  original_mimetype: String!
  uncompressed: String!
  uncompressed_mimetype: String!
  compressed: String
  compressed_mimetype: String
  encoding: String
  default: Boolean
}

type UserCourseSettings {
  id: UUID! @id
  created_at: DateTime @createdAt
  updated_at: DateTime @updatedAt
  user: User
  course: Course
  language: String
  country: String
  research: Boolean
  marketing: Boolean
  course_variant: String
  other: Json
}

type UserAppDatumConfig {
  id: UUID! @id
  created_at: DateTime @createdAt
  updated_at: DateTime @updatedAt
  name: String @unique
  timestamp: DateTime
}
