// Code generated by Prisma (prisma@1.30.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateCompletion {
  count: Int!
}

type AggregateCompletionRegistered {
  count: Int!
}

type AggregateCourse {
  count: Int!
}

type AggregateOpenUniversityCourse {
  count: Int!
}

type AggregateService {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserCourseProgress {
  count: Int!
}

type AggregateUserCourseServiceProgress {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Completion {
  id: UUID!
  created_at: DateTime
  updated_at: DateTime
  user_upstream_id: Int
  email: String!
  student_number: String
  user: User!
  course: Course!
  completion_language: String
}

type CompletionConnection {
  pageInfo: PageInfo!
  edges: [CompletionEdge]!
  aggregate: AggregateCompletion!
}

input CompletionCreateInput {
  id: UUID
  created_at: DateTime
  updated_at: DateTime
  user_upstream_id: Int
  email: String!
  student_number: String
  user: UserCreateOneWithoutCompletionsInput!
  course: CourseCreateOneInput!
  completion_language: String
}

input CompletionCreateManyWithoutUserInput {
  create: [CompletionCreateWithoutUserInput!]
  connect: [CompletionWhereUniqueInput!]
}

input CompletionCreateOneInput {
  create: CompletionCreateInput
  connect: CompletionWhereUniqueInput
}

input CompletionCreateWithoutUserInput {
  id: UUID
  created_at: DateTime
  updated_at: DateTime
  user_upstream_id: Int
  email: String!
  student_number: String
  course: CourseCreateOneInput!
  completion_language: String
}

type CompletionEdge {
  node: Completion!
  cursor: String!
}

enum CompletionOrderByInput {
  id_ASC
  id_DESC
  created_at_ASC
  created_at_DESC
  updated_at_ASC
  updated_at_DESC
  user_upstream_id_ASC
  user_upstream_id_DESC
  email_ASC
  email_DESC
  student_number_ASC
  student_number_DESC
  completion_language_ASC
  completion_language_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CompletionPreviousValues {
  id: UUID!
  created_at: DateTime
  updated_at: DateTime
  user_upstream_id: Int
  email: String!
  student_number: String
  completion_language: String
}

type CompletionRegistered {
  id: UUID!
  created_at: DateTime
  updated_at: DateTime
  user: User!
  course: Course!
  real_student_number: String!
  organisation: String!
  completion: Completion!
}

type CompletionRegisteredConnection {
  pageInfo: PageInfo!
  edges: [CompletionRegisteredEdge]!
  aggregate: AggregateCompletionRegistered!
}

input CompletionRegisteredCreateInput {
  id: UUID
  created_at: DateTime
  updated_at: DateTime
  user: UserCreateOneWithoutRegistered_completionsInput!
  course: CourseCreateOneInput!
  real_student_number: String!
  organisation: String!
  completion: CompletionCreateOneInput!
}

input CompletionRegisteredCreateManyWithoutUserInput {
  create: [CompletionRegisteredCreateWithoutUserInput!]
  connect: [CompletionRegisteredWhereUniqueInput!]
}

input CompletionRegisteredCreateWithoutUserInput {
  id: UUID
  created_at: DateTime
  updated_at: DateTime
  course: CourseCreateOneInput!
  real_student_number: String!
  organisation: String!
  completion: CompletionCreateOneInput!
}

type CompletionRegisteredEdge {
  node: CompletionRegistered!
  cursor: String!
}

enum CompletionRegisteredOrderByInput {
  id_ASC
  id_DESC
  created_at_ASC
  created_at_DESC
  updated_at_ASC
  updated_at_DESC
  real_student_number_ASC
  real_student_number_DESC
  organisation_ASC
  organisation_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CompletionRegisteredPreviousValues {
  id: UUID!
  created_at: DateTime
  updated_at: DateTime
  real_student_number: String!
  organisation: String!
}

input CompletionRegisteredScalarWhereInput {
  id: UUID
  id_not: UUID
  id_in: [UUID!]
  id_not_in: [UUID!]
  id_lt: UUID
  id_lte: UUID
  id_gt: UUID
  id_gte: UUID
  id_contains: UUID
  id_not_contains: UUID
  id_starts_with: UUID
  id_not_starts_with: UUID
  id_ends_with: UUID
  id_not_ends_with: UUID
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  updated_at: DateTime
  updated_at_not: DateTime
  updated_at_in: [DateTime!]
  updated_at_not_in: [DateTime!]
  updated_at_lt: DateTime
  updated_at_lte: DateTime
  updated_at_gt: DateTime
  updated_at_gte: DateTime
  real_student_number: String
  real_student_number_not: String
  real_student_number_in: [String!]
  real_student_number_not_in: [String!]
  real_student_number_lt: String
  real_student_number_lte: String
  real_student_number_gt: String
  real_student_number_gte: String
  real_student_number_contains: String
  real_student_number_not_contains: String
  real_student_number_starts_with: String
  real_student_number_not_starts_with: String
  real_student_number_ends_with: String
  real_student_number_not_ends_with: String
  organisation: String
  organisation_not: String
  organisation_in: [String!]
  organisation_not_in: [String!]
  organisation_lt: String
  organisation_lte: String
  organisation_gt: String
  organisation_gte: String
  organisation_contains: String
  organisation_not_contains: String
  organisation_starts_with: String
  organisation_not_starts_with: String
  organisation_ends_with: String
  organisation_not_ends_with: String
  AND: [CompletionRegisteredScalarWhereInput!]
  OR: [CompletionRegisteredScalarWhereInput!]
  NOT: [CompletionRegisteredScalarWhereInput!]
}

type CompletionRegisteredSubscriptionPayload {
  mutation: MutationType!
  node: CompletionRegistered
  updatedFields: [String!]
  previousValues: CompletionRegisteredPreviousValues
}

input CompletionRegisteredSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CompletionRegisteredWhereInput
  AND: [CompletionRegisteredSubscriptionWhereInput!]
  OR: [CompletionRegisteredSubscriptionWhereInput!]
  NOT: [CompletionRegisteredSubscriptionWhereInput!]
}

input CompletionRegisteredUpdateInput {
  created_at: DateTime
  updated_at: DateTime
  user: UserUpdateOneRequiredWithoutRegistered_completionsInput
  course: CourseUpdateOneRequiredInput
  real_student_number: String
  organisation: String
  completion: CompletionUpdateOneRequiredInput
}

input CompletionRegisteredUpdateManyDataInput {
  created_at: DateTime
  updated_at: DateTime
  real_student_number: String
  organisation: String
}

input CompletionRegisteredUpdateManyMutationInput {
  created_at: DateTime
  updated_at: DateTime
  real_student_number: String
  organisation: String
}

input CompletionRegisteredUpdateManyWithoutUserInput {
  create: [CompletionRegisteredCreateWithoutUserInput!]
  delete: [CompletionRegisteredWhereUniqueInput!]
  connect: [CompletionRegisteredWhereUniqueInput!]
  set: [CompletionRegisteredWhereUniqueInput!]
  disconnect: [CompletionRegisteredWhereUniqueInput!]
  update: [CompletionRegisteredUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CompletionRegisteredUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [CompletionRegisteredScalarWhereInput!]
  updateMany: [CompletionRegisteredUpdateManyWithWhereNestedInput!]
}

input CompletionRegisteredUpdateManyWithWhereNestedInput {
  where: CompletionRegisteredScalarWhereInput!
  data: CompletionRegisteredUpdateManyDataInput!
}

input CompletionRegisteredUpdateWithoutUserDataInput {
  created_at: DateTime
  updated_at: DateTime
  course: CourseUpdateOneRequiredInput
  real_student_number: String
  organisation: String
  completion: CompletionUpdateOneRequiredInput
}

input CompletionRegisteredUpdateWithWhereUniqueWithoutUserInput {
  where: CompletionRegisteredWhereUniqueInput!
  data: CompletionRegisteredUpdateWithoutUserDataInput!
}

input CompletionRegisteredUpsertWithWhereUniqueWithoutUserInput {
  where: CompletionRegisteredWhereUniqueInput!
  update: CompletionRegisteredUpdateWithoutUserDataInput!
  create: CompletionRegisteredCreateWithoutUserInput!
}

input CompletionRegisteredWhereInput {
  id: UUID
  id_not: UUID
  id_in: [UUID!]
  id_not_in: [UUID!]
  id_lt: UUID
  id_lte: UUID
  id_gt: UUID
  id_gte: UUID
  id_contains: UUID
  id_not_contains: UUID
  id_starts_with: UUID
  id_not_starts_with: UUID
  id_ends_with: UUID
  id_not_ends_with: UUID
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  updated_at: DateTime
  updated_at_not: DateTime
  updated_at_in: [DateTime!]
  updated_at_not_in: [DateTime!]
  updated_at_lt: DateTime
  updated_at_lte: DateTime
  updated_at_gt: DateTime
  updated_at_gte: DateTime
  user: UserWhereInput
  course: CourseWhereInput
  real_student_number: String
  real_student_number_not: String
  real_student_number_in: [String!]
  real_student_number_not_in: [String!]
  real_student_number_lt: String
  real_student_number_lte: String
  real_student_number_gt: String
  real_student_number_gte: String
  real_student_number_contains: String
  real_student_number_not_contains: String
  real_student_number_starts_with: String
  real_student_number_not_starts_with: String
  real_student_number_ends_with: String
  real_student_number_not_ends_with: String
  organisation: String
  organisation_not: String
  organisation_in: [String!]
  organisation_not_in: [String!]
  organisation_lt: String
  organisation_lte: String
  organisation_gt: String
  organisation_gte: String
  organisation_contains: String
  organisation_not_contains: String
  organisation_starts_with: String
  organisation_not_starts_with: String
  organisation_ends_with: String
  organisation_not_ends_with: String
  completion: CompletionWhereInput
  AND: [CompletionRegisteredWhereInput!]
  OR: [CompletionRegisteredWhereInput!]
  NOT: [CompletionRegisteredWhereInput!]
}

input CompletionRegisteredWhereUniqueInput {
  id: UUID
}

input CompletionScalarWhereInput {
  id: UUID
  id_not: UUID
  id_in: [UUID!]
  id_not_in: [UUID!]
  id_lt: UUID
  id_lte: UUID
  id_gt: UUID
  id_gte: UUID
  id_contains: UUID
  id_not_contains: UUID
  id_starts_with: UUID
  id_not_starts_with: UUID
  id_ends_with: UUID
  id_not_ends_with: UUID
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  updated_at: DateTime
  updated_at_not: DateTime
  updated_at_in: [DateTime!]
  updated_at_not_in: [DateTime!]
  updated_at_lt: DateTime
  updated_at_lte: DateTime
  updated_at_gt: DateTime
  updated_at_gte: DateTime
  user_upstream_id: Int
  user_upstream_id_not: Int
  user_upstream_id_in: [Int!]
  user_upstream_id_not_in: [Int!]
  user_upstream_id_lt: Int
  user_upstream_id_lte: Int
  user_upstream_id_gt: Int
  user_upstream_id_gte: Int
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  student_number: String
  student_number_not: String
  student_number_in: [String!]
  student_number_not_in: [String!]
  student_number_lt: String
  student_number_lte: String
  student_number_gt: String
  student_number_gte: String
  student_number_contains: String
  student_number_not_contains: String
  student_number_starts_with: String
  student_number_not_starts_with: String
  student_number_ends_with: String
  student_number_not_ends_with: String
  completion_language: String
  completion_language_not: String
  completion_language_in: [String!]
  completion_language_not_in: [String!]
  completion_language_lt: String
  completion_language_lte: String
  completion_language_gt: String
  completion_language_gte: String
  completion_language_contains: String
  completion_language_not_contains: String
  completion_language_starts_with: String
  completion_language_not_starts_with: String
  completion_language_ends_with: String
  completion_language_not_ends_with: String
  AND: [CompletionScalarWhereInput!]
  OR: [CompletionScalarWhereInput!]
  NOT: [CompletionScalarWhereInput!]
}

type CompletionSubscriptionPayload {
  mutation: MutationType!
  node: Completion
  updatedFields: [String!]
  previousValues: CompletionPreviousValues
}

input CompletionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CompletionWhereInput
  AND: [CompletionSubscriptionWhereInput!]
  OR: [CompletionSubscriptionWhereInput!]
  NOT: [CompletionSubscriptionWhereInput!]
}

input CompletionUpdateDataInput {
  created_at: DateTime
  updated_at: DateTime
  user_upstream_id: Int
  email: String
  student_number: String
  user: UserUpdateOneRequiredWithoutCompletionsInput
  course: CourseUpdateOneRequiredInput
  completion_language: String
}

input CompletionUpdateInput {
  created_at: DateTime
  updated_at: DateTime
  user_upstream_id: Int
  email: String
  student_number: String
  user: UserUpdateOneRequiredWithoutCompletionsInput
  course: CourseUpdateOneRequiredInput
  completion_language: String
}

input CompletionUpdateManyDataInput {
  created_at: DateTime
  updated_at: DateTime
  user_upstream_id: Int
  email: String
  student_number: String
  completion_language: String
}

input CompletionUpdateManyMutationInput {
  created_at: DateTime
  updated_at: DateTime
  user_upstream_id: Int
  email: String
  student_number: String
  completion_language: String
}

input CompletionUpdateManyWithoutUserInput {
  create: [CompletionCreateWithoutUserInput!]
  delete: [CompletionWhereUniqueInput!]
  connect: [CompletionWhereUniqueInput!]
  set: [CompletionWhereUniqueInput!]
  disconnect: [CompletionWhereUniqueInput!]
  update: [CompletionUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CompletionUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [CompletionScalarWhereInput!]
  updateMany: [CompletionUpdateManyWithWhereNestedInput!]
}

input CompletionUpdateManyWithWhereNestedInput {
  where: CompletionScalarWhereInput!
  data: CompletionUpdateManyDataInput!
}

input CompletionUpdateOneRequiredInput {
  create: CompletionCreateInput
  update: CompletionUpdateDataInput
  upsert: CompletionUpsertNestedInput
  connect: CompletionWhereUniqueInput
}

input CompletionUpdateWithoutUserDataInput {
  created_at: DateTime
  updated_at: DateTime
  user_upstream_id: Int
  email: String
  student_number: String
  course: CourseUpdateOneRequiredInput
  completion_language: String
}

input CompletionUpdateWithWhereUniqueWithoutUserInput {
  where: CompletionWhereUniqueInput!
  data: CompletionUpdateWithoutUserDataInput!
}

input CompletionUpsertNestedInput {
  update: CompletionUpdateDataInput!
  create: CompletionCreateInput!
}

input CompletionUpsertWithWhereUniqueWithoutUserInput {
  where: CompletionWhereUniqueInput!
  update: CompletionUpdateWithoutUserDataInput!
  create: CompletionCreateWithoutUserInput!
}

input CompletionWhereInput {
  id: UUID
  id_not: UUID
  id_in: [UUID!]
  id_not_in: [UUID!]
  id_lt: UUID
  id_lte: UUID
  id_gt: UUID
  id_gte: UUID
  id_contains: UUID
  id_not_contains: UUID
  id_starts_with: UUID
  id_not_starts_with: UUID
  id_ends_with: UUID
  id_not_ends_with: UUID
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  updated_at: DateTime
  updated_at_not: DateTime
  updated_at_in: [DateTime!]
  updated_at_not_in: [DateTime!]
  updated_at_lt: DateTime
  updated_at_lte: DateTime
  updated_at_gt: DateTime
  updated_at_gte: DateTime
  user_upstream_id: Int
  user_upstream_id_not: Int
  user_upstream_id_in: [Int!]
  user_upstream_id_not_in: [Int!]
  user_upstream_id_lt: Int
  user_upstream_id_lte: Int
  user_upstream_id_gt: Int
  user_upstream_id_gte: Int
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  student_number: String
  student_number_not: String
  student_number_in: [String!]
  student_number_not_in: [String!]
  student_number_lt: String
  student_number_lte: String
  student_number_gt: String
  student_number_gte: String
  student_number_contains: String
  student_number_not_contains: String
  student_number_starts_with: String
  student_number_not_starts_with: String
  student_number_ends_with: String
  student_number_not_ends_with: String
  user: UserWhereInput
  course: CourseWhereInput
  completion_language: String
  completion_language_not: String
  completion_language_in: [String!]
  completion_language_not_in: [String!]
  completion_language_lt: String
  completion_language_lte: String
  completion_language_gt: String
  completion_language_gte: String
  completion_language_contains: String
  completion_language_not_contains: String
  completion_language_starts_with: String
  completion_language_not_starts_with: String
  completion_language_ends_with: String
  completion_language_not_ends_with: String
  AND: [CompletionWhereInput!]
  OR: [CompletionWhereInput!]
  NOT: [CompletionWhereInput!]
}

input CompletionWhereUniqueInput {
  id: UUID
}

type Course {
  id: UUID!
  created_at: DateTime
  updated_at: DateTime
  name: String!
  slug: String!
  open_university_courses(where: OpenUniversityCourseWhereInput, orderBy: OpenUniversityCourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OpenUniversityCourse!]
}

type CourseConnection {
  pageInfo: PageInfo!
  edges: [CourseEdge]!
  aggregate: AggregateCourse!
}

input CourseCreateInput {
  id: UUID
  created_at: DateTime
  updated_at: DateTime
  name: String!
  slug: String!
  open_university_courses: OpenUniversityCourseCreateManyWithoutCourseInput
}

input CourseCreateOneInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
}

input CourseCreateOneWithoutOpen_university_coursesInput {
  create: CourseCreateWithoutOpen_university_coursesInput
  connect: CourseWhereUniqueInput
}

input CourseCreateWithoutOpen_university_coursesInput {
  id: UUID
  created_at: DateTime
  updated_at: DateTime
  name: String!
  slug: String!
}

type CourseEdge {
  node: Course!
  cursor: String!
}

enum CourseOrderByInput {
  id_ASC
  id_DESC
  created_at_ASC
  created_at_DESC
  updated_at_ASC
  updated_at_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CoursePreviousValues {
  id: UUID!
  created_at: DateTime
  updated_at: DateTime
  name: String!
  slug: String!
}

type CourseSubscriptionPayload {
  mutation: MutationType!
  node: Course
  updatedFields: [String!]
  previousValues: CoursePreviousValues
}

input CourseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CourseWhereInput
  AND: [CourseSubscriptionWhereInput!]
  OR: [CourseSubscriptionWhereInput!]
  NOT: [CourseSubscriptionWhereInput!]
}

input CourseUpdateDataInput {
  created_at: DateTime
  updated_at: DateTime
  name: String
  slug: String
  open_university_courses: OpenUniversityCourseUpdateManyWithoutCourseInput
}

input CourseUpdateInput {
  created_at: DateTime
  updated_at: DateTime
  name: String
  slug: String
  open_university_courses: OpenUniversityCourseUpdateManyWithoutCourseInput
}

input CourseUpdateManyMutationInput {
  created_at: DateTime
  updated_at: DateTime
  name: String
  slug: String
}

input CourseUpdateOneRequiredInput {
  create: CourseCreateInput
  update: CourseUpdateDataInput
  upsert: CourseUpsertNestedInput
  connect: CourseWhereUniqueInput
}

input CourseUpdateOneRequiredWithoutOpen_university_coursesInput {
  create: CourseCreateWithoutOpen_university_coursesInput
  update: CourseUpdateWithoutOpen_university_coursesDataInput
  upsert: CourseUpsertWithoutOpen_university_coursesInput
  connect: CourseWhereUniqueInput
}

input CourseUpdateWithoutOpen_university_coursesDataInput {
  created_at: DateTime
  updated_at: DateTime
  name: String
  slug: String
}

input CourseUpsertNestedInput {
  update: CourseUpdateDataInput!
  create: CourseCreateInput!
}

input CourseUpsertWithoutOpen_university_coursesInput {
  update: CourseUpdateWithoutOpen_university_coursesDataInput!
  create: CourseCreateWithoutOpen_university_coursesInput!
}

input CourseWhereInput {
  id: UUID
  id_not: UUID
  id_in: [UUID!]
  id_not_in: [UUID!]
  id_lt: UUID
  id_lte: UUID
  id_gt: UUID
  id_gte: UUID
  id_contains: UUID
  id_not_contains: UUID
  id_starts_with: UUID
  id_not_starts_with: UUID
  id_ends_with: UUID
  id_not_ends_with: UUID
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  updated_at: DateTime
  updated_at_not: DateTime
  updated_at_in: [DateTime!]
  updated_at_not_in: [DateTime!]
  updated_at_lt: DateTime
  updated_at_lte: DateTime
  updated_at_gt: DateTime
  updated_at_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  open_university_courses_every: OpenUniversityCourseWhereInput
  open_university_courses_some: OpenUniversityCourseWhereInput
  open_university_courses_none: OpenUniversityCourseWhereInput
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
}

input CourseWhereUniqueInput {
  id: UUID
  slug: String
}

scalar DateTime

scalar Json

scalar Long

type Mutation {
  createCompletion(data: CompletionCreateInput!): Completion!
  updateCompletion(data: CompletionUpdateInput!, where: CompletionWhereUniqueInput!): Completion
  updateManyCompletions(data: CompletionUpdateManyMutationInput!, where: CompletionWhereInput): BatchPayload!
  upsertCompletion(where: CompletionWhereUniqueInput!, create: CompletionCreateInput!, update: CompletionUpdateInput!): Completion!
  deleteCompletion(where: CompletionWhereUniqueInput!): Completion
  deleteManyCompletions(where: CompletionWhereInput): BatchPayload!
  createCompletionRegistered(data: CompletionRegisteredCreateInput!): CompletionRegistered!
  updateCompletionRegistered(data: CompletionRegisteredUpdateInput!, where: CompletionRegisteredWhereUniqueInput!): CompletionRegistered
  updateManyCompletionRegistereds(data: CompletionRegisteredUpdateManyMutationInput!, where: CompletionRegisteredWhereInput): BatchPayload!
  upsertCompletionRegistered(where: CompletionRegisteredWhereUniqueInput!, create: CompletionRegisteredCreateInput!, update: CompletionRegisteredUpdateInput!): CompletionRegistered!
  deleteCompletionRegistered(where: CompletionRegisteredWhereUniqueInput!): CompletionRegistered
  deleteManyCompletionRegistereds(where: CompletionRegisteredWhereInput): BatchPayload!
  createCourse(data: CourseCreateInput!): Course!
  updateCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course
  updateManyCourses(data: CourseUpdateManyMutationInput!, where: CourseWhereInput): BatchPayload!
  upsertCourse(where: CourseWhereUniqueInput!, create: CourseCreateInput!, update: CourseUpdateInput!): Course!
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteManyCourses(where: CourseWhereInput): BatchPayload!
  createOpenUniversityCourse(data: OpenUniversityCourseCreateInput!): OpenUniversityCourse!
  updateOpenUniversityCourse(data: OpenUniversityCourseUpdateInput!, where: OpenUniversityCourseWhereUniqueInput!): OpenUniversityCourse
  updateManyOpenUniversityCourses(data: OpenUniversityCourseUpdateManyMutationInput!, where: OpenUniversityCourseWhereInput): BatchPayload!
  upsertOpenUniversityCourse(where: OpenUniversityCourseWhereUniqueInput!, create: OpenUniversityCourseCreateInput!, update: OpenUniversityCourseUpdateInput!): OpenUniversityCourse!
  deleteOpenUniversityCourse(where: OpenUniversityCourseWhereUniqueInput!): OpenUniversityCourse
  deleteManyOpenUniversityCourses(where: OpenUniversityCourseWhereInput): BatchPayload!
  createService(data: ServiceCreateInput!): Service!
  updateService(data: ServiceUpdateInput!, where: ServiceWhereUniqueInput!): Service
  updateManyServices(data: ServiceUpdateManyMutationInput!, where: ServiceWhereInput): BatchPayload!
  upsertService(where: ServiceWhereUniqueInput!, create: ServiceCreateInput!, update: ServiceUpdateInput!): Service!
  deleteService(where: ServiceWhereUniqueInput!): Service
  deleteManyServices(where: ServiceWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createUserCourseProgress(data: UserCourseProgressCreateInput!): UserCourseProgress!
  updateUserCourseProgress(data: UserCourseProgressUpdateInput!, where: UserCourseProgressWhereUniqueInput!): UserCourseProgress
  updateManyUserCourseProgresses(data: UserCourseProgressUpdateManyMutationInput!, where: UserCourseProgressWhereInput): BatchPayload!
  upsertUserCourseProgress(where: UserCourseProgressWhereUniqueInput!, create: UserCourseProgressCreateInput!, update: UserCourseProgressUpdateInput!): UserCourseProgress!
  deleteUserCourseProgress(where: UserCourseProgressWhereUniqueInput!): UserCourseProgress
  deleteManyUserCourseProgresses(where: UserCourseProgressWhereInput): BatchPayload!
  createUserCourseServiceProgress(data: UserCourseServiceProgressCreateInput!): UserCourseServiceProgress!
  updateUserCourseServiceProgress(data: UserCourseServiceProgressUpdateInput!, where: UserCourseServiceProgressWhereUniqueInput!): UserCourseServiceProgress
  updateManyUserCourseServiceProgresses(data: UserCourseServiceProgressUpdateManyMutationInput!, where: UserCourseServiceProgressWhereInput): BatchPayload!
  upsertUserCourseServiceProgress(where: UserCourseServiceProgressWhereUniqueInput!, create: UserCourseServiceProgressCreateInput!, update: UserCourseServiceProgressUpdateInput!): UserCourseServiceProgress!
  deleteUserCourseServiceProgress(where: UserCourseServiceProgressWhereUniqueInput!): UserCourseServiceProgress
  deleteManyUserCourseServiceProgresses(where: UserCourseServiceProgressWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type OpenUniversityCourse {
  id: UUID!
  created_at: DateTime
  updated_at: DateTime
  course_code: String!
  course: Course!
}

type OpenUniversityCourseConnection {
  pageInfo: PageInfo!
  edges: [OpenUniversityCourseEdge]!
  aggregate: AggregateOpenUniversityCourse!
}

input OpenUniversityCourseCreateInput {
  id: UUID
  created_at: DateTime
  updated_at: DateTime
  course_code: String!
  course: CourseCreateOneWithoutOpen_university_coursesInput!
}

input OpenUniversityCourseCreateManyWithoutCourseInput {
  create: [OpenUniversityCourseCreateWithoutCourseInput!]
  connect: [OpenUniversityCourseWhereUniqueInput!]
}

input OpenUniversityCourseCreateWithoutCourseInput {
  id: UUID
  created_at: DateTime
  updated_at: DateTime
  course_code: String!
}

type OpenUniversityCourseEdge {
  node: OpenUniversityCourse!
  cursor: String!
}

enum OpenUniversityCourseOrderByInput {
  id_ASC
  id_DESC
  created_at_ASC
  created_at_DESC
  updated_at_ASC
  updated_at_DESC
  course_code_ASC
  course_code_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OpenUniversityCoursePreviousValues {
  id: UUID!
  created_at: DateTime
  updated_at: DateTime
  course_code: String!
}

input OpenUniversityCourseScalarWhereInput {
  id: UUID
  id_not: UUID
  id_in: [UUID!]
  id_not_in: [UUID!]
  id_lt: UUID
  id_lte: UUID
  id_gt: UUID
  id_gte: UUID
  id_contains: UUID
  id_not_contains: UUID
  id_starts_with: UUID
  id_not_starts_with: UUID
  id_ends_with: UUID
  id_not_ends_with: UUID
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  updated_at: DateTime
  updated_at_not: DateTime
  updated_at_in: [DateTime!]
  updated_at_not_in: [DateTime!]
  updated_at_lt: DateTime
  updated_at_lte: DateTime
  updated_at_gt: DateTime
  updated_at_gte: DateTime
  course_code: String
  course_code_not: String
  course_code_in: [String!]
  course_code_not_in: [String!]
  course_code_lt: String
  course_code_lte: String
  course_code_gt: String
  course_code_gte: String
  course_code_contains: String
  course_code_not_contains: String
  course_code_starts_with: String
  course_code_not_starts_with: String
  course_code_ends_with: String
  course_code_not_ends_with: String
  AND: [OpenUniversityCourseScalarWhereInput!]
  OR: [OpenUniversityCourseScalarWhereInput!]
  NOT: [OpenUniversityCourseScalarWhereInput!]
}

type OpenUniversityCourseSubscriptionPayload {
  mutation: MutationType!
  node: OpenUniversityCourse
  updatedFields: [String!]
  previousValues: OpenUniversityCoursePreviousValues
}

input OpenUniversityCourseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OpenUniversityCourseWhereInput
  AND: [OpenUniversityCourseSubscriptionWhereInput!]
  OR: [OpenUniversityCourseSubscriptionWhereInput!]
  NOT: [OpenUniversityCourseSubscriptionWhereInput!]
}

input OpenUniversityCourseUpdateInput {
  created_at: DateTime
  updated_at: DateTime
  course_code: String
  course: CourseUpdateOneRequiredWithoutOpen_university_coursesInput
}

input OpenUniversityCourseUpdateManyDataInput {
  created_at: DateTime
  updated_at: DateTime
  course_code: String
}

input OpenUniversityCourseUpdateManyMutationInput {
  created_at: DateTime
  updated_at: DateTime
  course_code: String
}

input OpenUniversityCourseUpdateManyWithoutCourseInput {
  create: [OpenUniversityCourseCreateWithoutCourseInput!]
  delete: [OpenUniversityCourseWhereUniqueInput!]
  connect: [OpenUniversityCourseWhereUniqueInput!]
  set: [OpenUniversityCourseWhereUniqueInput!]
  disconnect: [OpenUniversityCourseWhereUniqueInput!]
  update: [OpenUniversityCourseUpdateWithWhereUniqueWithoutCourseInput!]
  upsert: [OpenUniversityCourseUpsertWithWhereUniqueWithoutCourseInput!]
  deleteMany: [OpenUniversityCourseScalarWhereInput!]
  updateMany: [OpenUniversityCourseUpdateManyWithWhereNestedInput!]
}

input OpenUniversityCourseUpdateManyWithWhereNestedInput {
  where: OpenUniversityCourseScalarWhereInput!
  data: OpenUniversityCourseUpdateManyDataInput!
}

input OpenUniversityCourseUpdateWithoutCourseDataInput {
  created_at: DateTime
  updated_at: DateTime
  course_code: String
}

input OpenUniversityCourseUpdateWithWhereUniqueWithoutCourseInput {
  where: OpenUniversityCourseWhereUniqueInput!
  data: OpenUniversityCourseUpdateWithoutCourseDataInput!
}

input OpenUniversityCourseUpsertWithWhereUniqueWithoutCourseInput {
  where: OpenUniversityCourseWhereUniqueInput!
  update: OpenUniversityCourseUpdateWithoutCourseDataInput!
  create: OpenUniversityCourseCreateWithoutCourseInput!
}

input OpenUniversityCourseWhereInput {
  id: UUID
  id_not: UUID
  id_in: [UUID!]
  id_not_in: [UUID!]
  id_lt: UUID
  id_lte: UUID
  id_gt: UUID
  id_gte: UUID
  id_contains: UUID
  id_not_contains: UUID
  id_starts_with: UUID
  id_not_starts_with: UUID
  id_ends_with: UUID
  id_not_ends_with: UUID
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  updated_at: DateTime
  updated_at_not: DateTime
  updated_at_in: [DateTime!]
  updated_at_not_in: [DateTime!]
  updated_at_lt: DateTime
  updated_at_lte: DateTime
  updated_at_gt: DateTime
  updated_at_gte: DateTime
  course_code: String
  course_code_not: String
  course_code_in: [String!]
  course_code_not_in: [String!]
  course_code_lt: String
  course_code_lte: String
  course_code_gt: String
  course_code_gte: String
  course_code_contains: String
  course_code_not_contains: String
  course_code_starts_with: String
  course_code_not_starts_with: String
  course_code_ends_with: String
  course_code_not_ends_with: String
  course: CourseWhereInput
  AND: [OpenUniversityCourseWhereInput!]
  OR: [OpenUniversityCourseWhereInput!]
  NOT: [OpenUniversityCourseWhereInput!]
}

input OpenUniversityCourseWhereUniqueInput {
  id: UUID
  course_code: String
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  completion(where: CompletionWhereUniqueInput!): Completion
  completions(where: CompletionWhereInput, orderBy: CompletionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Completion]!
  completionsConnection(where: CompletionWhereInput, orderBy: CompletionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompletionConnection!
  completionRegistered(where: CompletionRegisteredWhereUniqueInput!): CompletionRegistered
  completionRegistereds(where: CompletionRegisteredWhereInput, orderBy: CompletionRegisteredOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CompletionRegistered]!
  completionRegisteredsConnection(where: CompletionRegisteredWhereInput, orderBy: CompletionRegisteredOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompletionRegisteredConnection!
  course(where: CourseWhereUniqueInput!): Course
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course]!
  coursesConnection(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseConnection!
  openUniversityCourse(where: OpenUniversityCourseWhereUniqueInput!): OpenUniversityCourse
  openUniversityCourses(where: OpenUniversityCourseWhereInput, orderBy: OpenUniversityCourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OpenUniversityCourse]!
  openUniversityCoursesConnection(where: OpenUniversityCourseWhereInput, orderBy: OpenUniversityCourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OpenUniversityCourseConnection!
  service(where: ServiceWhereUniqueInput!): Service
  services(where: ServiceWhereInput, orderBy: ServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Service]!
  servicesConnection(where: ServiceWhereInput, orderBy: ServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ServiceConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  userCourseProgress(where: UserCourseProgressWhereUniqueInput!): UserCourseProgress
  userCourseProgresses(where: UserCourseProgressWhereInput, orderBy: UserCourseProgressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserCourseProgress]!
  userCourseProgressesConnection(where: UserCourseProgressWhereInput, orderBy: UserCourseProgressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserCourseProgressConnection!
  userCourseServiceProgress(where: UserCourseServiceProgressWhereUniqueInput!): UserCourseServiceProgress
  userCourseServiceProgresses(where: UserCourseServiceProgressWhereInput, orderBy: UserCourseServiceProgressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserCourseServiceProgress]!
  userCourseServiceProgressesConnection(where: UserCourseServiceProgressWhereInput, orderBy: UserCourseServiceProgressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserCourseServiceProgressConnection!
  node(id: ID!): Node
}

type Service {
  id: UUID!
  created_at: DateTime
  updated_at: DateTime
  url: String!
}

type ServiceConnection {
  pageInfo: PageInfo!
  edges: [ServiceEdge]!
  aggregate: AggregateService!
}

input ServiceCreateInput {
  id: UUID
  created_at: DateTime
  updated_at: DateTime
  url: String!
}

input ServiceCreateOneInput {
  create: ServiceCreateInput
  connect: ServiceWhereUniqueInput
}

type ServiceEdge {
  node: Service!
  cursor: String!
}

enum ServiceOrderByInput {
  id_ASC
  id_DESC
  created_at_ASC
  created_at_DESC
  updated_at_ASC
  updated_at_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ServicePreviousValues {
  id: UUID!
  created_at: DateTime
  updated_at: DateTime
  url: String!
}

type ServiceSubscriptionPayload {
  mutation: MutationType!
  node: Service
  updatedFields: [String!]
  previousValues: ServicePreviousValues
}

input ServiceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ServiceWhereInput
  AND: [ServiceSubscriptionWhereInput!]
  OR: [ServiceSubscriptionWhereInput!]
  NOT: [ServiceSubscriptionWhereInput!]
}

input ServiceUpdateDataInput {
  created_at: DateTime
  updated_at: DateTime
  url: String
}

input ServiceUpdateInput {
  created_at: DateTime
  updated_at: DateTime
  url: String
}

input ServiceUpdateManyMutationInput {
  created_at: DateTime
  updated_at: DateTime
  url: String
}

input ServiceUpdateOneRequiredInput {
  create: ServiceCreateInput
  update: ServiceUpdateDataInput
  upsert: ServiceUpsertNestedInput
  connect: ServiceWhereUniqueInput
}

input ServiceUpsertNestedInput {
  update: ServiceUpdateDataInput!
  create: ServiceCreateInput!
}

input ServiceWhereInput {
  id: UUID
  id_not: UUID
  id_in: [UUID!]
  id_not_in: [UUID!]
  id_lt: UUID
  id_lte: UUID
  id_gt: UUID
  id_gte: UUID
  id_contains: UUID
  id_not_contains: UUID
  id_starts_with: UUID
  id_not_starts_with: UUID
  id_ends_with: UUID
  id_not_ends_with: UUID
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  updated_at: DateTime
  updated_at_not: DateTime
  updated_at_in: [DateTime!]
  updated_at_not_in: [DateTime!]
  updated_at_lt: DateTime
  updated_at_lte: DateTime
  updated_at_gt: DateTime
  updated_at_gte: DateTime
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  NOT: [ServiceWhereInput!]
}

input ServiceWhereUniqueInput {
  id: UUID
}

type Subscription {
  completion(where: CompletionSubscriptionWhereInput): CompletionSubscriptionPayload
  completionRegistered(where: CompletionRegisteredSubscriptionWhereInput): CompletionRegisteredSubscriptionPayload
  course(where: CourseSubscriptionWhereInput): CourseSubscriptionPayload
  openUniversityCourse(where: OpenUniversityCourseSubscriptionWhereInput): OpenUniversityCourseSubscriptionPayload
  service(where: ServiceSubscriptionWhereInput): ServiceSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  userCourseProgress(where: UserCourseProgressSubscriptionWhereInput): UserCourseProgressSubscriptionPayload
  userCourseServiceProgress(where: UserCourseServiceProgressSubscriptionWhereInput): UserCourseServiceProgressSubscriptionPayload
}

type User {
  id: UUID!
  upstream_id: Int!
  created_at: DateTime
  updated_at: DateTime
  first_name: String
  last_name: String
  username: String!
  email: String!
  administrator: Boolean!
  student_number: String
  real_student_number: String
  completions(where: CompletionWhereInput, orderBy: CompletionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Completion!]
  registered_completions(where: CompletionRegisteredWhereInput, orderBy: CompletionRegisteredOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CompletionRegistered!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

type UserCourseProgress {
  id: UUID!
  user: User!
  course: Course!
  progress: Json!
}

type UserCourseProgressConnection {
  pageInfo: PageInfo!
  edges: [UserCourseProgressEdge]!
  aggregate: AggregateUserCourseProgress!
}

input UserCourseProgressCreateInput {
  id: UUID
  user: UserCreateOneInput!
  course: CourseCreateOneInput!
  progress: Json!
}

type UserCourseProgressEdge {
  node: UserCourseProgress!
  cursor: String!
}

enum UserCourseProgressOrderByInput {
  id_ASC
  id_DESC
  progress_ASC
  progress_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserCourseProgressPreviousValues {
  id: UUID!
  progress: Json!
}

type UserCourseProgressSubscriptionPayload {
  mutation: MutationType!
  node: UserCourseProgress
  updatedFields: [String!]
  previousValues: UserCourseProgressPreviousValues
}

input UserCourseProgressSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserCourseProgressWhereInput
  AND: [UserCourseProgressSubscriptionWhereInput!]
  OR: [UserCourseProgressSubscriptionWhereInput!]
  NOT: [UserCourseProgressSubscriptionWhereInput!]
}

input UserCourseProgressUpdateInput {
  user: UserUpdateOneRequiredInput
  course: CourseUpdateOneRequiredInput
  progress: Json
}

input UserCourseProgressUpdateManyMutationInput {
  progress: Json
}

input UserCourseProgressWhereInput {
  id: UUID
  id_not: UUID
  id_in: [UUID!]
  id_not_in: [UUID!]
  id_lt: UUID
  id_lte: UUID
  id_gt: UUID
  id_gte: UUID
  id_contains: UUID
  id_not_contains: UUID
  id_starts_with: UUID
  id_not_starts_with: UUID
  id_ends_with: UUID
  id_not_ends_with: UUID
  user: UserWhereInput
  course: CourseWhereInput
  AND: [UserCourseProgressWhereInput!]
  OR: [UserCourseProgressWhereInput!]
  NOT: [UserCourseProgressWhereInput!]
}

input UserCourseProgressWhereUniqueInput {
  id: UUID
}

type UserCourseServiceProgress {
  id: UUID!
  user: User!
  course: Course!
  service: Service!
  progress: Json!
}

type UserCourseServiceProgressConnection {
  pageInfo: PageInfo!
  edges: [UserCourseServiceProgressEdge]!
  aggregate: AggregateUserCourseServiceProgress!
}

input UserCourseServiceProgressCreateInput {
  id: UUID
  user: UserCreateOneInput!
  course: CourseCreateOneInput!
  service: ServiceCreateOneInput!
  progress: Json!
}

type UserCourseServiceProgressEdge {
  node: UserCourseServiceProgress!
  cursor: String!
}

enum UserCourseServiceProgressOrderByInput {
  id_ASC
  id_DESC
  progress_ASC
  progress_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserCourseServiceProgressPreviousValues {
  id: UUID!
  progress: Json!
}

type UserCourseServiceProgressSubscriptionPayload {
  mutation: MutationType!
  node: UserCourseServiceProgress
  updatedFields: [String!]
  previousValues: UserCourseServiceProgressPreviousValues
}

input UserCourseServiceProgressSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserCourseServiceProgressWhereInput
  AND: [UserCourseServiceProgressSubscriptionWhereInput!]
  OR: [UserCourseServiceProgressSubscriptionWhereInput!]
  NOT: [UserCourseServiceProgressSubscriptionWhereInput!]
}

input UserCourseServiceProgressUpdateInput {
  user: UserUpdateOneRequiredInput
  course: CourseUpdateOneRequiredInput
  service: ServiceUpdateOneRequiredInput
  progress: Json
}

input UserCourseServiceProgressUpdateManyMutationInput {
  progress: Json
}

input UserCourseServiceProgressWhereInput {
  id: UUID
  id_not: UUID
  id_in: [UUID!]
  id_not_in: [UUID!]
  id_lt: UUID
  id_lte: UUID
  id_gt: UUID
  id_gte: UUID
  id_contains: UUID
  id_not_contains: UUID
  id_starts_with: UUID
  id_not_starts_with: UUID
  id_ends_with: UUID
  id_not_ends_with: UUID
  user: UserWhereInput
  course: CourseWhereInput
  service: ServiceWhereInput
  AND: [UserCourseServiceProgressWhereInput!]
  OR: [UserCourseServiceProgressWhereInput!]
  NOT: [UserCourseServiceProgressWhereInput!]
}

input UserCourseServiceProgressWhereUniqueInput {
  id: UUID
}

input UserCreateInput {
  id: UUID
  upstream_id: Int!
  created_at: DateTime
  updated_at: DateTime
  first_name: String
  last_name: String
  username: String!
  email: String!
  administrator: Boolean!
  student_number: String
  real_student_number: String
  completions: CompletionCreateManyWithoutUserInput
  registered_completions: CompletionRegisteredCreateManyWithoutUserInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCompletionsInput {
  create: UserCreateWithoutCompletionsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutRegistered_completionsInput {
  create: UserCreateWithoutRegistered_completionsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCompletionsInput {
  id: UUID
  upstream_id: Int!
  created_at: DateTime
  updated_at: DateTime
  first_name: String
  last_name: String
  username: String!
  email: String!
  administrator: Boolean!
  student_number: String
  real_student_number: String
  registered_completions: CompletionRegisteredCreateManyWithoutUserInput
}

input UserCreateWithoutRegistered_completionsInput {
  id: UUID
  upstream_id: Int!
  created_at: DateTime
  updated_at: DateTime
  first_name: String
  last_name: String
  username: String!
  email: String!
  administrator: Boolean!
  student_number: String
  real_student_number: String
  completions: CompletionCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  upstream_id_ASC
  upstream_id_DESC
  created_at_ASC
  created_at_DESC
  updated_at_ASC
  updated_at_DESC
  first_name_ASC
  first_name_DESC
  last_name_ASC
  last_name_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  administrator_ASC
  administrator_DESC
  student_number_ASC
  student_number_DESC
  real_student_number_ASC
  real_student_number_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: UUID!
  upstream_id: Int!
  created_at: DateTime
  updated_at: DateTime
  first_name: String
  last_name: String
  username: String!
  email: String!
  administrator: Boolean!
  student_number: String
  real_student_number: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  upstream_id: Int
  created_at: DateTime
  updated_at: DateTime
  first_name: String
  last_name: String
  username: String
  email: String
  administrator: Boolean
  student_number: String
  real_student_number: String
  completions: CompletionUpdateManyWithoutUserInput
  registered_completions: CompletionRegisteredUpdateManyWithoutUserInput
}

input UserUpdateInput {
  upstream_id: Int
  created_at: DateTime
  updated_at: DateTime
  first_name: String
  last_name: String
  username: String
  email: String
  administrator: Boolean
  student_number: String
  real_student_number: String
  completions: CompletionUpdateManyWithoutUserInput
  registered_completions: CompletionRegisteredUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  upstream_id: Int
  created_at: DateTime
  updated_at: DateTime
  first_name: String
  last_name: String
  username: String
  email: String
  administrator: Boolean
  student_number: String
  real_student_number: String
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCompletionsInput {
  create: UserCreateWithoutCompletionsInput
  update: UserUpdateWithoutCompletionsDataInput
  upsert: UserUpsertWithoutCompletionsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutRegistered_completionsInput {
  create: UserCreateWithoutRegistered_completionsInput
  update: UserUpdateWithoutRegistered_completionsDataInput
  upsert: UserUpsertWithoutRegistered_completionsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCompletionsDataInput {
  upstream_id: Int
  created_at: DateTime
  updated_at: DateTime
  first_name: String
  last_name: String
  username: String
  email: String
  administrator: Boolean
  student_number: String
  real_student_number: String
  registered_completions: CompletionRegisteredUpdateManyWithoutUserInput
}

input UserUpdateWithoutRegistered_completionsDataInput {
  upstream_id: Int
  created_at: DateTime
  updated_at: DateTime
  first_name: String
  last_name: String
  username: String
  email: String
  administrator: Boolean
  student_number: String
  real_student_number: String
  completions: CompletionUpdateManyWithoutUserInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutCompletionsInput {
  update: UserUpdateWithoutCompletionsDataInput!
  create: UserCreateWithoutCompletionsInput!
}

input UserUpsertWithoutRegistered_completionsInput {
  update: UserUpdateWithoutRegistered_completionsDataInput!
  create: UserCreateWithoutRegistered_completionsInput!
}

input UserWhereInput {
  id: UUID
  id_not: UUID
  id_in: [UUID!]
  id_not_in: [UUID!]
  id_lt: UUID
  id_lte: UUID
  id_gt: UUID
  id_gte: UUID
  id_contains: UUID
  id_not_contains: UUID
  id_starts_with: UUID
  id_not_starts_with: UUID
  id_ends_with: UUID
  id_not_ends_with: UUID
  upstream_id: Int
  upstream_id_not: Int
  upstream_id_in: [Int!]
  upstream_id_not_in: [Int!]
  upstream_id_lt: Int
  upstream_id_lte: Int
  upstream_id_gt: Int
  upstream_id_gte: Int
  created_at: DateTime
  created_at_not: DateTime
  created_at_in: [DateTime!]
  created_at_not_in: [DateTime!]
  created_at_lt: DateTime
  created_at_lte: DateTime
  created_at_gt: DateTime
  created_at_gte: DateTime
  updated_at: DateTime
  updated_at_not: DateTime
  updated_at_in: [DateTime!]
  updated_at_not_in: [DateTime!]
  updated_at_lt: DateTime
  updated_at_lte: DateTime
  updated_at_gt: DateTime
  updated_at_gte: DateTime
  first_name: String
  first_name_not: String
  first_name_in: [String!]
  first_name_not_in: [String!]
  first_name_lt: String
  first_name_lte: String
  first_name_gt: String
  first_name_gte: String
  first_name_contains: String
  first_name_not_contains: String
  first_name_starts_with: String
  first_name_not_starts_with: String
  first_name_ends_with: String
  first_name_not_ends_with: String
  last_name: String
  last_name_not: String
  last_name_in: [String!]
  last_name_not_in: [String!]
  last_name_lt: String
  last_name_lte: String
  last_name_gt: String
  last_name_gte: String
  last_name_contains: String
  last_name_not_contains: String
  last_name_starts_with: String
  last_name_not_starts_with: String
  last_name_ends_with: String
  last_name_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  administrator: Boolean
  administrator_not: Boolean
  student_number: String
  student_number_not: String
  student_number_in: [String!]
  student_number_not_in: [String!]
  student_number_lt: String
  student_number_lte: String
  student_number_gt: String
  student_number_gte: String
  student_number_contains: String
  student_number_not_contains: String
  student_number_starts_with: String
  student_number_not_starts_with: String
  student_number_ends_with: String
  student_number_not_ends_with: String
  real_student_number: String
  real_student_number_not: String
  real_student_number_in: [String!]
  real_student_number_not_in: [String!]
  real_student_number_lt: String
  real_student_number_lte: String
  real_student_number_gt: String
  real_student_number_gte: String
  real_student_number_contains: String
  real_student_number_not_contains: String
  real_student_number_starts_with: String
  real_student_number_not_starts_with: String
  real_student_number_ends_with: String
  real_student_number_not_ends_with: String
  completions_every: CompletionWhereInput
  completions_some: CompletionWhereInput
  completions_none: CompletionWhereInput
  registered_completions_every: CompletionRegisteredWhereInput
  registered_completions_some: CompletionRegisteredWhereInput
  registered_completions_none: CompletionRegisteredWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: UUID
  upstream_id: Int
  username: String
}

scalar UUID
`