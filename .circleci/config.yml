version: 2.1
orbs:
  helm: circleci/helm@1.1.2
  docker: circleci/docker@1.7.0
  jq: circleci/jq@2.2.0
  node: circleci/node@5.0.0
executors:
  backend_test: 
    docker:
      - image: cimg/node:14.18.3
      - image: cimg/postgres:11.13
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test
          POSTGRES_PASSWORD: ""
  backend_build:
    docker:
      - image: eu.gcr.io/moocfi-public/cloud-sdk-node:latest 

jobs:
  code_style:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - node/install-packages
      # - restore_cache:
      #     keys:
      #       - node-root-{{ .Branch }}-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
      #       - node-root-{{ .Branch }}
      # - run:
      #     name: "Install dependencies"
      #     command: "[ ! -d node_modules ] && npm ci --loglevel warn --yes || echo package.json and package-lock.json unchanged. Using cache."
      # - save_cache:
      #     key: node-root-{{ .Branch }}-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
      #     paths:
      #       - node_modules
      - run:
          name: "Check code style"
          command: "bin/check-code-style.sh"
      - run:
          name: "ESLint"
          command: "bin/eslint.sh"
      - helm/install-helm-client:
          version: v3.4.2
      - run:
          name: "Helm"
          command: "bin/helm.sh"

  build_frontend:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "Build frontend image"
          command: "bin/build-docker-frontend.sh"
      - run:
          name: "Push image if on master/staging"
          command: "bin/push-docker-frontend-image.sh"

  prepare_backend_test:
    executor: backend_test
    environment:
      DATABASE_URL: postgres://root@localhost/circle_test
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USER: root
      DB_PASSWORD: ""
      DB_NAME: circle_test
      RUNNING_IN_CI: "true"
      NODE_ENV: test
    working_directory: ~/project/backend
    steps: 
      - checkout:
          path: ~/project
      # - setup_remote_docker:
      #     version: 19.03.13
      - jq/install
      # - docker/install-docker-tools:
      #     docker-compose-version: 1.29.2
      # - run:
      #     name: "Install psql client"
      #     command: |
      #       sudo apt-get update
      #       sudo apt-get install postgresql-client 
      # - run:
      #     name: "Wait for database"
      #     command: dockerize -wait tcp://localhost:5432 -timeout 1m
      # - run:
      #     name: "Create extensions"
      #     command: | 
      #       psql -d circle_test -U root -p 5432 -h localhost -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"
      - node/install-packages
      # - restore_cache:
      #     keys:
      #       - node-backend-{{ .Branch }}-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
      #       - node-backend-{{ .Branch }}
      #       - node-backend
      # - run:
      #     name: "Install dependencies"
      #     command: "[ ! -d node_modules ] && npm ci --loglevel warn --yes || echo package.json and package-lock.json unchanged. Using cache."
      # - save_cache:
      #     key: node-backend-{{ .Branch }}-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}
      #     paths:
      #       - node_modules
      - run:
          name: "Set environment"
          command: |
            npm run download-env
            cp .env.example .env
      - run:
          name: "Set up Prisma"
          command: npm run generate
      - persist_to_workspace:
          root: .
          paths: 
           - .

 # trying to get the test reports from parallel runs to be aggregated
  # - most likely just output to json, then create just one big json from it
  # - then create lcov and junit reports from it
  test_backend:
    executor: backend_test
    # docker:
    #   - image: cimg/node:14.18.3 # eu.gcr.io/moocfi-public/cloud-sdk-node:latest
    #   - image: cimg/postgres:11.13
    #     environment:
    #       POSTGRES_USER: root
    #       POSTGRES_DB: circle_test
    #       POSTGRES_PASSWORD: ""
    environment:
      DATABASE_URL: postgres://root@localhost/circle_test
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USER: root
      DB_PASSWORD: ""
      DB_NAME: circle_test
      RUNNING_IN_CI: "true"
      NODE_ENV: test
    parallelism: 8
    working_directory: ~/project/backend
    steps: 
      - attach_workspace:
          at: .
      - run:
          name: "Install psql client"
          command: |
            sudo apt-get update
            sudo apt-get install postgresql-client 
      - run:
          name: "Wait for database"
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: "Create extensions"
          command: | 
            psql -d circle_test -U root -p 5432 -h localhost -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"
      - run:
          name: "Parallel #"
          command: |
            echo $CIRCLE_NODE_INDEX
            echo ${CIRCLE_NODE_INDEX}
      - run:
          name: "Run tests"
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./coverage/junit/
          command: |
            TEST=$(circleci tests glob ./**/*.test.ts | grep -v node_modules | circleci tests split --split-by=timings)
            echo $TEST
            npm run test:ci -- --runTestsByPath $TEST
      - store_test_results:
          path: ./coverage/junit/
      - store_artifacts:
          path: ./coverage/junit/
      - store_artifacts:
          path: ./coverage/jest
          destination: backend-tests
      - persist_to_workspace:
          root: .
          paths:
            - coverage
      # - run:
      #     name: "Upload coverage"
      #     command: "cd ~/project/backend && bash <(curl -s https://codecov.io/bash)"

  upload_backend_test_results:
    executor: backend_test
    working_directory: ~/project/backend
    steps:
      - attach_workspace:
          at: .
      - run:
          name: "Upload test results"
          command: |
            ls -la
  
  build_backend:
    executor: backend_build
    #docker:
    #  - image: eu.gcr.io/moocfi-public/cloud-sdk-node:latest
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - jq/install
      # - docker/install-docker-tools:
      #     docker-compose-version: 1.29.2
      - run:
          name: "Build backend image"
          command: "bin/build-docker-backend.sh"
      - persist_to_workspace:
          root: .
          paths:
            - ./backend

  push_backend:
    executor: backend_build
    #docker:
    #  - image: eu.gcr.io/moocfi-public/cloud-sdk-node:latest
    steps:
      - attach_workspace:
          at: ./backend
      - run:
          name: "Push image if on master/staging"
          command: "bin/push-docker-backend-image.sh"

  build_auth:
    docker:
      - image: eu.gcr.io/moocfi-public/cloud-sdk-node:latest
    steps:
      - checkout
      - setup_remote_docker
      - jq/install
      - docker/install-docker-tools:
          docker-compose-version: 1.29.2
      - run:
          name: "Build image"
          command: "bin/build-docker-auth.sh"
      - run:
          name: "Push image if on master"
          command: "bin/push-docker-auth-image.sh"  
    
  deploy_to_production:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - setup_remote_docker      
      - helm/install-helm-client:
          version: v3.4.2
      - run:
          name: install envsubst
          command: apt-get install -qq -y gettext
      - run:
          name: "Deploy"
          command: "bin/ci-update-deployments.sh"

workflows:
  version: 2
  build-deploy:
    jobs:
      - code_style
      - build_frontend
      - prepare_backend_test
      - test_backend:
          requires:
            - prepare_backend_test
      - upload_backend_test_results:
          requires: 
            - test_backend
      - build_backend
      - push_backend:
          requires:
            - test_backend
            - build_backend
      - build_auth
      - deploy_to_production:
          requires:
            - build_frontend
            - test_backend
            - upload_backend_test_results
            - build_backend
            - push_backend
            - build_auth
            - code_style
          filters:
            branches:
              only:
                - master
                - staging
