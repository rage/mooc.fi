version: 2.1
orbs:
  helm: circleci/helm@1.0.0
  docker: circleci/docker@1.5.0
  jq: circleci/jq@2.2.0
jobs:
  code_style:
    docker:
      - image: circleci/node:11
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-root-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - node-root-{{ .Branch }}
            - node-root
      - run:
          name: "Install dependencies"
          command: "npm ci"
      - save_cache:
          key: node-root-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: "Check code style"
          command: "bin/check-code-style.sh"
      - run:
          name: "ESLint"
          command: "bin/eslint.sh"
      - helm/install-helm-client:
          version: v3.2.4
      - run:
          name: "Helm"
          command: "bin/helm.sh"

  build_frontend:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: "Build frontend image"
          command: "bin/build-docker-frontend.sh"
      - run:
          name: "Push image if on master"
          command: "bin/push-docker-frontend-image.sh"

  build_backend:
    docker:
      - image: eu.gcr.io/moocfi-public/cloud-sdk-node:latest
      # - image: circleci/postgres:9.6.5-alpine-ram
      #   environment:
      #     POSTGRES_USER: prisma
      #     POSTGRES_PASSWORD: prisma
      #     POSTGRES_DB: testing
    steps:
      - checkout
      - setup_remote_docker
      - jq/install
      - docker/install-docker-tools
      - run:
          name: "Build backend image"
          command: "bin/build-docker-backend.sh"
#       - run:
#           name: Install Docker Compose
#           command: |
#             curl -L https://github.com/docker/compose/releases/download/1.25.3/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
#             chmod +x ~/docker-compose
#             mv ~/docker-compose /usr/local/bin/docker-compose
      - run:
          name: "DB for tests"
          command: |
            cd backend
            docker-compose up -d
      - run:
          name: "Tests"
          environment:
            PGPASSWORD: "prisma"
          command: |
            docker run --env NODE_ENV=test --env LD_PRELOAD=/app/node_modules/sharp/vendor/lib/libz.so --net host --rm "eu.gcr.io/moocfi/moocfi-backend:build-$CIRCLE_WORKFLOW_ID-$(git rev-parse --verify HEAD)" /bin/bash -c "npm run create-test-db; npm run test -- --runInBand --ci"
      #      dockerize -wait tcp://localhost:5678 -timeout 1m 
      # - restore_cache:
      #     keys:
      #       - node-backend-{{ .Branch }}-{{ checksum "~/project/backend/package-lock.json" }}
      #       - node-backend-{{ .Branch }}
      #       - node-backend
      # - run:
      #     name: Install dependencies
      #     environment:
      #       NEW_RELIC_NO_CONFIG_FILE: "true"
      #       NEW_RELIC_LICENSE_KEY: ""
      #     command: |
      #       cd backend
      #       cp .env.example .env
      #       npm i
      # - save_cache:
      #     key: node-backend-{{ .Branch }}-{{ checksum "~/project/backend/package-lock.json" }}
      #     paths:
      #       - ~/project/backend/node_modules
      # - run:
      #     name: Build
      #     environment:
      #       NEW_RELIC_NO_CONFIG_FILE: "true"
      #       NEW_RELIC_LICENSE_KEY: ""
      #     command: |
      #       cd backend
      #       npm run generate
      #       npm run build
      # - run:
      #     name: "Run tests"
      #     command: |
      #       cd backend
      #       npm run create-test-db
      #       npm run test -- --runInBand
      #       cd ..       
      - run:
          name: "Push image if on master"
          command: "bin/push-docker-backend-image.sh"

  deploy_to_production:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - setup_remote_docker      
      - helm/install-helm-client:
          version: v3.2.4
      - run:
          name: install envsubst
          command: apt-get install -qq -y gettext
      - run:
          name: "Deploy"
          command: "bin/ci-update-deployments.sh"

workflows:
  version: 2
  build-deploy:
    jobs:
      - build_frontend
      - build_backend
      - code_style
      - deploy_to_production:
          requires:
            - build_frontend
            - build_backend
            - code_style
          filters:
            branches:
              only:
                - master
