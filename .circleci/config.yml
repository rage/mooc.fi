version: 2.1
orbs:
  helm: circleci/helm@2.0.1
  docker: circleci/docker@2.2.0
  jq: circleci/jq@2.2.0
  node: circleci/node@5.1.0
#  codecov: codecov/codecov@3.2.4
executors:
  node_postgres:
    docker:
      - image: cimg/node:18.16.0
      - image: cimg/postgres:14.6
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test
          POSTGRES_PASSWORD: ""
  cloudsdk_node:
    docker:
      - image: eu.gcr.io/moocfi-public/cloud-sdk-node:latest
  cloudsdk:
    docker:
      - image: google/cloud-sdk:latest

jobs:
  code_style:
    docker:
      - image: cimg/node:18.16.0
    steps:
      - checkout
      - node/install-packages
      - run:
          name: "Check code style"
          command: "bin/check-code-style.sh"
      - run:
          name: "ESLint"
          command: "bin/eslint.sh"
      - helm/install-helm-client:
          version: v3.4.2
      - run:
          name: "Helm"
          command: "bin/helm.sh"

  build_frontend:
    executor: cloudsdk
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - restore_cache:
          keys:
          - dependency-cache-{{ checksum "frontend/package.json" }}-checksum "frontend/package-lock.json" }}
          - dependency-cache-{{ checksum "frontend/package.json" }}
      - run:
          name: "Build frontend image"
          command: "bin/build-docker-frontend.sh"
      - save_cache:
          key: dependency-cache-{{ checksum "frontend/package.json" }}-{{ checksum "frontend/package-lock.json" }}
          paths:
            - ~/.npm
            - ./frontend/.next/cache
      - run:
          name: "Push image if on master/staging"
          command: "bin/push-docker-frontend-image.sh"
    resource_class: large

  prepare_backend_test:
    executor: node_postgres
    working_directory: ~/project/backend
    steps:
      - checkout:
          path: ~/project
      - jq/install
      - run:
          name: patch-package hash
          command: md5sum patches/* > patches.hash
      - restore_cache:
          keys:
          - dependency-cache-{{ checksum "package-lock.json" }}-{{ checksum "prisma/schema.prisma" }}-{{ checksum "patches.hash" }}
          - dependency-cache-{{ checksum "package-lock.json" }}-{{ checksum "prisma/schema.prisma" }}
          - dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: "Install dependencies"
          command: npm ci
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}-{{ checksum "prisma/schema.prisma" }}-{{ checksum "patches.hash" }}
          paths:
            - ~/.npm
      - run:
          name: "Set environment"
          command: |
            npm run download-env
            cp .env.example .env
      - run:
          name: "Set up Prisma"
          command: |
            npm run generate
      - persist_to_workspace:
          root: ~/project
          paths:
            - .
    resource_class: large

  test_backend:
    executor: node_postgres
    environment:
      DATABASE_URL: postgres://root@localhost/circle_test
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USER: root
      DB_PASSWORD: ""
      DB_NAME: circle_test
      RUNNING_IN_CI: "true"
      NODE_ENV: test
    parallelism: 8
    working_directory: ~/project/backend
    steps:
      - attach_workspace:
          at: ~/project
      # - run:
      #     name: "Install psql client"
      #     command: |
      #       sudo apt-get update
      #       sudo apt-get install postgresql-client
      - run:
          name: "Wait for database"
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: "Create extensions"
          command: |
            psql -d circle_test -U root -p 5432 -h localhost -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"; CREATE EXTENSION IF NOT EXISTS \"pg_trgm\"; CREATE EXTENSION IF NOT EXISTS \"btree_gin\";"
      - run:
          name: "Run tests"
          command: |
            TEST=$(circleci tests glob ./**/*.test.ts | grep -v node_modules | circleci tests split --split-by=timings)
            echo $TEST
            npm run test:ci -- --runTestsByPath $TEST
      - run:
          name: "Process test reports"
          command: |
            if [ -e ./coverage/jest/clover.xml ]; then
              sed -i "s|`pwd`/||g" ./coverage/jest/clover.xml
            fi
            if [ -e ./coverage/jest/coverage-final.json ]; then
              sed -i "s|`pwd`/||g" ./coverage/jest/coverage-final.json
            fi
      - store_test_results:
          path: ./coverage/junit/
      - store_artifacts:
          path: ./coverage/junit/
      - store_artifacts:
          path: ./coverage/jest
          destination: backend-tests
      - persist_to_workspace:
          root: ~/project/backend
          paths:
            - coverage
      - run:
          name: "Upload coverage"
          command: |
            curl https://uploader.codecov.io/latest/linux/codecov -o /tmp/codecov
            chmod +x /tmp/codecov
            /tmp/codecov -F backend -n "${CIRCLE_BUILD_NUM}"
  ### when codecov orb is enabled
  #    - codecov/upload:
  #        flags: backend
    # The resource_class feature allows configuring CPU and RAM resources for each job. Different resource classes are available for different executors. https://circleci.com/docs/2.0/configuration-reference/#resourceclass
    resource_class: large
  # could combine the artifacts in this step if needed, now the codecov/junit stuff combines automatically
  # upload_backend_coverage:
  #   executor: backend_test
  #   working_directory: ~/project/backend/coverage
  #   steps:
  #     - attach_workspace:
  #         at: ~/project/backend
  #     - run:
  #         name: "Debug workspace"
  #         command: find .
  #     - run:
  #         name: "Combine coverage"
  #         command: |
  #           echo "Not implemented yet"
  #     - run:
  #         name: "Upload coverage"
  #         command: |
  #           echo "Not implemented yet"
  # could also be only for master/staging since now we're doing npm install earlier, and if it passes there, it will pass here too
  # - only that the node version is different in backend image?
  build_backend:
    executor: cloudsdk_node
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - jq/install
      - docker/install-docker-tools
      - run:
          name: patch-package hash
          command: md5sum backend/patches/* > backend/patches.hash
      - restore_cache:
          keys:
          - dependency-cache-{{ checksum "backend/package-lock.json" }}-{{ checksum "backend/prisma/schema.prisma" }}-{{ checksum "backend/patches.hash" }}
          - dependency-cache-{{ checksum "backend/package-lock.json" }}-{{ checksum "backend/prisma/schema.prisma" }}
          - dependency-cache-{{ checksum "backend/package-lock.json" }}
      - run:
          name: "Build backend image"
          command: "bin/build-docker-backend.sh"
      - save_cache:
          key: dependency-cache-{{ checksum "backend/package-lock.json" }}-{{ checksum "backend/prisma/schema.prisma" }}-{{ checksum "backend/patches.hash" }}
          paths:
            - ~/.npm
      - run:
          name: "Persist image"
          command: |
            REV="$CIRCLE_WORKFLOW_ID-$(git rev-parse --verify HEAD)"
            TAG="eu.gcr.io/moocfi/moocfi-backend:build-$REV"
            mkdir -p ~/project/build
            docker save $TAG | gzip > ~/project/build/moocfi-backend.tar.gz
      - persist_to_workspace:
          root: ~/project
          paths:
            - build
            - backend/sourcemap
    resource_class: large

  push_backend:
    executor: cloudsdk_node
    steps:
      - attach_workspace:
          at: ~/project
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: "Restore image"
          command: |
            docker load < ./build/moocfi-backend.tar.gz
      - run:
          name: "Push image if on master/staging"
          command: "bin/push-docker-backend-image.sh"
    resource_class: large

  # build_auth:
  #   docker:
  #     - image: eu.gcr.io/moocfi-public/cloud-sdk-node:latest
  #   steps:
  #     - checkout
  #     - setup_remote_docker:
  #         version: 19.03.13
  #     - jq/install
  #     - docker/install-docker-tools:
  #         docker-compose-version: 1.29.2
  #     - run:
  #         name: "Install deps for tests"
  #         command: |
  #           cd auth
  #           npm ci
  #           cd ..
  #     - run:
  #         name: "Tests"
  #         command: "bin/run-auth-tests.sh"
  #     - run:
  #         name: "Build image"
  #         command: "bin/build-docker-auth.sh"
  #     - store_test_results:
  #         path: ~/project/auth/coverage/junit/
  #     - store_artifacts:
  #         path: ~/project/auth/coverage/jest
  #         destination: auth-tests
  #     - run:
  #         name: "Upload coverage"
  #         command: |
  #           curl https://uploader.codecov.io/latest/linux/codecov -o /tmp/codecov
  #           chmod +x /tmp/codecov
  #           cd ~/project/auth
  #           /tmp/codecov -F auth
  #         # command: "cd ~/project/auth && bash <(curl -s https://codecov.io/bash)"
  #     - run:
  #         name: "Push image if on master"
  #         command: "bin/push-docker-auth-image.sh"
  deploy_to_production:
    executor: cloudsdk
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - helm/install-helm-client:
          version: v3.4.2
      - run:
          name: install envsubst
          command: apt-get install -qq -y gettext
      - run:
          name: "Deploy"
          command: "bin/ci-update-deployments.sh"
    resource_class: large

workflows:
  build-deploy:
    jobs:
      - code_style
      - build_frontend
      - prepare_backend_test
      - test_backend:
          requires:
            - prepare_backend_test
      #- upload_backend_coverage:
      #    requires:
      #      - test_backend
      - build_backend
      - push_backend:
          requires:
            - test_backend
            - build_backend
          filters:
            branches:
              only:
                - master
                - staging
      # - build_auth
      - deploy_to_production:
          requires:
            - build_frontend
            - test_backend
            #- upload_backend_coverage
            - build_backend
            - push_backend
            # - build_auth
            - code_style
          filters:
            branches:
              only:
                - master
                - staging